/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.Object
		var v3 pkg1_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct103 := r.ContainerType()
		if yyct103 == codecSelferValueTypeMap1234 {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if yyct103 == codecSelferValueTypeArray1234 {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			var yynn141 int
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				yynn141 = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
				yynn141 = 0
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct159 := r.ContainerType()
		if yyct159 == codecSelferValueTypeMap1234 {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if yyct159 == codecSelferValueTypeArray1234 {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [11]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[0] = x.GCEPersistentDisk != nil
			yyq195[1] = x.AWSElasticBlockStore != nil
			yyq195[2] = x.HostPath != nil
			yyq195[3] = x.Glusterfs != nil
			yyq195[4] = x.NFS != nil
			yyq195[5] = x.RBD != nil
			yyq195[6] = x.ISCSI != nil
			yyq195[7] = x.Cinder != nil
			yyq195[8] = x.CephFS != nil
			yyq195[9] = x.FC != nil
			yyq195[10] = x.Flocker != nil
			var yynn195 int
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(11)
			} else {
				yynn195 = 0
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
				yynn195 = 0
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym207 := z.DecBinary()
	_ = yym207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct208 := r.ContainerType()
		if yyct208 == codecSelferValueTypeMap1234 {
			yyl208 := r.ReadMapStart()
			if yyl208 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl208, d)
			}
		} else if yyct208 == codecSelferValueTypeArray1234 {
			yyl208 := r.ReadArrayStart()
			if yyl208 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys209Slc
	var yyhl209 bool = l >= 0
	for yyj209 := 0; ; yyj209++ {
		if yyhl209 {
			if yyj209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys209Slc = r.DecodeBytes(yys209Slc, true, true)
		yys209 := string(yys209Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys209 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys209)
		} // end switch yys209
	} // end for yyj209
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym233 := z.EncBinary()
		_ = yym233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep234 := !z.EncBinary()
			yy2arr234 := z.EncBasicHandle().StructToArray
			var yyq234 [2]bool
			_, _, _ = yysep234, yyq234, yy2arr234
			const yyr234 bool = false
			yyq234[1] = x.ReadOnly != false
			var yynn234 int
			if yyr234 || yy2arr234 {
				r.EncodeArrayStart(2)
			} else {
				yynn234 = 1
				for _, b := range yyq234 {
					if b {
						yynn234++
					}
				}
				r.EncodeMapStart(yynn234)
				yynn234 = 0
			}
			if yyr234 || yy2arr234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym236 := z.EncBinary()
				_ = yym236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym237 := z.EncBinary()
				_ = yym237
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr234 || yy2arr234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq234[1] {
					yym239 := z.EncBinary()
					_ = yym239
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq234[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym240 := z.EncBinary()
					_ = yym240
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr234 || yy2arr234 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym241 := z.DecBinary()
	_ = yym241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct242 := r.ContainerType()
		if yyct242 == codecSelferValueTypeMap1234 {
			yyl242 := r.ReadMapStart()
			if yyl242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl242, d)
			}
		} else if yyct242 == codecSelferValueTypeArray1234 {
			yyl242 := r.ReadArrayStart()
			if yyl242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys243Slc
	var yyhl243 bool = l >= 0
	for yyj243 := 0; ; yyj243++ {
		if yyhl243 {
			if yyj243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys243Slc = r.DecodeBytes(yys243Slc, true, true)
		yys243 := string(yys243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys243 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys243)
		} // end switch yys243
	} // end for yyj243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj246 int
	var yyb246 bool
	var yyhl246 bool = l >= 0
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj246++
		if yyhl246 {
			yyb246 = yyj246 > l
		} else {
			yyb246 = r.CheckBreak()
		}
		if yyb246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			var yynn250 int
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				yynn250 = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
				yynn250 = 0
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct267 := r.ContainerType()
		if yyct267 == codecSelferValueTypeMap1234 {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if yyct267 == codecSelferValueTypeArray1234 {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			var yynn281 int
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				yynn281 = 1
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
				yynn281 = 0
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct300 := r.ContainerType()
		if yyct300 == codecSelferValueTypeMap1234 {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if yyct300 == codecSelferValueTypeArray1234 {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			var yynn338 int
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				yynn338 = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
				yynn338 = 0
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct347 := r.ContainerType()
		if yyct347 == codecSelferValueTypeMap1234 {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if yyct347 == codecSelferValueTypeArray1234 {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			var yynn357 int
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				yynn357 = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
				yynn357 = 0
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct373 := r.ContainerType()
		if yyct373 == codecSelferValueTypeMap1234 {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if yyct373 == codecSelferValueTypeArray1234 {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			var yynn389 int
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				yynn389 = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
				yynn389 = 0
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct406 := r.ContainerType()
		if yyct406 == codecSelferValueTypeMap1234 {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if yyct406 == codecSelferValueTypeArray1234 {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			var yynn420 int
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				yynn420 = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
				yynn420 = 0
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct436 := r.ContainerType()
		if yyct436 == codecSelferValueTypeMap1234 {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if yyct436 == codecSelferValueTypeArray1234 {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			var yynn452 int
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				yynn452 = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
				yynn452 = 0
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct463 := r.ContainerType()
		if yyct463 == codecSelferValueTypeMap1234 {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if yyct463 == codecSelferValueTypeArray1234 {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			var yynn475 int
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				yynn475 = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
				yynn475 = 0
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			var yynn500 int
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				yynn500 = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
				yynn500 = 0
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct505 := r.ContainerType()
		if yyct505 == codecSelferValueTypeMap1234 {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if yyct505 == codecSelferValueTypeArray1234 {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			var yynn511 int
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				yynn511 = 1
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
				yynn511 = 0
			}
			if yyr511 || yy2arr511 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Medium.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("medium"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Medium.CodecEncodeSelf(e)
			}
			if yyr511 || yy2arr511 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct514 := r.ContainerType()
		if yyct514 == codecSelferValueTypeMap1234 {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if yyct514 == codecSelferValueTypeArray1234 {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym519 := z.EncBinary()
	_ = yym519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym521 := z.EncBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym522 := z.DecBinary()
	_ = yym522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym523 := z.EncBinary()
		_ = yym523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep524 := !z.EncBinary()
			yy2arr524 := z.EncBasicHandle().StructToArray
			var yyq524 [4]bool
			_, _, _ = yysep524, yyq524, yy2arr524
			const yyr524 bool = false
			yyq524[1] = x.FSType != ""
			yyq524[2] = x.Partition != 0
			yyq524[3] = x.ReadOnly != false
			var yynn524 int
			if yyr524 || yy2arr524 {
				r.EncodeArrayStart(4)
			} else {
				yynn524 = 1
				for _, b := range yyq524 {
					if b {
						yynn524++
					}
				}
				r.EncodeMapStart(yynn524)
				yynn524 = 0
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[1] {
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq524[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[2] {
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq524[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[3] {
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq524[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym537 := z.DecBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct538 := r.ContainerType()
		if yyct538 == codecSelferValueTypeMap1234 {
			yyl538 := r.ReadMapStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl538, d)
			}
		} else if yyct538 == codecSelferValueTypeArray1234 {
			yyl538 := r.ReadArrayStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys539Slc
	var yyhl539 bool = l >= 0
	for yyj539 := 0; ; yyj539++ {
		if yyhl539 {
			if yyj539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys539Slc = r.DecodeBytes(yys539Slc, true, true)
		yys539 := string(yys539Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys539 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys539)
		} // end switch yys539
	} // end for yyj539
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj544 int
	var yyb544 bool
	var yyhl544 bool = l >= 0
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj544++
		if yyhl544 {
			yyb544 = yyj544 > l
		} else {
			yyb544 = r.CheckBreak()
		}
		if yyb544 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj544-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym549 := z.EncBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep550 := !z.EncBinary()
			yy2arr550 := z.EncBasicHandle().StructToArray
			var yyq550 [5]bool
			_, _, _ = yysep550, yyq550, yy2arr550
			const yyr550 bool = false
			yyq550[0] = x.TargetPortal != ""
			yyq550[1] = x.IQN != ""
			yyq550[2] = x.Lun != 0
			yyq550[3] = x.FSType != ""
			yyq550[4] = x.ReadOnly != false
			var yynn550 int
			if yyr550 || yy2arr550 {
				r.EncodeArrayStart(5)
			} else {
				yynn550 = 0
				for _, b := range yyq550 {
					if b {
						yynn550++
					}
				}
				r.EncodeMapStart(yynn550)
				yynn550 = 0
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[0] {
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[1] {
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[2] {
					yym558 := z.EncBinary()
					_ = yym558
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq550[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[3] {
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[4] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq550[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct567 := r.ContainerType()
		if yyct567 == codecSelferValueTypeMap1234 {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if yyct567 == codecSelferValueTypeArray1234 {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys568 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj574 int
	var yyb574 bool
	var yyhl574 bool = l >= 0
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj574++
		if yyhl574 {
			yyb574 = yyj574 > l
		} else {
			yyb574 = r.CheckBreak()
		}
		if yyb574 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj574-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym580 := z.EncBinary()
		_ = yym580
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep581 := !z.EncBinary()
			yy2arr581 := z.EncBasicHandle().StructToArray
			var yyq581 [4]bool
			_, _, _ = yysep581, yyq581, yy2arr581
			const yyr581 bool = false
			yyq581[3] = x.ReadOnly != false
			var yynn581 int
			if yyr581 || yy2arr581 {
				r.EncodeArrayStart(4)
			} else {
				yynn581 = 3
				for _, b := range yyq581 {
					if b {
						yynn581++
					}
				}
				r.EncodeMapStart(yynn581)
				yynn581 = 0
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym583 := z.EncBinary()
					_ = yym583
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym584 := z.EncBinary()
					_ = yym584
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy586 := *x.Lun
					yym587 := z.EncBinary()
					_ = yym587
					if false {
					} else {
						r.EncodeInt(int64(yy586))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy588 := *x.Lun
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else {
						r.EncodeInt(int64(yy588))
					}
				}
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq581[3] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq581[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct597 := r.ContainerType()
		if yyct597 == codecSelferValueTypeMap1234 {
			yyl597 := r.ReadMapStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl597, d)
			}
		} else if yyct597 == codecSelferValueTypeArray1234 {
			yyl597 := r.ReadArrayStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys598Slc
	var yyhl598 bool = l >= 0
	for yyj598 := 0; ; yyj598++ {
		if yyhl598 {
			if yyj598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys598Slc = r.DecodeBytes(yys598Slc, true, true)
		yys598 := string(yys598Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys598 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv599 := &x.TargetWWNs
				yym600 := z.DecBinary()
				_ = yym600
				if false {
				} else {
					z.F.DecSliceStringX(yyv599, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym602 := z.DecBinary()
				_ = yym602
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys598)
		} // end switch yys598
	} // end for yyj598
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv606 := &x.TargetWWNs
		yym607 := z.DecBinary()
		_ = yym607
		if false {
		} else {
			z.F.DecSliceStringX(yyv606, false, d)
		}
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym609 := z.DecBinary()
		_ = yym609
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym612 := z.EncBinary()
		_ = yym612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep613 := !z.EncBinary()
			yy2arr613 := z.EncBasicHandle().StructToArray
			var yyq613 [4]bool
			_, _, _ = yysep613, yyq613, yy2arr613
			const yyr613 bool = false
			yyq613[1] = x.FSType != ""
			yyq613[2] = x.Partition != 0
			yyq613[3] = x.ReadOnly != false
			var yynn613 int
			if yyr613 || yy2arr613 {
				r.EncodeArrayStart(4)
			} else {
				yynn613 = 1
				for _, b := range yyq613 {
					if b {
						yynn613++
					}
				}
				r.EncodeMapStart(yynn613)
				yynn613 = 0
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym615 := z.EncBinary()
				_ = yym615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym616 := z.EncBinary()
				_ = yym616
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[1] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[2] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq613[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[3] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq613[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym626 := z.DecBinary()
	_ = yym626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct627 := r.ContainerType()
		if yyct627 == codecSelferValueTypeMap1234 {
			yyl627 := r.ReadMapStart()
			if yyl627 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl627, d)
			}
		} else if yyct627 == codecSelferValueTypeArray1234 {
			yyl627 := r.ReadArrayStart()
			if yyl627 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys628Slc
	var yyhl628 bool = l >= 0
	for yyj628 := 0; ; yyj628++ {
		if yyhl628 {
			if yyj628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys628Slc = r.DecodeBytes(yys628Slc, true, true)
		yys628 := string(yys628Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys628 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys628)
		} // end switch yys628
	} // end for yyj628
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym638 := z.EncBinary()
		_ = yym638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep639 := !z.EncBinary()
			yy2arr639 := z.EncBasicHandle().StructToArray
			var yyq639 [3]bool
			_, _, _ = yysep639, yyq639, yy2arr639
			const yyr639 bool = false
			yyq639[1] = x.Revision != ""
			yyq639[2] = x.Directory != ""
			var yynn639 int
			if yyr639 || yy2arr639 {
				r.EncodeArrayStart(3)
			} else {
				yynn639 = 1
				for _, b := range yyq639 {
					if b {
						yynn639++
					}
				}
				r.EncodeMapStart(yynn639)
				yynn639 = 0
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym641 := z.EncBinary()
				_ = yym641
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym642 := z.EncBinary()
				_ = yym642
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq639[1] {
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq639[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq639[2] {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq639[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym649 := z.DecBinary()
	_ = yym649
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct650 := r.ContainerType()
		if yyct650 == codecSelferValueTypeMap1234 {
			yyl650 := r.ReadMapStart()
			if yyl650 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl650, d)
			}
		} else if yyct650 == codecSelferValueTypeArray1234 {
			yyl650 := r.ReadArrayStart()
			if yyl650 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl650, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys651Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys651Slc
	var yyhl651 bool = l >= 0
	for yyj651 := 0; ; yyj651++ {
		if yyhl651 {
			if yyj651 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys651Slc = r.DecodeBytes(yys651Slc, true, true)
		yys651 := string(yys651Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys651 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys651)
		} // end switch yys651
	} // end for yyj651
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj655 int
	var yyb655 bool
	var yyhl655 bool = l >= 0
	yyj655++
	if yyhl655 {
		yyb655 = yyj655 > l
	} else {
		yyb655 = r.CheckBreak()
	}
	if yyb655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj655++
	if yyhl655 {
		yyb655 = yyj655 > l
	} else {
		yyb655 = r.CheckBreak()
	}
	if yyb655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj655++
	if yyhl655 {
		yyb655 = yyj655 > l
	} else {
		yyb655 = r.CheckBreak()
	}
	if yyb655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj655++
		if yyhl655 {
			yyb655 = yyj655 > l
		} else {
			yyb655 = r.CheckBreak()
		}
		if yyb655 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj655-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym659 := z.EncBinary()
		_ = yym659
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep660 := !z.EncBinary()
			yy2arr660 := z.EncBasicHandle().StructToArray
			var yyq660 [1]bool
			_, _, _ = yysep660, yyq660, yy2arr660
			const yyr660 bool = false
			var yynn660 int
			if yyr660 || yy2arr660 {
				r.EncodeArrayStart(1)
			} else {
				yynn660 = 1
				for _, b := range yyq660 {
					if b {
						yynn660++
					}
				}
				r.EncodeMapStart(yynn660)
				yynn660 = 0
			}
			if yyr660 || yy2arr660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym662 := z.EncBinary()
				_ = yym662
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym663 := z.EncBinary()
				_ = yym663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr660 || yy2arr660 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym664 := z.DecBinary()
	_ = yym664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct665 := r.ContainerType()
		if yyct665 == codecSelferValueTypeMap1234 {
			yyl665 := r.ReadMapStart()
			if yyl665 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl665, d)
			}
		} else if yyct665 == codecSelferValueTypeArray1234 {
			yyl665 := r.ReadArrayStart()
			if yyl665 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl665, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys666Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys666Slc
	var yyhl666 bool = l >= 0
	for yyj666 := 0; ; yyj666++ {
		if yyhl666 {
			if yyj666 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys666Slc = r.DecodeBytes(yys666Slc, true, true)
		yys666 := string(yys666Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys666 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys666)
		} // end switch yys666
	} // end for yyj666
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj668 int
	var yyb668 bool
	var yyhl668 bool = l >= 0
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj668++
		if yyhl668 {
			yyb668 = yyj668 > l
		} else {
			yyb668 = r.CheckBreak()
		}
		if yyb668 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj668-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym670 := z.EncBinary()
		_ = yym670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep671 := !z.EncBinary()
			yy2arr671 := z.EncBasicHandle().StructToArray
			var yyq671 [3]bool
			_, _, _ = yysep671, yyq671, yy2arr671
			const yyr671 bool = false
			yyq671[2] = x.ReadOnly != false
			var yynn671 int
			if yyr671 || yy2arr671 {
				r.EncodeArrayStart(3)
			} else {
				yynn671 = 2
				for _, b := range yyq671 {
					if b {
						yynn671++
					}
				}
				r.EncodeMapStart(yynn671)
				yynn671 = 0
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym673 := z.EncBinary()
				_ = yym673
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym674 := z.EncBinary()
				_ = yym674
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym676 := z.EncBinary()
				_ = yym676
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym677 := z.EncBinary()
				_ = yym677
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq671[2] {
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq671[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym681 := z.DecBinary()
	_ = yym681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct682 := r.ContainerType()
		if yyct682 == codecSelferValueTypeMap1234 {
			yyl682 := r.ReadMapStart()
			if yyl682 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl682, d)
			}
		} else if yyct682 == codecSelferValueTypeArray1234 {
			yyl682 := r.ReadArrayStart()
			if yyl682 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl682, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys683Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys683Slc
	var yyhl683 bool = l >= 0
	for yyj683 := 0; ; yyj683++ {
		if yyhl683 {
			if yyj683 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys683Slc = r.DecodeBytes(yys683Slc, true, true)
		yys683 := string(yys683Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys683 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys683)
		} // end switch yys683
	} // end for yyj683
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj687 int
	var yyb687 bool
	var yyhl687 bool = l >= 0
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj687++
		if yyhl687 {
			yyb687 = yyj687 > l
		} else {
			yyb687 = r.CheckBreak()
		}
		if yyb687 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj687-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym691 := z.EncBinary()
		_ = yym691
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep692 := !z.EncBinary()
			yy2arr692 := z.EncBasicHandle().StructToArray
			var yyq692 [3]bool
			_, _, _ = yysep692, yyq692, yy2arr692
			const yyr692 bool = false
			yyq692[2] = x.ReadOnly != false
			var yynn692 int
			if yyr692 || yy2arr692 {
				r.EncodeArrayStart(3)
			} else {
				yynn692 = 2
				for _, b := range yyq692 {
					if b {
						yynn692++
					}
				}
				r.EncodeMapStart(yynn692)
				yynn692 = 0
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym694 := z.EncBinary()
				_ = yym694
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym695 := z.EncBinary()
				_ = yym695
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym697 := z.EncBinary()
				_ = yym697
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym698 := z.EncBinary()
				_ = yym698
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq692[2] {
					yym700 := z.EncBinary()
					_ = yym700
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq692[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym702 := z.DecBinary()
	_ = yym702
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct703 := r.ContainerType()
		if yyct703 == codecSelferValueTypeMap1234 {
			yyl703 := r.ReadMapStart()
			if yyl703 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl703, d)
			}
		} else if yyct703 == codecSelferValueTypeArray1234 {
			yyl703 := r.ReadArrayStart()
			if yyl703 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl703, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys704Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys704Slc
	var yyhl704 bool = l >= 0
	for yyj704 := 0; ; yyj704++ {
		if yyhl704 {
			if yyj704 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys704Slc = r.DecodeBytes(yys704Slc, true, true)
		yys704 := string(yys704Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys704 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys704)
		} // end switch yys704
	} // end for yyj704
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj708 int
	var yyb708 bool
	var yyhl708 bool = l >= 0
	yyj708++
	if yyhl708 {
		yyb708 = yyj708 > l
	} else {
		yyb708 = r.CheckBreak()
	}
	if yyb708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj708++
	if yyhl708 {
		yyb708 = yyj708 > l
	} else {
		yyb708 = r.CheckBreak()
	}
	if yyb708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj708++
	if yyhl708 {
		yyb708 = yyj708 > l
	} else {
		yyb708 = r.CheckBreak()
	}
	if yyb708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj708++
		if yyhl708 {
			yyb708 = yyj708 > l
		} else {
			yyb708 = r.CheckBreak()
		}
		if yyb708 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj708-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym712 := z.EncBinary()
		_ = yym712
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep713 := !z.EncBinary()
			yy2arr713 := z.EncBasicHandle().StructToArray
			var yyq713 [8]bool
			_, _, _ = yysep713, yyq713, yy2arr713
			const yyr713 bool = false
			yyq713[2] = x.FSType != ""
			yyq713[7] = x.ReadOnly != false
			var yynn713 int
			if yyr713 || yy2arr713 {
				r.EncodeArrayStart(8)
			} else {
				yynn713 = 6
				for _, b := range yyq713 {
					if b {
						yynn713++
					}
				}
				r.EncodeMapStart(yynn713)
				yynn713 = 0
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym718 := z.EncBinary()
				_ = yym718
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym719 := z.EncBinary()
				_ = yym719
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq713[2] {
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq713[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym722 := z.EncBinary()
					_ = yym722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym727 := z.EncBinary()
				_ = yym727
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym728 := z.EncBinary()
				_ = yym728
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym730 := z.EncBinary()
				_ = yym730
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym731 := z.EncBinary()
				_ = yym731
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq713[7] {
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq713[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym735 := z.EncBinary()
					_ = yym735
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym736 := z.DecBinary()
	_ = yym736
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct737 := r.ContainerType()
		if yyct737 == codecSelferValueTypeMap1234 {
			yyl737 := r.ReadMapStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl737, d)
			}
		} else if yyct737 == codecSelferValueTypeArray1234 {
			yyl737 := r.ReadArrayStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl737, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys738Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys738Slc
	var yyhl738 bool = l >= 0
	for yyj738 := 0; ; yyj738++ {
		if yyhl738 {
			if yyj738 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys738Slc = r.DecodeBytes(yys738Slc, true, true)
		yys738 := string(yys738Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys738 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv739 := &x.CephMonitors
				yym740 := z.DecBinary()
				_ = yym740
				if false {
				} else {
					z.F.DecSliceStringX(yyv739, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys738)
		} // end switch yys738
	} // end for yyj738
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj748 int
	var yyb748 bool
	var yyhl748 bool = l >= 0
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv749 := &x.CephMonitors
		yym750 := z.DecBinary()
		_ = yym750
		if false {
		} else {
			z.F.DecSliceStringX(yyv749, false, d)
		}
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj748++
		if yyhl748 {
			yyb748 = yyj748 > l
		} else {
			yyb748 = r.CheckBreak()
		}
		if yyb748 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj748-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym758 := z.EncBinary()
		_ = yym758
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep759 := !z.EncBinary()
			yy2arr759 := z.EncBasicHandle().StructToArray
			var yyq759 [3]bool
			_, _, _ = yysep759, yyq759, yy2arr759
			const yyr759 bool = false
			yyq759[1] = x.FSType != ""
			yyq759[2] = x.ReadOnly != false
			var yynn759 int
			if yyr759 || yy2arr759 {
				r.EncodeArrayStart(3)
			} else {
				yynn759 = 1
				for _, b := range yyq759 {
					if b {
						yynn759++
					}
				}
				r.EncodeMapStart(yynn759)
				yynn759 = 0
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym761 := z.EncBinary()
				_ = yym761
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[1] {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq759[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[2] {
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq759[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym769 := z.DecBinary()
	_ = yym769
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct770 := r.ContainerType()
		if yyct770 == codecSelferValueTypeMap1234 {
			yyl770 := r.ReadMapStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl770, d)
			}
		} else if yyct770 == codecSelferValueTypeArray1234 {
			yyl770 := r.ReadArrayStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl770, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys771Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys771Slc
	var yyhl771 bool = l >= 0
	for yyj771 := 0; ; yyj771++ {
		if yyhl771 {
			if yyj771 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys771Slc = r.DecodeBytes(yys771Slc, true, true)
		yys771 := string(yys771Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys771 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys771)
		} // end switch yys771
	} // end for yyj771
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj775 int
	var yyb775 bool
	var yyhl775 bool = l >= 0
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj775++
		if yyhl775 {
			yyb775 = yyj775 > l
		} else {
			yyb775 = r.CheckBreak()
		}
		if yyb775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym779 := z.EncBinary()
		_ = yym779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep780 := !z.EncBinary()
			yy2arr780 := z.EncBasicHandle().StructToArray
			var yyq780 [5]bool
			_, _, _ = yysep780, yyq780, yy2arr780
			const yyr780 bool = false
			yyq780[1] = x.User != ""
			yyq780[2] = x.SecretFile != ""
			yyq780[3] = x.SecretRef != nil
			yyq780[4] = x.ReadOnly != false
			var yynn780 int
			if yyr780 || yy2arr780 {
				r.EncodeArrayStart(5)
			} else {
				yynn780 = 1
				for _, b := range yyq780 {
					if b {
						yynn780++
					}
				}
				r.EncodeMapStart(yynn780)
				yynn780 = 0
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym782 := z.EncBinary()
					_ = yym782
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[1] {
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq780[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[2] {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq780[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym789 := z.EncBinary()
					_ = yym789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq780[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[4] {
					yym792 := z.EncBinary()
					_ = yym792
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq780[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym794 := z.DecBinary()
	_ = yym794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct795 := r.ContainerType()
		if yyct795 == codecSelferValueTypeMap1234 {
			yyl795 := r.ReadMapStart()
			if yyl795 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl795, d)
			}
		} else if yyct795 == codecSelferValueTypeArray1234 {
			yyl795 := r.ReadArrayStart()
			if yyl795 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys796Slc
	var yyhl796 bool = l >= 0
	for yyj796 := 0; ; yyj796++ {
		if yyhl796 {
			if yyj796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys796Slc = r.DecodeBytes(yys796Slc, true, true)
		yys796 := string(yys796Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys796 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv797 := &x.Monitors
				yym798 := z.DecBinary()
				_ = yym798
				if false {
				} else {
					z.F.DecSliceStringX(yyv797, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys796)
		} // end switch yys796
	} // end for yyj796
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj803 int
	var yyb803 bool
	var yyhl803 bool = l >= 0
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv804 := &x.Monitors
		yym805 := z.DecBinary()
		_ = yym805
		if false {
		} else {
			z.F.DecSliceStringX(yyv804, false, d)
		}
	}
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj803++
		if yyhl803 {
			yyb803 = yyj803 > l
		} else {
			yyb803 = r.CheckBreak()
		}
		if yyb803 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj803-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym810 := z.EncBinary()
		_ = yym810
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep811 := !z.EncBinary()
			yy2arr811 := z.EncBasicHandle().StructToArray
			var yyq811 [1]bool
			_, _, _ = yysep811, yyq811, yy2arr811
			const yyr811 bool = false
			var yynn811 int
			if yyr811 || yy2arr811 {
				r.EncodeArrayStart(1)
			} else {
				yynn811 = 1
				for _, b := range yyq811 {
					if b {
						yynn811++
					}
				}
				r.EncodeMapStart(yynn811)
				yynn811 = 0
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym813 := z.EncBinary()
				_ = yym813
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym814 := z.EncBinary()
				_ = yym814
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym815 := z.DecBinary()
	_ = yym815
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct816 := r.ContainerType()
		if yyct816 == codecSelferValueTypeMap1234 {
			yyl816 := r.ReadMapStart()
			if yyl816 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl816, d)
			}
		} else if yyct816 == codecSelferValueTypeArray1234 {
			yyl816 := r.ReadArrayStart()
			if yyl816 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl816, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys817Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys817Slc
	var yyhl817 bool = l >= 0
	for yyj817 := 0; ; yyj817++ {
		if yyhl817 {
			if yyj817 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys817Slc = r.DecodeBytes(yys817Slc, true, true)
		yys817 := string(yys817Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys817 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys817)
		} // end switch yys817
	} // end for yyj817
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj819 int
	var yyb819 bool
	var yyhl819 bool = l >= 0
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj819++
		if yyhl819 {
			yyb819 = yyj819 > l
		} else {
			yyb819 = r.CheckBreak()
		}
		if yyb819 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj819-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym821 := z.EncBinary()
		_ = yym821
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep822 := !z.EncBinary()
			yy2arr822 := z.EncBasicHandle().StructToArray
			var yyq822 [1]bool
			_, _, _ = yysep822, yyq822, yy2arr822
			const yyr822 bool = false
			yyq822[0] = len(x.Items) != 0
			var yynn822 int
			if yyr822 || yy2arr822 {
				r.EncodeArrayStart(1)
			} else {
				yynn822 = 0
				for _, b := range yyq822 {
					if b {
						yynn822++
					}
				}
				r.EncodeMapStart(yynn822)
				yynn822 = 0
			}
			if yyr822 || yy2arr822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq822[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym824 := z.EncBinary()
						_ = yym824
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq822[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym825 := z.EncBinary()
						_ = yym825
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr822 || yy2arr822 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym826 := z.DecBinary()
	_ = yym826
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct827 := r.ContainerType()
		if yyct827 == codecSelferValueTypeMap1234 {
			yyl827 := r.ReadMapStart()
			if yyl827 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl827, d)
			}
		} else if yyct827 == codecSelferValueTypeArray1234 {
			yyl827 := r.ReadArrayStart()
			if yyl827 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl827, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys828Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys828Slc
	var yyhl828 bool = l >= 0
	for yyj828 := 0; ; yyj828++ {
		if yyhl828 {
			if yyj828 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys828Slc = r.DecodeBytes(yys828Slc, true, true)
		yys828 := string(yys828Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys828 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv829 := &x.Items
				yym830 := z.DecBinary()
				_ = yym830
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv829), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys828)
		} // end switch yys828
	} // end for yyj828
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj831 int
	var yyb831 bool
	var yyhl831 bool = l >= 0
	yyj831++
	if yyhl831 {
		yyb831 = yyj831 > l
	} else {
		yyb831 = r.CheckBreak()
	}
	if yyb831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv832 := &x.Items
		yym833 := z.DecBinary()
		_ = yym833
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv832), d)
		}
	}
	for {
		yyj831++
		if yyhl831 {
			yyb831 = yyj831 > l
		} else {
			yyb831 = r.CheckBreak()
		}
		if yyb831 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj831-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym834 := z.EncBinary()
		_ = yym834
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep835 := !z.EncBinary()
			yy2arr835 := z.EncBasicHandle().StructToArray
			var yyq835 [2]bool
			_, _, _ = yysep835, yyq835, yy2arr835
			const yyr835 bool = false
			var yynn835 int
			if yyr835 || yy2arr835 {
				r.EncodeArrayStart(2)
			} else {
				yynn835 = 2
				for _, b := range yyq835 {
					if b {
						yynn835++
					}
				}
				r.EncodeMapStart(yynn835)
				yynn835 = 0
			}
			if yyr835 || yy2arr835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym837 := z.EncBinary()
				_ = yym837
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym838 := z.EncBinary()
				_ = yym838
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr835 || yy2arr835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy840 := &x.FieldRef
				yy840.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy841 := &x.FieldRef
				yy841.CodecEncodeSelf(e)
			}
			if yyr835 || yy2arr835 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym842 := z.DecBinary()
	_ = yym842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct843 := r.ContainerType()
		if yyct843 == codecSelferValueTypeMap1234 {
			yyl843 := r.ReadMapStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl843, d)
			}
		} else if yyct843 == codecSelferValueTypeArray1234 {
			yyl843 := r.ReadArrayStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys844Slc
	var yyhl844 bool = l >= 0
	for yyj844 := 0; ; yyj844++ {
		if yyhl844 {
			if yyj844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys844Slc = r.DecodeBytes(yys844Slc, true, true)
		yys844 := string(yys844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys844 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv846 := &x.FieldRef
				yyv846.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys844)
		} // end switch yys844
	} // end for yyj844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj847 int
	var yyb847 bool
	var yyhl847 bool = l >= 0
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv849 := &x.FieldRef
		yyv849.CodecDecodeSelf(d)
	}
	for {
		yyj847++
		if yyhl847 {
			yyb847 = yyj847 > l
		} else {
			yyb847 = r.CheckBreak()
		}
		if yyb847 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj847-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym850 := z.EncBinary()
		_ = yym850
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep851 := !z.EncBinary()
			yy2arr851 := z.EncBasicHandle().StructToArray
			var yyq851 [5]bool
			_, _, _ = yysep851, yyq851, yy2arr851
			const yyr851 bool = false
			yyq851[0] = x.Name != ""
			yyq851[1] = x.HostPort != 0
			yyq851[3] = x.Protocol != ""
			yyq851[4] = x.HostIP != ""
			var yynn851 int
			if yyr851 || yy2arr851 {
				r.EncodeArrayStart(5)
			} else {
				yynn851 = 1
				for _, b := range yyq851 {
					if b {
						yynn851++
					}
				}
				r.EncodeMapStart(yynn851)
				yynn851 = 0
			}
			if yyr851 || yy2arr851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq851[0] {
					yym853 := z.EncBinary()
					_ = yym853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq851[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym854 := z.EncBinary()
					_ = yym854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr851 || yy2arr851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq851[1] {
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq851[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr851 || yy2arr851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym859 := z.EncBinary()
				_ = yym859
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym860 := z.EncBinary()
				_ = yym860
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr851 || yy2arr851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq851[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq851[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr851 || yy2arr851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq851[4] {
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq851[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym864 := z.EncBinary()
					_ = yym864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr851 || yy2arr851 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym865 := z.DecBinary()
	_ = yym865
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct866 := r.ContainerType()
		if yyct866 == codecSelferValueTypeMap1234 {
			yyl866 := r.ReadMapStart()
			if yyl866 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl866, d)
			}
		} else if yyct866 == codecSelferValueTypeArray1234 {
			yyl866 := r.ReadArrayStart()
			if yyl866 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl866, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys867Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys867Slc
	var yyhl867 bool = l >= 0
	for yyj867 := 0; ; yyj867++ {
		if yyhl867 {
			if yyj867 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys867Slc = r.DecodeBytes(yys867Slc, true, true)
		yys867 := string(yys867Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys867 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys867)
		} // end switch yys867
	} // end for yyj867
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj873 int
	var yyb873 bool
	var yyhl873 bool = l >= 0
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj873++
		if yyhl873 {
			yyb873 = yyj873 > l
		} else {
			yyb873 = r.CheckBreak()
		}
		if yyb873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym879 := z.EncBinary()
		_ = yym879
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep880 := !z.EncBinary()
			yy2arr880 := z.EncBasicHandle().StructToArray
			var yyq880 [3]bool
			_, _, _ = yysep880, yyq880, yy2arr880
			const yyr880 bool = false
			yyq880[1] = x.ReadOnly != false
			var yynn880 int
			if yyr880 || yy2arr880 {
				r.EncodeArrayStart(3)
			} else {
				yynn880 = 2
				for _, b := range yyq880 {
					if b {
						yynn880++
					}
				}
				r.EncodeMapStart(yynn880)
				yynn880 = 0
			}
			if yyr880 || yy2arr880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym882 := z.EncBinary()
				_ = yym882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym883 := z.EncBinary()
				_ = yym883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr880 || yy2arr880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq880[1] {
					yym885 := z.EncBinary()
					_ = yym885
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq880[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym886 := z.EncBinary()
					_ = yym886
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr880 || yy2arr880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym888 := z.EncBinary()
				_ = yym888
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym889 := z.EncBinary()
				_ = yym889
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr880 || yy2arr880 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym890 := z.DecBinary()
	_ = yym890
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct891 := r.ContainerType()
		if yyct891 == codecSelferValueTypeMap1234 {
			yyl891 := r.ReadMapStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl891, d)
			}
		} else if yyct891 == codecSelferValueTypeArray1234 {
			yyl891 := r.ReadArrayStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl891, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys892Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys892Slc
	var yyhl892 bool = l >= 0
	for yyj892 := 0; ; yyj892++ {
		if yyhl892 {
			if yyj892 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys892Slc = r.DecodeBytes(yys892Slc, true, true)
		yys892 := string(yys892Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys892 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys892)
		} // end switch yys892
	} // end for yyj892
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj896 int
	var yyb896 bool
	var yyhl896 bool = l >= 0
	yyj896++
	if yyhl896 {
		yyb896 = yyj896 > l
	} else {
		yyb896 = r.CheckBreak()
	}
	if yyb896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj896++
	if yyhl896 {
		yyb896 = yyj896 > l
	} else {
		yyb896 = r.CheckBreak()
	}
	if yyb896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj896++
	if yyhl896 {
		yyb896 = yyj896 > l
	} else {
		yyb896 = r.CheckBreak()
	}
	if yyb896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj896++
		if yyhl896 {
			yyb896 = yyj896 > l
		} else {
			yyb896 = r.CheckBreak()
		}
		if yyb896 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj896-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym900 := z.EncBinary()
		_ = yym900
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep901 := !z.EncBinary()
			yy2arr901 := z.EncBasicHandle().StructToArray
			var yyq901 [3]bool
			_, _, _ = yysep901, yyq901, yy2arr901
			const yyr901 bool = false
			yyq901[1] = x.Value != ""
			yyq901[2] = x.ValueFrom != nil
			var yynn901 int
			if yyr901 || yy2arr901 {
				r.EncodeArrayStart(3)
			} else {
				yynn901 = 1
				for _, b := range yyq901 {
					if b {
						yynn901++
					}
				}
				r.EncodeMapStart(yynn901)
				yynn901 = 0
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym903 := z.EncBinary()
				_ = yym903
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym904 := z.EncBinary()
				_ = yym904
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq901[1] {
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq901[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym907 := z.EncBinary()
					_ = yym907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq901[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq901[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym909 := z.DecBinary()
	_ = yym909
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct910 := r.ContainerType()
		if yyct910 == codecSelferValueTypeMap1234 {
			yyl910 := r.ReadMapStart()
			if yyl910 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl910, d)
			}
		} else if yyct910 == codecSelferValueTypeArray1234 {
			yyl910 := r.ReadArrayStart()
			if yyl910 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl910, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys911Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys911Slc
	var yyhl911 bool = l >= 0
	for yyj911 := 0; ; yyj911++ {
		if yyhl911 {
			if yyj911 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys911Slc = r.DecodeBytes(yys911Slc, true, true)
		yys911 := string(yys911Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys911 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys911)
		} // end switch yys911
	} // end for yyj911
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj915 int
	var yyb915 bool
	var yyhl915 bool = l >= 0
	yyj915++
	if yyhl915 {
		yyb915 = yyj915 > l
	} else {
		yyb915 = r.CheckBreak()
	}
	if yyb915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj915++
	if yyhl915 {
		yyb915 = yyj915 > l
	} else {
		yyb915 = r.CheckBreak()
	}
	if yyb915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj915++
	if yyhl915 {
		yyb915 = yyj915 > l
	} else {
		yyb915 = r.CheckBreak()
	}
	if yyb915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj915++
		if yyhl915 {
			yyb915 = yyj915 > l
		} else {
			yyb915 = r.CheckBreak()
		}
		if yyb915 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj915-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym919 := z.EncBinary()
		_ = yym919
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep920 := !z.EncBinary()
			yy2arr920 := z.EncBasicHandle().StructToArray
			var yyq920 [1]bool
			_, _, _ = yysep920, yyq920, yy2arr920
			const yyr920 bool = false
			var yynn920 int
			if yyr920 || yy2arr920 {
				r.EncodeArrayStart(1)
			} else {
				yynn920 = 1
				for _, b := range yyq920 {
					if b {
						yynn920++
					}
				}
				r.EncodeMapStart(yynn920)
				yynn920 = 0
			}
			if yyr920 || yy2arr920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yyr920 || yy2arr920 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym922 := z.DecBinary()
	_ = yym922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct923 := r.ContainerType()
		if yyct923 == codecSelferValueTypeMap1234 {
			yyl923 := r.ReadMapStart()
			if yyl923 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl923, d)
			}
		} else if yyct923 == codecSelferValueTypeArray1234 {
			yyl923 := r.ReadArrayStart()
			if yyl923 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl923, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys924Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys924Slc
	var yyhl924 bool = l >= 0
	for yyj924 := 0; ; yyj924++ {
		if yyhl924 {
			if yyj924 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys924Slc = r.DecodeBytes(yys924Slc, true, true)
		yys924 := string(yys924Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys924 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys924)
		} // end switch yys924
	} // end for yyj924
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj926 int
	var yyb926 bool
	var yyhl926 bool = l >= 0
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj926++
		if yyhl926 {
			yyb926 = yyj926 > l
		} else {
			yyb926 = r.CheckBreak()
		}
		if yyb926 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj926-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym928 := z.EncBinary()
		_ = yym928
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep929 := !z.EncBinary()
			yy2arr929 := z.EncBasicHandle().StructToArray
			var yyq929 [2]bool
			_, _, _ = yysep929, yyq929, yy2arr929
			const yyr929 bool = false
			var yynn929 int
			if yyr929 || yy2arr929 {
				r.EncodeArrayStart(2)
			} else {
				yynn929 = 2
				for _, b := range yyq929 {
					if b {
						yynn929++
					}
				}
				r.EncodeMapStart(yynn929)
				yynn929 = 0
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym931 := z.EncBinary()
				_ = yym931
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym932 := z.EncBinary()
				_ = yym932
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym934 := z.EncBinary()
				_ = yym934
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym935 := z.EncBinary()
				_ = yym935
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym936 := z.DecBinary()
	_ = yym936
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct937 := r.ContainerType()
		if yyct937 == codecSelferValueTypeMap1234 {
			yyl937 := r.ReadMapStart()
			if yyl937 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl937, d)
			}
		} else if yyct937 == codecSelferValueTypeArray1234 {
			yyl937 := r.ReadArrayStart()
			if yyl937 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl937, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys938Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys938Slc
	var yyhl938 bool = l >= 0
	for yyj938 := 0; ; yyj938++ {
		if yyhl938 {
			if yyj938 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys938Slc = r.DecodeBytes(yys938Slc, true, true)
		yys938 := string(yys938Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys938 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys938)
		} // end switch yys938
	} // end for yyj938
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj941 int
	var yyb941 bool
	var yyhl941 bool = l >= 0
	yyj941++
	if yyhl941 {
		yyb941 = yyj941 > l
	} else {
		yyb941 = r.CheckBreak()
	}
	if yyb941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj941++
	if yyhl941 {
		yyb941 = yyj941 > l
	} else {
		yyb941 = r.CheckBreak()
	}
	if yyb941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj941++
		if yyhl941 {
			yyb941 = yyj941 > l
		} else {
			yyb941 = r.CheckBreak()
		}
		if yyb941 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj941-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym944 := z.EncBinary()
		_ = yym944
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep945 := !z.EncBinary()
			yy2arr945 := z.EncBasicHandle().StructToArray
			var yyq945 [4]bool
			_, _, _ = yysep945, yyq945, yy2arr945
			const yyr945 bool = false
			yyq945[0] = x.Path != ""
			yyq945[1] = true
			yyq945[2] = x.Host != ""
			yyq945[3] = x.Scheme != ""
			var yynn945 int
			if yyr945 || yy2arr945 {
				r.EncodeArrayStart(4)
			} else {
				yynn945 = 0
				for _, b := range yyq945 {
					if b {
						yynn945++
					}
				}
				r.EncodeMapStart(yynn945)
				yynn945 = 0
			}
			if yyr945 || yy2arr945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq945[0] {
					yym947 := z.EncBinary()
					_ = yym947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq945[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym948 := z.EncBinary()
					_ = yym948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr945 || yy2arr945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq945[1] {
					yy950 := &x.Port
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else if z.HasExtensions() && z.EncExt(yy950) {
					} else if !yym951 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy950)
					} else {
						z.EncFallback(yy950)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq945[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy952 := &x.Port
					yym953 := z.EncBinary()
					_ = yym953
					if false {
					} else if z.HasExtensions() && z.EncExt(yy952) {
					} else if !yym953 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy952)
					} else {
						z.EncFallback(yy952)
					}
				}
			}
			if yyr945 || yy2arr945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq945[2] {
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq945[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym956 := z.EncBinary()
					_ = yym956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr945 || yy2arr945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq945[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq945[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr945 || yy2arr945 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym958 := z.DecBinary()
	_ = yym958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct959 := r.ContainerType()
		if yyct959 == codecSelferValueTypeMap1234 {
			yyl959 := r.ReadMapStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl959, d)
			}
		} else if yyct959 == codecSelferValueTypeArray1234 {
			yyl959 := r.ReadArrayStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys960Slc
	var yyhl960 bool = l >= 0
	for yyj960 := 0; ; yyj960++ {
		if yyhl960 {
			if yyj960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys960Slc = r.DecodeBytes(yys960Slc, true, true)
		yys960 := string(yys960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys960 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv962 := &x.Port
				yym963 := z.DecBinary()
				_ = yym963
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv962) {
				} else if !yym963 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv962)
				} else {
					z.DecFallback(yyv962, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys960)
		} // end switch yys960
	} // end for yyj960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj966 int
	var yyb966 bool
	var yyhl966 bool = l >= 0
	yyj966++
	if yyhl966 {
		yyb966 = yyj966 > l
	} else {
		yyb966 = r.CheckBreak()
	}
	if yyb966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj966++
	if yyhl966 {
		yyb966 = yyj966 > l
	} else {
		yyb966 = r.CheckBreak()
	}
	if yyb966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv968 := &x.Port
		yym969 := z.DecBinary()
		_ = yym969
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv968) {
		} else if !yym969 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv968)
		} else {
			z.DecFallback(yyv968, false)
		}
	}
	yyj966++
	if yyhl966 {
		yyb966 = yyj966 > l
	} else {
		yyb966 = r.CheckBreak()
	}
	if yyb966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj966++
	if yyhl966 {
		yyb966 = yyj966 > l
	} else {
		yyb966 = r.CheckBreak()
	}
	if yyb966 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj966++
		if yyhl966 {
			yyb966 = yyj966 > l
		} else {
			yyb966 = r.CheckBreak()
		}
		if yyb966 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj966-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym972 := z.EncBinary()
	_ = yym972
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym973 := z.DecBinary()
	_ = yym973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym974 := z.EncBinary()
		_ = yym974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep975 := !z.EncBinary()
			yy2arr975 := z.EncBasicHandle().StructToArray
			var yyq975 [1]bool
			_, _, _ = yysep975, yyq975, yy2arr975
			const yyr975 bool = false
			yyq975[0] = true
			var yynn975 int
			if yyr975 || yy2arr975 {
				r.EncodeArrayStart(1)
			} else {
				yynn975 = 0
				for _, b := range yyq975 {
					if b {
						yynn975++
					}
				}
				r.EncodeMapStart(yynn975)
				yynn975 = 0
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq975[0] {
					yy977 := &x.Port
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else if z.HasExtensions() && z.EncExt(yy977) {
					} else if !yym978 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy977)
					} else {
						z.EncFallback(yy977)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq975[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy979 := &x.Port
					yym980 := z.EncBinary()
					_ = yym980
					if false {
					} else if z.HasExtensions() && z.EncExt(yy979) {
					} else if !yym980 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy979)
					} else {
						z.EncFallback(yy979)
					}
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym981 := z.DecBinary()
	_ = yym981
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct982 := r.ContainerType()
		if yyct982 == codecSelferValueTypeMap1234 {
			yyl982 := r.ReadMapStart()
			if yyl982 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl982, d)
			}
		} else if yyct982 == codecSelferValueTypeArray1234 {
			yyl982 := r.ReadArrayStart()
			if yyl982 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl982, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys983Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys983Slc
	var yyhl983 bool = l >= 0
	for yyj983 := 0; ; yyj983++ {
		if yyhl983 {
			if yyj983 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys983Slc = r.DecodeBytes(yys983Slc, true, true)
		yys983 := string(yys983Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys983 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv984 := &x.Port
				yym985 := z.DecBinary()
				_ = yym985
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv984) {
				} else if !yym985 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv984)
				} else {
					z.DecFallback(yyv984, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys983)
		} // end switch yys983
	} // end for yyj983
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj986 int
	var yyb986 bool
	var yyhl986 bool = l >= 0
	yyj986++
	if yyhl986 {
		yyb986 = yyj986 > l
	} else {
		yyb986 = r.CheckBreak()
	}
	if yyb986 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv987 := &x.Port
		yym988 := z.DecBinary()
		_ = yym988
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv987) {
		} else if !yym988 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv987)
		} else {
			z.DecFallback(yyv987, false)
		}
	}
	for {
		yyj986++
		if yyhl986 {
			yyb986 = yyj986 > l
		} else {
			yyb986 = r.CheckBreak()
		}
		if yyb986 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj986-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym989 := z.EncBinary()
		_ = yym989
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep990 := !z.EncBinary()
			yy2arr990 := z.EncBasicHandle().StructToArray
			var yyq990 [1]bool
			_, _, _ = yysep990, yyq990, yy2arr990
			const yyr990 bool = false
			yyq990[0] = len(x.Command) != 0
			var yynn990 int
			if yyr990 || yy2arr990 {
				r.EncodeArrayStart(1)
			} else {
				yynn990 = 0
				for _, b := range yyq990 {
					if b {
						yynn990++
					}
				}
				r.EncodeMapStart(yynn990)
				yynn990 = 0
			}
			if yyr990 || yy2arr990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq990[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym992 := z.EncBinary()
						_ = yym992
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq990[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym993 := z.EncBinary()
						_ = yym993
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr990 || yy2arr990 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym994 := z.DecBinary()
	_ = yym994
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct995 := r.ContainerType()
		if yyct995 == codecSelferValueTypeMap1234 {
			yyl995 := r.ReadMapStart()
			if yyl995 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl995, d)
			}
		} else if yyct995 == codecSelferValueTypeArray1234 {
			yyl995 := r.ReadArrayStart()
			if yyl995 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl995, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys996Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys996Slc
	var yyhl996 bool = l >= 0
	for yyj996 := 0; ; yyj996++ {
		if yyhl996 {
			if yyj996 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys996Slc = r.DecodeBytes(yys996Slc, true, true)
		yys996 := string(yys996Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys996 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv997 := &x.Command
				yym998 := z.DecBinary()
				_ = yym998
				if false {
				} else {
					z.F.DecSliceStringX(yyv997, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys996)
		} // end switch yys996
	} // end for yyj996
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj999 int
	var yyb999 bool
	var yyhl999 bool = l >= 0
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1000 := &x.Command
		yym1001 := z.DecBinary()
		_ = yym1001
		if false {
		} else {
			z.F.DecSliceStringX(yyv1000, false, d)
		}
	}
	for {
		yyj999++
		if yyhl999 {
			yyb999 = yyj999 > l
		} else {
			yyb999 = r.CheckBreak()
		}
		if yyb999 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj999-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1002 := z.EncBinary()
		_ = yym1002
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1003 := !z.EncBinary()
			yy2arr1003 := z.EncBasicHandle().StructToArray
			var yyq1003 [8]bool
			_, _, _ = yysep1003, yyq1003, yy2arr1003
			const yyr1003 bool = false
			yyq1003[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1003[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1003[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1003[3] = x.InitialDelaySeconds != 0
			yyq1003[4] = x.TimeoutSeconds != 0
			yyq1003[5] = x.PeriodSeconds != 0
			yyq1003[6] = x.SuccessThreshold != 0
			yyq1003[7] = x.FailureThreshold != 0
			var yynn1003 int
			if yyr1003 || yy2arr1003 {
				r.EncodeArrayStart(8)
			} else {
				yynn1003 = 0
				for _, b := range yyq1003 {
					if b {
						yynn1003++
					}
				}
				r.EncodeMapStart(yynn1003)
				yynn1003 = 0
			}
			var yyn1004 bool
			if x.Handler.Exec == nil {
				yyn1004 = true
				goto LABEL1004
			}
		LABEL1004:
			if yyr1003 || yy2arr1003 {
				if yyn1004 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1003[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1003[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1004 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1005 bool
			if x.Handler.HTTPGet == nil {
				yyn1005 = true
				goto LABEL1005
			}
		LABEL1005:
			if yyr1003 || yy2arr1003 {
				if yyn1005 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1003[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1003[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1005 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1006 bool
			if x.Handler.TCPSocket == nil {
				yyn1006 = true
				goto LABEL1006
			}
		LABEL1006:
			if yyr1003 || yy2arr1003 {
				if yyn1006 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1003[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1003[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1006 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1003 || yy2arr1003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1003[3] {
					yym1008 := z.EncBinary()
					_ = yym1008
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1003[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1009 := z.EncBinary()
					_ = yym1009
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1003 || yy2arr1003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1003[4] {
					yym1011 := z.EncBinary()
					_ = yym1011
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1003[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1012 := z.EncBinary()
					_ = yym1012
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1003 || yy2arr1003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1003[5] {
					yym1014 := z.EncBinary()
					_ = yym1014
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1003[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1015 := z.EncBinary()
					_ = yym1015
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1003 || yy2arr1003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1003[6] {
					yym1017 := z.EncBinary()
					_ = yym1017
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1003[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1018 := z.EncBinary()
					_ = yym1018
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1003 || yy2arr1003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1003[7] {
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1003[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1021 := z.EncBinary()
					_ = yym1021
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1003 || yy2arr1003 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1022 := z.DecBinary()
	_ = yym1022
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1023 := r.ContainerType()
		if yyct1023 == codecSelferValueTypeMap1234 {
			yyl1023 := r.ReadMapStart()
			if yyl1023 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1023, d)
			}
		} else if yyct1023 == codecSelferValueTypeArray1234 {
			yyl1023 := r.ReadArrayStart()
			if yyl1023 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1023, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1024Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1024Slc
	var yyhl1024 bool = l >= 0
	for yyj1024 := 0; ; yyj1024++ {
		if yyhl1024 {
			if yyj1024 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1024Slc = r.DecodeBytes(yys1024Slc, true, true)
		yys1024 := string(yys1024Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1024 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1024)
		} // end switch yys1024
	} // end for yyj1024
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1033 int
	var yyb1033 bool
	var yyhl1033 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1033++
	if yyhl1033 {
		yyb1033 = yyj1033 > l
	} else {
		yyb1033 = r.CheckBreak()
	}
	if yyb1033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1033++
	if yyhl1033 {
		yyb1033 = yyj1033 > l
	} else {
		yyb1033 = r.CheckBreak()
	}
	if yyb1033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1033++
	if yyhl1033 {
		yyb1033 = yyj1033 > l
	} else {
		yyb1033 = r.CheckBreak()
	}
	if yyb1033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1033++
	if yyhl1033 {
		yyb1033 = yyj1033 > l
	} else {
		yyb1033 = r.CheckBreak()
	}
	if yyb1033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1033++
	if yyhl1033 {
		yyb1033 = yyj1033 > l
	} else {
		yyb1033 = r.CheckBreak()
	}
	if yyb1033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1033++
	if yyhl1033 {
		yyb1033 = yyj1033 > l
	} else {
		yyb1033 = r.CheckBreak()
	}
	if yyb1033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1033++
	if yyhl1033 {
		yyb1033 = yyj1033 > l
	} else {
		yyb1033 = r.CheckBreak()
	}
	if yyb1033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1033++
	if yyhl1033 {
		yyb1033 = yyj1033 > l
	} else {
		yyb1033 = r.CheckBreak()
	}
	if yyb1033 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1033++
		if yyhl1033 {
			yyb1033 = yyj1033 > l
		} else {
			yyb1033 = r.CheckBreak()
		}
		if yyb1033 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1033-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1042 := z.EncBinary()
	_ = yym1042
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1043 := z.DecBinary()
	_ = yym1043
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1044 := z.EncBinary()
	_ = yym1044
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1045 := z.DecBinary()
	_ = yym1045
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1046 := z.EncBinary()
		_ = yym1046
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1047 := !z.EncBinary()
			yy2arr1047 := z.EncBasicHandle().StructToArray
			var yyq1047 [2]bool
			_, _, _ = yysep1047, yyq1047, yy2arr1047
			const yyr1047 bool = false
			yyq1047[0] = len(x.Add) != 0
			yyq1047[1] = len(x.Drop) != 0
			var yynn1047 int
			if yyr1047 || yy2arr1047 {
				r.EncodeArrayStart(2)
			} else {
				yynn1047 = 0
				for _, b := range yyq1047 {
					if b {
						yynn1047++
					}
				}
				r.EncodeMapStart(yynn1047)
				yynn1047 = 0
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1049 := z.EncBinary()
						_ = yym1049
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1047[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1050 := z.EncBinary()
						_ = yym1050
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1052 := z.EncBinary()
						_ = yym1052
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1047[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1053 := z.EncBinary()
						_ = yym1053
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1054 := z.DecBinary()
	_ = yym1054
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1055 := r.ContainerType()
		if yyct1055 == codecSelferValueTypeMap1234 {
			yyl1055 := r.ReadMapStart()
			if yyl1055 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1055, d)
			}
		} else if yyct1055 == codecSelferValueTypeArray1234 {
			yyl1055 := r.ReadArrayStart()
			if yyl1055 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1055, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1056Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1056Slc
	var yyhl1056 bool = l >= 0
	for yyj1056 := 0; ; yyj1056++ {
		if yyhl1056 {
			if yyj1056 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1056Slc = r.DecodeBytes(yys1056Slc, true, true)
		yys1056 := string(yys1056Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1056 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1057 := &x.Add
				yym1058 := z.DecBinary()
				_ = yym1058
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1057), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1059 := &x.Drop
				yym1060 := z.DecBinary()
				_ = yym1060
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1059), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1056)
		} // end switch yys1056
	} // end for yyj1056
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1061 int
	var yyb1061 bool
	var yyhl1061 bool = l >= 0
	yyj1061++
	if yyhl1061 {
		yyb1061 = yyj1061 > l
	} else {
		yyb1061 = r.CheckBreak()
	}
	if yyb1061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1062 := &x.Add
		yym1063 := z.DecBinary()
		_ = yym1063
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1062), d)
		}
	}
	yyj1061++
	if yyhl1061 {
		yyb1061 = yyj1061 > l
	} else {
		yyb1061 = r.CheckBreak()
	}
	if yyb1061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1064 := &x.Drop
		yym1065 := z.DecBinary()
		_ = yym1065
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1064), d)
		}
	}
	for {
		yyj1061++
		if yyhl1061 {
			yyb1061 = yyj1061 > l
		} else {
			yyb1061 = r.CheckBreak()
		}
		if yyb1061 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1061-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1066 := z.EncBinary()
		_ = yym1066
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1067 := !z.EncBinary()
			yy2arr1067 := z.EncBasicHandle().StructToArray
			var yyq1067 [2]bool
			_, _, _ = yysep1067, yyq1067, yy2arr1067
			const yyr1067 bool = false
			yyq1067[0] = len(x.Limits) != 0
			yyq1067[1] = len(x.Requests) != 0
			var yynn1067 int
			if yyr1067 || yy2arr1067 {
				r.EncodeArrayStart(2)
			} else {
				yynn1067 = 0
				for _, b := range yyq1067 {
					if b {
						yynn1067++
					}
				}
				r.EncodeMapStart(yynn1067)
				yynn1067 = 0
			}
			if yyr1067 || yy2arr1067 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1067[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1067[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1067 || yy2arr1067 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1067[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1067[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1067 || yy2arr1067 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1070 := z.DecBinary()
	_ = yym1070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1071 := r.ContainerType()
		if yyct1071 == codecSelferValueTypeMap1234 {
			yyl1071 := r.ReadMapStart()
			if yyl1071 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1071, d)
			}
		} else if yyct1071 == codecSelferValueTypeArray1234 {
			yyl1071 := r.ReadArrayStart()
			if yyl1071 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1071, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1072Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1072Slc
	var yyhl1072 bool = l >= 0
	for yyj1072 := 0; ; yyj1072++ {
		if yyhl1072 {
			if yyj1072 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1072Slc = r.DecodeBytes(yys1072Slc, true, true)
		yys1072 := string(yys1072Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1072 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1073 := &x.Limits
				yyv1073.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1074 := &x.Requests
				yyv1074.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1072)
		} // end switch yys1072
	} // end for yyj1072
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1075 int
	var yyb1075 bool
	var yyhl1075 bool = l >= 0
	yyj1075++
	if yyhl1075 {
		yyb1075 = yyj1075 > l
	} else {
		yyb1075 = r.CheckBreak()
	}
	if yyb1075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1076 := &x.Limits
		yyv1076.CodecDecodeSelf(d)
	}
	yyj1075++
	if yyhl1075 {
		yyb1075 = yyj1075 > l
	} else {
		yyb1075 = r.CheckBreak()
	}
	if yyb1075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1077 := &x.Requests
		yyv1077.CodecDecodeSelf(d)
	}
	for {
		yyj1075++
		if yyhl1075 {
			yyb1075 = yyj1075 > l
		} else {
			yyb1075 = r.CheckBreak()
		}
		if yyb1075 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1075-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1078 := z.EncBinary()
		_ = yym1078
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1079 := !z.EncBinary()
			yy2arr1079 := z.EncBasicHandle().StructToArray
			var yyq1079 [18]bool
			_, _, _ = yysep1079, yyq1079, yy2arr1079
			const yyr1079 bool = false
			yyq1079[2] = len(x.Command) != 0
			yyq1079[3] = len(x.Args) != 0
			yyq1079[4] = x.WorkingDir != ""
			yyq1079[5] = len(x.Ports) != 0
			yyq1079[6] = len(x.Env) != 0
			yyq1079[7] = true
			yyq1079[8] = len(x.VolumeMounts) != 0
			yyq1079[9] = x.LivenessProbe != nil
			yyq1079[10] = x.ReadinessProbe != nil
			yyq1079[11] = x.Lifecycle != nil
			yyq1079[12] = x.TerminationMessagePath != ""
			yyq1079[14] = x.SecurityContext != nil
			yyq1079[15] = x.Stdin != false
			yyq1079[16] = x.StdinOnce != false
			yyq1079[17] = x.TTY != false
			var yynn1079 int
			if yyr1079 || yy2arr1079 {
				r.EncodeArrayStart(18)
			} else {
				yynn1079 = 3
				for _, b := range yyq1079 {
					if b {
						yynn1079++
					}
				}
				r.EncodeMapStart(yynn1079)
				yynn1079 = 0
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1081 := z.EncBinary()
				_ = yym1081
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1082 := z.EncBinary()
				_ = yym1082
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1084 := z.EncBinary()
				_ = yym1084
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1085 := z.EncBinary()
				_ = yym1085
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1087 := z.EncBinary()
						_ = yym1087
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1079[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1088 := z.EncBinary()
						_ = yym1088
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1090 := z.EncBinary()
						_ = yym1090
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1079[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1091 := z.EncBinary()
						_ = yym1091
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[4] {
					yym1093 := z.EncBinary()
					_ = yym1093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1079[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1094 := z.EncBinary()
					_ = yym1094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1096 := z.EncBinary()
						_ = yym1096
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1079[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1097 := z.EncBinary()
						_ = yym1097
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1099 := z.EncBinary()
						_ = yym1099
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1079[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1100 := z.EncBinary()
						_ = yym1100
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[7] {
					yy1102 := &x.Resources
					yy1102.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1079[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1103 := &x.Resources
					yy1103.CodecEncodeSelf(e)
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1105 := z.EncBinary()
						_ = yym1105
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1079[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1106 := z.EncBinary()
						_ = yym1106
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1079[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1079[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1079[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[12] {
					yym1111 := z.EncBinary()
					_ = yym1111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1079[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1112 := z.EncBinary()
					_ = yym1112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1079[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[15] {
					yym1116 := z.EncBinary()
					_ = yym1116
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1079[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1117 := z.EncBinary()
					_ = yym1117
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[16] {
					yym1119 := z.EncBinary()
					_ = yym1119
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1079[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1120 := z.EncBinary()
					_ = yym1120
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[17] {
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1079[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1123 := z.EncBinary()
					_ = yym1123
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1124 := z.DecBinary()
	_ = yym1124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1125 := r.ContainerType()
		if yyct1125 == codecSelferValueTypeMap1234 {
			yyl1125 := r.ReadMapStart()
			if yyl1125 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1125, d)
			}
		} else if yyct1125 == codecSelferValueTypeArray1234 {
			yyl1125 := r.ReadArrayStart()
			if yyl1125 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1126Slc
	var yyhl1126 bool = l >= 0
	for yyj1126 := 0; ; yyj1126++ {
		if yyhl1126 {
			if yyj1126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1126Slc = r.DecodeBytes(yys1126Slc, true, true)
		yys1126 := string(yys1126Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1126 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1129 := &x.Command
				yym1130 := z.DecBinary()
				_ = yym1130
				if false {
				} else {
					z.F.DecSliceStringX(yyv1129, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1131 := &x.Args
				yym1132 := z.DecBinary()
				_ = yym1132
				if false {
				} else {
					z.F.DecSliceStringX(yyv1131, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1134 := &x.Ports
				yym1135 := z.DecBinary()
				_ = yym1135
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1134), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1136 := &x.Env
				yym1137 := z.DecBinary()
				_ = yym1137
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1136), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1138 := &x.Resources
				yyv1138.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1139 := &x.VolumeMounts
				yym1140 := z.DecBinary()
				_ = yym1140
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1139), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1126)
		} // end switch yys1126
	} // end for yyj1126
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1150 int
	var yyb1150 bool
	var yyhl1150 bool = l >= 0
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1153 := &x.Command
		yym1154 := z.DecBinary()
		_ = yym1154
		if false {
		} else {
			z.F.DecSliceStringX(yyv1153, false, d)
		}
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1155 := &x.Args
		yym1156 := z.DecBinary()
		_ = yym1156
		if false {
		} else {
			z.F.DecSliceStringX(yyv1155, false, d)
		}
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1158 := &x.Ports
		yym1159 := z.DecBinary()
		_ = yym1159
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1158), d)
		}
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1160 := &x.Env
		yym1161 := z.DecBinary()
		_ = yym1161
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1160), d)
		}
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1162 := &x.Resources
		yyv1162.CodecDecodeSelf(d)
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1163 := &x.VolumeMounts
		yym1164 := z.DecBinary()
		_ = yym1164
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1163), d)
		}
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1150++
		if yyhl1150 {
			yyb1150 = yyj1150 > l
		} else {
			yyb1150 = r.CheckBreak()
		}
		if yyb1150 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1150-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1174 := z.EncBinary()
		_ = yym1174
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1175 := !z.EncBinary()
			yy2arr1175 := z.EncBasicHandle().StructToArray
			var yyq1175 [3]bool
			_, _, _ = yysep1175, yyq1175, yy2arr1175
			const yyr1175 bool = false
			yyq1175[0] = x.Exec != nil
			yyq1175[1] = x.HTTPGet != nil
			yyq1175[2] = x.TCPSocket != nil
			var yynn1175 int
			if yyr1175 || yy2arr1175 {
				r.EncodeArrayStart(3)
			} else {
				yynn1175 = 0
				for _, b := range yyq1175 {
					if b {
						yynn1175++
					}
				}
				r.EncodeMapStart(yynn1175)
				yynn1175 = 0
			}
			if yyr1175 || yy2arr1175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1175[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1175[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1175 || yy2arr1175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1175[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1175[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1175 || yy2arr1175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1175[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1175[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1175 || yy2arr1175 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1179 := z.DecBinary()
	_ = yym1179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1180 := r.ContainerType()
		if yyct1180 == codecSelferValueTypeMap1234 {
			yyl1180 := r.ReadMapStart()
			if yyl1180 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1180, d)
			}
		} else if yyct1180 == codecSelferValueTypeArray1234 {
			yyl1180 := r.ReadArrayStart()
			if yyl1180 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1180, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1181Slc
	var yyhl1181 bool = l >= 0
	for yyj1181 := 0; ; yyj1181++ {
		if yyhl1181 {
			if yyj1181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1181Slc = r.DecodeBytes(yys1181Slc, true, true)
		yys1181 := string(yys1181Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1181 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1181)
		} // end switch yys1181
	} // end for yyj1181
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1185 int
	var yyb1185 bool
	var yyhl1185 bool = l >= 0
	yyj1185++
	if yyhl1185 {
		yyb1185 = yyj1185 > l
	} else {
		yyb1185 = r.CheckBreak()
	}
	if yyb1185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1185++
	if yyhl1185 {
		yyb1185 = yyj1185 > l
	} else {
		yyb1185 = r.CheckBreak()
	}
	if yyb1185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1185++
	if yyhl1185 {
		yyb1185 = yyj1185 > l
	} else {
		yyb1185 = r.CheckBreak()
	}
	if yyb1185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1185++
		if yyhl1185 {
			yyb1185 = yyj1185 > l
		} else {
			yyb1185 = r.CheckBreak()
		}
		if yyb1185 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1185-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1189 := z.EncBinary()
		_ = yym1189
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1190 := !z.EncBinary()
			yy2arr1190 := z.EncBasicHandle().StructToArray
			var yyq1190 [2]bool
			_, _, _ = yysep1190, yyq1190, yy2arr1190
			const yyr1190 bool = false
			yyq1190[0] = x.PostStart != nil
			yyq1190[1] = x.PreStop != nil
			var yynn1190 int
			if yyr1190 || yy2arr1190 {
				r.EncodeArrayStart(2)
			} else {
				yynn1190 = 0
				for _, b := range yyq1190 {
					if b {
						yynn1190++
					}
				}
				r.EncodeMapStart(yynn1190)
				yynn1190 = 0
			}
			if yyr1190 || yy2arr1190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1190[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1190[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1190 || yy2arr1190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1190[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1190[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1190 || yy2arr1190 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1193 := z.DecBinary()
	_ = yym1193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1194 := r.ContainerType()
		if yyct1194 == codecSelferValueTypeMap1234 {
			yyl1194 := r.ReadMapStart()
			if yyl1194 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1194, d)
			}
		} else if yyct1194 == codecSelferValueTypeArray1234 {
			yyl1194 := r.ReadArrayStart()
			if yyl1194 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1195Slc
	var yyhl1195 bool = l >= 0
	for yyj1195 := 0; ; yyj1195++ {
		if yyhl1195 {
			if yyj1195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1195Slc = r.DecodeBytes(yys1195Slc, true, true)
		yys1195 := string(yys1195Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1195 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1195)
		} // end switch yys1195
	} // end for yyj1195
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1198 int
	var yyb1198 bool
	var yyhl1198 bool = l >= 0
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1198++
		if yyhl1198 {
			yyb1198 = yyj1198 > l
		} else {
			yyb1198 = r.CheckBreak()
		}
		if yyb1198 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1198-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1201 := z.EncBinary()
	_ = yym1201
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1202 := z.DecBinary()
	_ = yym1202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1203 := z.EncBinary()
		_ = yym1203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1204 := !z.EncBinary()
			yy2arr1204 := z.EncBasicHandle().StructToArray
			var yyq1204 [2]bool
			_, _, _ = yysep1204, yyq1204, yy2arr1204
			const yyr1204 bool = false
			yyq1204[0] = x.Reason != ""
			yyq1204[1] = x.Message != ""
			var yynn1204 int
			if yyr1204 || yy2arr1204 {
				r.EncodeArrayStart(2)
			} else {
				yynn1204 = 0
				for _, b := range yyq1204 {
					if b {
						yynn1204++
					}
				}
				r.EncodeMapStart(yynn1204)
				yynn1204 = 0
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1204[0] {
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1204[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1207 := z.EncBinary()
					_ = yym1207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1204[1] {
					yym1209 := z.EncBinary()
					_ = yym1209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1204[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1210 := z.EncBinary()
					_ = yym1210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1211 := z.DecBinary()
	_ = yym1211
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1212 := r.ContainerType()
		if yyct1212 == codecSelferValueTypeMap1234 {
			yyl1212 := r.ReadMapStart()
			if yyl1212 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1212, d)
			}
		} else if yyct1212 == codecSelferValueTypeArray1234 {
			yyl1212 := r.ReadArrayStart()
			if yyl1212 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1212, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1213Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1213Slc
	var yyhl1213 bool = l >= 0
	for yyj1213 := 0; ; yyj1213++ {
		if yyhl1213 {
			if yyj1213 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1213Slc = r.DecodeBytes(yys1213Slc, true, true)
		yys1213 := string(yys1213Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1213 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1213)
		} // end switch yys1213
	} // end for yyj1213
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1216 int
	var yyb1216 bool
	var yyhl1216 bool = l >= 0
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1216++
		if yyhl1216 {
			yyb1216 = yyj1216 > l
		} else {
			yyb1216 = r.CheckBreak()
		}
		if yyb1216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1219 := z.EncBinary()
		_ = yym1219
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1220 := !z.EncBinary()
			yy2arr1220 := z.EncBasicHandle().StructToArray
			var yyq1220 [1]bool
			_, _, _ = yysep1220, yyq1220, yy2arr1220
			const yyr1220 bool = false
			yyq1220[0] = true
			var yynn1220 int
			if yyr1220 || yy2arr1220 {
				r.EncodeArrayStart(1)
			} else {
				yynn1220 = 0
				for _, b := range yyq1220 {
					if b {
						yynn1220++
					}
				}
				r.EncodeMapStart(yynn1220)
				yynn1220 = 0
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1220[0] {
					yy1222 := &x.StartedAt
					yym1223 := z.EncBinary()
					_ = yym1223
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1222) {
					} else if yym1223 {
						z.EncBinaryMarshal(yy1222)
					} else if !yym1223 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1222)
					} else {
						z.EncFallback(yy1222)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1220[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1224 := &x.StartedAt
					yym1225 := z.EncBinary()
					_ = yym1225
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1224) {
					} else if yym1225 {
						z.EncBinaryMarshal(yy1224)
					} else if !yym1225 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1224)
					} else {
						z.EncFallback(yy1224)
					}
				}
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1226 := z.DecBinary()
	_ = yym1226
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1227 := r.ContainerType()
		if yyct1227 == codecSelferValueTypeMap1234 {
			yyl1227 := r.ReadMapStart()
			if yyl1227 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1227, d)
			}
		} else if yyct1227 == codecSelferValueTypeArray1234 {
			yyl1227 := r.ReadArrayStart()
			if yyl1227 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1227, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1228Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1228Slc
	var yyhl1228 bool = l >= 0
	for yyj1228 := 0; ; yyj1228++ {
		if yyhl1228 {
			if yyj1228 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1228Slc = r.DecodeBytes(yys1228Slc, true, true)
		yys1228 := string(yys1228Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1228 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1229 := &x.StartedAt
				yym1230 := z.DecBinary()
				_ = yym1230
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1229) {
				} else if yym1230 {
					z.DecBinaryUnmarshal(yyv1229)
				} else if !yym1230 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1229)
				} else {
					z.DecFallback(yyv1229, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1228)
		} // end switch yys1228
	} // end for yyj1228
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1231 int
	var yyb1231 bool
	var yyhl1231 bool = l >= 0
	yyj1231++
	if yyhl1231 {
		yyb1231 = yyj1231 > l
	} else {
		yyb1231 = r.CheckBreak()
	}
	if yyb1231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1232 := &x.StartedAt
		yym1233 := z.DecBinary()
		_ = yym1233
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1232) {
		} else if yym1233 {
			z.DecBinaryUnmarshal(yyv1232)
		} else if !yym1233 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1232)
		} else {
			z.DecFallback(yyv1232, false)
		}
	}
	for {
		yyj1231++
		if yyhl1231 {
			yyb1231 = yyj1231 > l
		} else {
			yyb1231 = r.CheckBreak()
		}
		if yyb1231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1234 := z.EncBinary()
		_ = yym1234
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1235 := !z.EncBinary()
			yy2arr1235 := z.EncBasicHandle().StructToArray
			var yyq1235 [7]bool
			_, _, _ = yysep1235, yyq1235, yy2arr1235
			const yyr1235 bool = false
			yyq1235[1] = x.Signal != 0
			yyq1235[2] = x.Reason != ""
			yyq1235[3] = x.Message != ""
			yyq1235[4] = true
			yyq1235[5] = true
			yyq1235[6] = x.ContainerID != ""
			var yynn1235 int
			if yyr1235 || yy2arr1235 {
				r.EncodeArrayStart(7)
			} else {
				yynn1235 = 1
				for _, b := range yyq1235 {
					if b {
						yynn1235++
					}
				}
				r.EncodeMapStart(yynn1235)
				yynn1235 = 0
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1237 := z.EncBinary()
				_ = yym1237
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1238 := z.EncBinary()
				_ = yym1238
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1235[1] {
					yym1240 := z.EncBinary()
					_ = yym1240
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1235[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1241 := z.EncBinary()
					_ = yym1241
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1235[2] {
					yym1243 := z.EncBinary()
					_ = yym1243
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1235[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1244 := z.EncBinary()
					_ = yym1244
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1235[3] {
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1235[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1247 := z.EncBinary()
					_ = yym1247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1235[4] {
					yy1249 := &x.StartedAt
					yym1250 := z.EncBinary()
					_ = yym1250
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1249) {
					} else if yym1250 {
						z.EncBinaryMarshal(yy1249)
					} else if !yym1250 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1249)
					} else {
						z.EncFallback(yy1249)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1251 := &x.StartedAt
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1251) {
					} else if yym1252 {
						z.EncBinaryMarshal(yy1251)
					} else if !yym1252 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1251)
					} else {
						z.EncFallback(yy1251)
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1235[5] {
					yy1254 := &x.FinishedAt
					yym1255 := z.EncBinary()
					_ = yym1255
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1254) {
					} else if yym1255 {
						z.EncBinaryMarshal(yy1254)
					} else if !yym1255 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1254)
					} else {
						z.EncFallback(yy1254)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1256 := &x.FinishedAt
					yym1257 := z.EncBinary()
					_ = yym1257
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1256) {
					} else if yym1257 {
						z.EncBinaryMarshal(yy1256)
					} else if !yym1257 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1256)
					} else {
						z.EncFallback(yy1256)
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1235[6] {
					yym1259 := z.EncBinary()
					_ = yym1259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1235[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1260 := z.EncBinary()
					_ = yym1260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1261 := z.DecBinary()
	_ = yym1261
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1262 := r.ContainerType()
		if yyct1262 == codecSelferValueTypeMap1234 {
			yyl1262 := r.ReadMapStart()
			if yyl1262 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1262, d)
			}
		} else if yyct1262 == codecSelferValueTypeArray1234 {
			yyl1262 := r.ReadArrayStart()
			if yyl1262 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1262, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1263Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1263Slc
	var yyhl1263 bool = l >= 0
	for yyj1263 := 0; ; yyj1263++ {
		if yyhl1263 {
			if yyj1263 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1263Slc = r.DecodeBytes(yys1263Slc, true, true)
		yys1263 := string(yys1263Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1263 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1268 := &x.StartedAt
				yym1269 := z.DecBinary()
				_ = yym1269
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1268) {
				} else if yym1269 {
					z.DecBinaryUnmarshal(yyv1268)
				} else if !yym1269 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1268)
				} else {
					z.DecFallback(yyv1268, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1270 := &x.FinishedAt
				yym1271 := z.DecBinary()
				_ = yym1271
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1270) {
				} else if yym1271 {
					z.DecBinaryUnmarshal(yyv1270)
				} else if !yym1271 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1270)
				} else {
					z.DecFallback(yyv1270, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1263)
		} // end switch yys1263
	} // end for yyj1263
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1273 int
	var yyb1273 bool
	var yyhl1273 bool = l >= 0
	yyj1273++
	if yyhl1273 {
		yyb1273 = yyj1273 > l
	} else {
		yyb1273 = r.CheckBreak()
	}
	if yyb1273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1273++
	if yyhl1273 {
		yyb1273 = yyj1273 > l
	} else {
		yyb1273 = r.CheckBreak()
	}
	if yyb1273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1273++
	if yyhl1273 {
		yyb1273 = yyj1273 > l
	} else {
		yyb1273 = r.CheckBreak()
	}
	if yyb1273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1273++
	if yyhl1273 {
		yyb1273 = yyj1273 > l
	} else {
		yyb1273 = r.CheckBreak()
	}
	if yyb1273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1273++
	if yyhl1273 {
		yyb1273 = yyj1273 > l
	} else {
		yyb1273 = r.CheckBreak()
	}
	if yyb1273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1278 := &x.StartedAt
		yym1279 := z.DecBinary()
		_ = yym1279
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1278) {
		} else if yym1279 {
			z.DecBinaryUnmarshal(yyv1278)
		} else if !yym1279 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1278)
		} else {
			z.DecFallback(yyv1278, false)
		}
	}
	yyj1273++
	if yyhl1273 {
		yyb1273 = yyj1273 > l
	} else {
		yyb1273 = r.CheckBreak()
	}
	if yyb1273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1280 := &x.FinishedAt
		yym1281 := z.DecBinary()
		_ = yym1281
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1280) {
		} else if yym1281 {
			z.DecBinaryUnmarshal(yyv1280)
		} else if !yym1281 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1280)
		} else {
			z.DecFallback(yyv1280, false)
		}
	}
	yyj1273++
	if yyhl1273 {
		yyb1273 = yyj1273 > l
	} else {
		yyb1273 = r.CheckBreak()
	}
	if yyb1273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1273++
		if yyhl1273 {
			yyb1273 = yyj1273 > l
		} else {
			yyb1273 = r.CheckBreak()
		}
		if yyb1273 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1273-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1283 := z.EncBinary()
		_ = yym1283
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1284 := !z.EncBinary()
			yy2arr1284 := z.EncBasicHandle().StructToArray
			var yyq1284 [3]bool
			_, _, _ = yysep1284, yyq1284, yy2arr1284
			const yyr1284 bool = false
			yyq1284[0] = x.Waiting != nil
			yyq1284[1] = x.Running != nil
			yyq1284[2] = x.Terminated != nil
			var yynn1284 int
			if yyr1284 || yy2arr1284 {
				r.EncodeArrayStart(3)
			} else {
				yynn1284 = 0
				for _, b := range yyq1284 {
					if b {
						yynn1284++
					}
				}
				r.EncodeMapStart(yynn1284)
				yynn1284 = 0
			}
			if yyr1284 || yy2arr1284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1284[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1284[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1284 || yy2arr1284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1284[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1284[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1284 || yy2arr1284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1284[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1284[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1284 || yy2arr1284 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1288 := z.DecBinary()
	_ = yym1288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1289 := r.ContainerType()
		if yyct1289 == codecSelferValueTypeMap1234 {
			yyl1289 := r.ReadMapStart()
			if yyl1289 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1289, d)
			}
		} else if yyct1289 == codecSelferValueTypeArray1234 {
			yyl1289 := r.ReadArrayStart()
			if yyl1289 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1289, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1290Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1290Slc
	var yyhl1290 bool = l >= 0
	for yyj1290 := 0; ; yyj1290++ {
		if yyhl1290 {
			if yyj1290 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1290Slc = r.DecodeBytes(yys1290Slc, true, true)
		yys1290 := string(yys1290Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1290 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1290)
		} // end switch yys1290
	} // end for yyj1290
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1294 int
	var yyb1294 bool
	var yyhl1294 bool = l >= 0
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1294++
		if yyhl1294 {
			yyb1294 = yyj1294 > l
		} else {
			yyb1294 = r.CheckBreak()
		}
		if yyb1294 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1294-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1298 := z.EncBinary()
		_ = yym1298
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1299 := !z.EncBinary()
			yy2arr1299 := z.EncBasicHandle().StructToArray
			var yyq1299 [8]bool
			_, _, _ = yysep1299, yyq1299, yy2arr1299
			const yyr1299 bool = false
			yyq1299[1] = true
			yyq1299[2] = true
			yyq1299[7] = x.ContainerID != ""
			var yynn1299 int
			if yyr1299 || yy2arr1299 {
				r.EncodeArrayStart(8)
			} else {
				yynn1299 = 5
				for _, b := range yyq1299 {
					if b {
						yynn1299++
					}
				}
				r.EncodeMapStart(yynn1299)
				yynn1299 = 0
			}
			if yyr1299 || yy2arr1299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1301 := z.EncBinary()
				_ = yym1301
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1302 := z.EncBinary()
				_ = yym1302
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1299 || yy2arr1299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1299[1] {
					yy1304 := &x.State
					yy1304.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1299[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1305 := &x.State
					yy1305.CodecEncodeSelf(e)
				}
			}
			if yyr1299 || yy2arr1299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1299[2] {
					yy1307 := &x.LastTerminationState
					yy1307.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1299[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1308 := &x.LastTerminationState
					yy1308.CodecEncodeSelf(e)
				}
			}
			if yyr1299 || yy2arr1299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1310 := z.EncBinary()
				_ = yym1310
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1311 := z.EncBinary()
				_ = yym1311
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1299 || yy2arr1299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1313 := z.EncBinary()
				_ = yym1313
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1314 := z.EncBinary()
				_ = yym1314
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1299 || yy2arr1299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1316 := z.EncBinary()
				_ = yym1316
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1317 := z.EncBinary()
				_ = yym1317
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1299 || yy2arr1299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1319 := z.EncBinary()
				_ = yym1319
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1320 := z.EncBinary()
				_ = yym1320
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1299 || yy2arr1299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1299[7] {
					yym1322 := z.EncBinary()
					_ = yym1322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1299[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1323 := z.EncBinary()
					_ = yym1323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1299 || yy2arr1299 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1324 := z.DecBinary()
	_ = yym1324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1325 := r.ContainerType()
		if yyct1325 == codecSelferValueTypeMap1234 {
			yyl1325 := r.ReadMapStart()
			if yyl1325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1325, d)
			}
		} else if yyct1325 == codecSelferValueTypeArray1234 {
			yyl1325 := r.ReadArrayStart()
			if yyl1325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1326Slc
	var yyhl1326 bool = l >= 0
	for yyj1326 := 0; ; yyj1326++ {
		if yyhl1326 {
			if yyj1326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1326Slc = r.DecodeBytes(yys1326Slc, true, true)
		yys1326 := string(yys1326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1326 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1328 := &x.State
				yyv1328.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1329 := &x.LastTerminationState
				yyv1329.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1326)
		} // end switch yys1326
	} // end for yyj1326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1335 int
	var yyb1335 bool
	var yyhl1335 bool = l >= 0
	yyj1335++
	if yyhl1335 {
		yyb1335 = yyj1335 > l
	} else {
		yyb1335 = r.CheckBreak()
	}
	if yyb1335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1335++
	if yyhl1335 {
		yyb1335 = yyj1335 > l
	} else {
		yyb1335 = r.CheckBreak()
	}
	if yyb1335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1337 := &x.State
		yyv1337.CodecDecodeSelf(d)
	}
	yyj1335++
	if yyhl1335 {
		yyb1335 = yyj1335 > l
	} else {
		yyb1335 = r.CheckBreak()
	}
	if yyb1335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1338 := &x.LastTerminationState
		yyv1338.CodecDecodeSelf(d)
	}
	yyj1335++
	if yyhl1335 {
		yyb1335 = yyj1335 > l
	} else {
		yyb1335 = r.CheckBreak()
	}
	if yyb1335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1335++
	if yyhl1335 {
		yyb1335 = yyj1335 > l
	} else {
		yyb1335 = r.CheckBreak()
	}
	if yyb1335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1335++
	if yyhl1335 {
		yyb1335 = yyj1335 > l
	} else {
		yyb1335 = r.CheckBreak()
	}
	if yyb1335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1335++
	if yyhl1335 {
		yyb1335 = yyj1335 > l
	} else {
		yyb1335 = r.CheckBreak()
	}
	if yyb1335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1335++
	if yyhl1335 {
		yyb1335 = yyj1335 > l
	} else {
		yyb1335 = r.CheckBreak()
	}
	if yyb1335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1335++
		if yyhl1335 {
			yyb1335 = yyj1335 > l
		} else {
			yyb1335 = r.CheckBreak()
		}
		if yyb1335 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1335-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1344 := z.EncBinary()
	_ = yym1344
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1345 := z.DecBinary()
	_ = yym1345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1346 := z.EncBinary()
	_ = yym1346
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1347 := z.DecBinary()
	_ = yym1347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1348 := z.EncBinary()
		_ = yym1348
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1349 := !z.EncBinary()
			yy2arr1349 := z.EncBasicHandle().StructToArray
			var yyq1349 [6]bool
			_, _, _ = yysep1349, yyq1349, yy2arr1349
			const yyr1349 bool = false
			yyq1349[2] = true
			yyq1349[3] = true
			yyq1349[4] = x.Reason != ""
			yyq1349[5] = x.Message != ""
			var yynn1349 int
			if yyr1349 || yy2arr1349 {
				r.EncodeArrayStart(6)
			} else {
				yynn1349 = 2
				for _, b := range yyq1349 {
					if b {
						yynn1349++
					}
				}
				r.EncodeMapStart(yynn1349)
				yynn1349 = 0
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1349[2] {
					yy1353 := &x.LastProbeTime
					yym1354 := z.EncBinary()
					_ = yym1354
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1353) {
					} else if yym1354 {
						z.EncBinaryMarshal(yy1353)
					} else if !yym1354 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1353)
					} else {
						z.EncFallback(yy1353)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1349[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1355 := &x.LastProbeTime
					yym1356 := z.EncBinary()
					_ = yym1356
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1355) {
					} else if yym1356 {
						z.EncBinaryMarshal(yy1355)
					} else if !yym1356 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1355)
					} else {
						z.EncFallback(yy1355)
					}
				}
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1349[3] {
					yy1358 := &x.LastTransitionTime
					yym1359 := z.EncBinary()
					_ = yym1359
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1358) {
					} else if yym1359 {
						z.EncBinaryMarshal(yy1358)
					} else if !yym1359 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1358)
					} else {
						z.EncFallback(yy1358)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1349[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1360 := &x.LastTransitionTime
					yym1361 := z.EncBinary()
					_ = yym1361
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1360) {
					} else if yym1361 {
						z.EncBinaryMarshal(yy1360)
					} else if !yym1361 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1360)
					} else {
						z.EncFallback(yy1360)
					}
				}
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1349[4] {
					yym1363 := z.EncBinary()
					_ = yym1363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1349[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1364 := z.EncBinary()
					_ = yym1364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1349[5] {
					yym1366 := z.EncBinary()
					_ = yym1366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1349[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1367 := z.EncBinary()
					_ = yym1367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1368 := z.DecBinary()
	_ = yym1368
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1369 := r.ContainerType()
		if yyct1369 == codecSelferValueTypeMap1234 {
			yyl1369 := r.ReadMapStart()
			if yyl1369 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1369, d)
			}
		} else if yyct1369 == codecSelferValueTypeArray1234 {
			yyl1369 := r.ReadArrayStart()
			if yyl1369 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1369, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1370Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1370Slc
	var yyhl1370 bool = l >= 0
	for yyj1370 := 0; ; yyj1370++ {
		if yyhl1370 {
			if yyj1370 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1370Slc = r.DecodeBytes(yys1370Slc, true, true)
		yys1370 := string(yys1370Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1370 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1373 := &x.LastProbeTime
				yym1374 := z.DecBinary()
				_ = yym1374
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1373) {
				} else if yym1374 {
					z.DecBinaryUnmarshal(yyv1373)
				} else if !yym1374 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1373)
				} else {
					z.DecFallback(yyv1373, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1375 := &x.LastTransitionTime
				yym1376 := z.DecBinary()
				_ = yym1376
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1375) {
				} else if yym1376 {
					z.DecBinaryUnmarshal(yyv1375)
				} else if !yym1376 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1375)
				} else {
					z.DecFallback(yyv1375, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1370)
		} // end switch yys1370
	} // end for yyj1370
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1379 int
	var yyb1379 bool
	var yyhl1379 bool = l >= 0
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1382 := &x.LastProbeTime
		yym1383 := z.DecBinary()
		_ = yym1383
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1382) {
		} else if yym1383 {
			z.DecBinaryUnmarshal(yyv1382)
		} else if !yym1383 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1382)
		} else {
			z.DecFallback(yyv1382, false)
		}
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1384 := &x.LastTransitionTime
		yym1385 := z.DecBinary()
		_ = yym1385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1384) {
		} else if yym1385 {
			z.DecBinaryUnmarshal(yyv1384)
		} else if !yym1385 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1384)
		} else {
			z.DecFallback(yyv1384, false)
		}
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1379++
		if yyhl1379 {
			yyb1379 = yyj1379 > l
		} else {
			yyb1379 = r.CheckBreak()
		}
		if yyb1379 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1379-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1388 := z.EncBinary()
	_ = yym1388
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1389 := z.DecBinary()
	_ = yym1389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1390 := z.EncBinary()
		_ = yym1390
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1391 := !z.EncBinary()
			yy2arr1391 := z.EncBasicHandle().StructToArray
			var yyq1391 [4]bool
			_, _, _ = yysep1391, yyq1391, yy2arr1391
			const yyr1391 bool = false
			yyq1391[0] = x.Kind != ""
			yyq1391[1] = x.APIVersion != ""
			yyq1391[2] = true
			var yynn1391 int
			if yyr1391 || yy2arr1391 {
				r.EncodeArrayStart(4)
			} else {
				yynn1391 = 1
				for _, b := range yyq1391 {
					if b {
						yynn1391++
					}
				}
				r.EncodeMapStart(yynn1391)
				yynn1391 = 0
			}
			if yyr1391 || yy2arr1391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1391[0] {
					yym1393 := z.EncBinary()
					_ = yym1393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1391[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1391 || yy2arr1391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1391[1] {
					yym1396 := z.EncBinary()
					_ = yym1396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1391[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1397 := z.EncBinary()
					_ = yym1397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1391 || yy2arr1391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1391[2] {
					yy1399 := &x.ListMeta
					yym1400 := z.EncBinary()
					_ = yym1400
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1399) {
					} else {
						z.EncFallback(yy1399)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1391[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1401 := &x.ListMeta
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1401) {
					} else {
						z.EncFallback(yy1401)
					}
				}
			}
			if yyr1391 || yy2arr1391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1404 := z.EncBinary()
					_ = yym1404
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1405 := z.EncBinary()
					_ = yym1405
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1391 || yy2arr1391 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1406 := z.DecBinary()
	_ = yym1406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1407 := r.ContainerType()
		if yyct1407 == codecSelferValueTypeMap1234 {
			yyl1407 := r.ReadMapStart()
			if yyl1407 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1407, d)
			}
		} else if yyct1407 == codecSelferValueTypeArray1234 {
			yyl1407 := r.ReadArrayStart()
			if yyl1407 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1407, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1408Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1408Slc
	var yyhl1408 bool = l >= 0
	for yyj1408 := 0; ; yyj1408++ {
		if yyhl1408 {
			if yyj1408 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1408Slc = r.DecodeBytes(yys1408Slc, true, true)
		yys1408 := string(yys1408Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1408 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1411 := &x.ListMeta
				yym1412 := z.DecBinary()
				_ = yym1412
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1411) {
				} else {
					z.DecFallback(yyv1411, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1413 := &x.Items
				yym1414 := z.DecBinary()
				_ = yym1414
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1413), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1408)
		} // end switch yys1408
	} // end for yyj1408
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1415 int
	var yyb1415 bool
	var yyhl1415 bool = l >= 0
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1418 := &x.ListMeta
		yym1419 := z.DecBinary()
		_ = yym1419
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1418) {
		} else {
			z.DecFallback(yyv1418, false)
		}
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1420 := &x.Items
		yym1421 := z.DecBinary()
		_ = yym1421
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1420), d)
		}
	}
	for {
		yyj1415++
		if yyhl1415 {
			yyb1415 = yyj1415 > l
		} else {
			yyb1415 = r.CheckBreak()
		}
		if yyb1415 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1415-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1422 := z.EncBinary()
	_ = yym1422
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1423 := z.DecBinary()
	_ = yym1423
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1424 := z.EncBinary()
		_ = yym1424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1425 := !z.EncBinary()
			yy2arr1425 := z.EncBasicHandle().StructToArray
			var yyq1425 [11]bool
			_, _, _ = yysep1425, yyq1425, yy2arr1425
			const yyr1425 bool = false
			yyq1425[2] = x.RestartPolicy != ""
			yyq1425[3] = x.TerminationGracePeriodSeconds != nil
			yyq1425[4] = x.ActiveDeadlineSeconds != nil
			yyq1425[5] = x.DNSPolicy != ""
			yyq1425[6] = len(x.NodeSelector) != 0
			yyq1425[8] = x.NodeName != ""
			yyq1425[9] = x.SecurityContext != nil
			yyq1425[10] = len(x.ImagePullSecrets) != 0
			var yynn1425 int
			if yyr1425 || yy2arr1425 {
				r.EncodeArrayStart(11)
			} else {
				yynn1425 = 3
				for _, b := range yyq1425 {
					if b {
						yynn1425++
					}
				}
				r.EncodeMapStart(yynn1425)
				yynn1425 = 0
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1427 := z.EncBinary()
					_ = yym1427
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1428 := z.EncBinary()
					_ = yym1428
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1430 := z.EncBinary()
					_ = yym1430
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1431 := z.EncBinary()
					_ = yym1431
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1425[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1425[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1425[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1434 := *x.TerminationGracePeriodSeconds
						yym1435 := z.EncBinary()
						_ = yym1435
						if false {
						} else {
							r.EncodeInt(int64(yy1434))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1425[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1436 := *x.TerminationGracePeriodSeconds
						yym1437 := z.EncBinary()
						_ = yym1437
						if false {
						} else {
							r.EncodeInt(int64(yy1436))
						}
					}
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1425[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1439 := *x.ActiveDeadlineSeconds
						yym1440 := z.EncBinary()
						_ = yym1440
						if false {
						} else {
							r.EncodeInt(int64(yy1439))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1425[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1441 := *x.ActiveDeadlineSeconds
						yym1442 := z.EncBinary()
						_ = yym1442
						if false {
						} else {
							r.EncodeInt(int64(yy1441))
						}
					}
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1425[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1425[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1425[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1445 := z.EncBinary()
						_ = yym1445
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1425[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1446 := z.EncBinary()
						_ = yym1446
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1448 := z.EncBinary()
				_ = yym1448
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1449 := z.EncBinary()
				_ = yym1449
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1425[8] {
					yym1451 := z.EncBinary()
					_ = yym1451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1425[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1452 := z.EncBinary()
					_ = yym1452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1425[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1425[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1425[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1455 := z.EncBinary()
						_ = yym1455
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1425[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1456 := z.EncBinary()
						_ = yym1456
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1457 := z.DecBinary()
	_ = yym1457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1458 := r.ContainerType()
		if yyct1458 == codecSelferValueTypeMap1234 {
			yyl1458 := r.ReadMapStart()
			if yyl1458 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1458, d)
			}
		} else if yyct1458 == codecSelferValueTypeArray1234 {
			yyl1458 := r.ReadArrayStart()
			if yyl1458 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1458, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1459Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1459Slc
	var yyhl1459 bool = l >= 0
	for yyj1459 := 0; ; yyj1459++ {
		if yyhl1459 {
			if yyj1459 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1459Slc = r.DecodeBytes(yys1459Slc, true, true)
		yys1459 := string(yys1459Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1459 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1460 := &x.Volumes
				yym1461 := z.DecBinary()
				_ = yym1461
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1460), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1462 := &x.Containers
				yym1463 := z.DecBinary()
				_ = yym1463
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1462), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1466 := z.DecBinary()
				_ = yym1466
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1468 := z.DecBinary()
				_ = yym1468
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1470 := &x.NodeSelector
				yym1471 := z.DecBinary()
				_ = yym1471
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1470, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1475 := &x.ImagePullSecrets
				yym1476 := z.DecBinary()
				_ = yym1476
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1475), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1459)
		} // end switch yys1459
	} // end for yyj1459
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1477 int
	var yyb1477 bool
	var yyhl1477 bool = l >= 0
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1478 := &x.Volumes
		yym1479 := z.DecBinary()
		_ = yym1479
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1478), d)
		}
	}
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1480 := &x.Containers
		yym1481 := z.DecBinary()
		_ = yym1481
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1480), d)
		}
	}
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1484 := z.DecBinary()
		_ = yym1484
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1486 := z.DecBinary()
		_ = yym1486
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1488 := &x.NodeSelector
		yym1489 := z.DecBinary()
		_ = yym1489
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1488, false, d)
		}
	}
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1493 := &x.ImagePullSecrets
		yym1494 := z.DecBinary()
		_ = yym1494
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1493), d)
		}
	}
	for {
		yyj1477++
		if yyhl1477 {
			yyb1477 = yyj1477 > l
		} else {
			yyb1477 = r.CheckBreak()
		}
		if yyb1477 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1477-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1495 := z.EncBinary()
		_ = yym1495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1496 := !z.EncBinary()
			yy2arr1496 := z.EncBasicHandle().StructToArray
			var yyq1496 [8]bool
			_, _, _ = yysep1496, yyq1496, yy2arr1496
			const yyr1496 bool = false
			yyq1496[0] = x.HostNetwork != false
			yyq1496[1] = x.HostPID != false
			yyq1496[2] = x.HostIPC != false
			yyq1496[3] = x.SELinuxOptions != nil
			yyq1496[4] = x.RunAsUser != nil
			yyq1496[5] = x.RunAsNonRoot != nil
			yyq1496[6] = len(x.SupplementalGroups) != 0
			yyq1496[7] = x.FSGroup != nil
			var yynn1496 int
			if yyr1496 || yy2arr1496 {
				r.EncodeArrayStart(8)
			} else {
				yynn1496 = 0
				for _, b := range yyq1496 {
					if b {
						yynn1496++
					}
				}
				r.EncodeMapStart(yynn1496)
				yynn1496 = 0
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[0] {
					yym1498 := z.EncBinary()
					_ = yym1498
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1496[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1499 := z.EncBinary()
					_ = yym1499
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[1] {
					yym1501 := z.EncBinary()
					_ = yym1501
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1496[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1502 := z.EncBinary()
					_ = yym1502
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[2] {
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1496[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1505 := z.EncBinary()
					_ = yym1505
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1508 := *x.RunAsUser
						yym1509 := z.EncBinary()
						_ = yym1509
						if false {
						} else {
							r.EncodeInt(int64(yy1508))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1510 := *x.RunAsUser
						yym1511 := z.EncBinary()
						_ = yym1511
						if false {
						} else {
							r.EncodeInt(int64(yy1510))
						}
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1513 := *x.RunAsNonRoot
						yym1514 := z.EncBinary()
						_ = yym1514
						if false {
						} else {
							r.EncodeBool(bool(yy1513))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1515 := *x.RunAsNonRoot
						yym1516 := z.EncBinary()
						_ = yym1516
						if false {
						} else {
							r.EncodeBool(bool(yy1515))
						}
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1518 := z.EncBinary()
						_ = yym1518
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1519 := z.EncBinary()
						_ = yym1519
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1521 := *x.FSGroup
						yym1522 := z.EncBinary()
						_ = yym1522
						if false {
						} else {
							r.EncodeInt(int64(yy1521))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1523 := *x.FSGroup
						yym1524 := z.EncBinary()
						_ = yym1524
						if false {
						} else {
							r.EncodeInt(int64(yy1523))
						}
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1525 := z.DecBinary()
	_ = yym1525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1526 := r.ContainerType()
		if yyct1526 == codecSelferValueTypeMap1234 {
			yyl1526 := r.ReadMapStart()
			if yyl1526 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1526, d)
			}
		} else if yyct1526 == codecSelferValueTypeArray1234 {
			yyl1526 := r.ReadArrayStart()
			if yyl1526 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1526, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1527Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1527Slc
	var yyhl1527 bool = l >= 0
	for yyj1527 := 0; ; yyj1527++ {
		if yyhl1527 {
			if yyj1527 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1527Slc = r.DecodeBytes(yys1527Slc, true, true)
		yys1527 := string(yys1527Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1527 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1533 := z.DecBinary()
				_ = yym1533
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1535 := z.DecBinary()
				_ = yym1535
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1536 := &x.SupplementalGroups
				yym1537 := z.DecBinary()
				_ = yym1537
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1536, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1539 := z.DecBinary()
				_ = yym1539
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1527)
		} // end switch yys1527
	} // end for yyj1527
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1540 int
	var yyb1540 bool
	var yyhl1540 bool = l >= 0
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1546 := z.DecBinary()
		_ = yym1546
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1548 := z.DecBinary()
		_ = yym1548
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1549 := &x.SupplementalGroups
		yym1550 := z.DecBinary()
		_ = yym1550
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1549, false, d)
		}
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1552 := z.DecBinary()
		_ = yym1552
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1540++
		if yyhl1540 {
			yyb1540 = yyj1540 > l
		} else {
			yyb1540 = r.CheckBreak()
		}
		if yyb1540 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1540-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1553 := z.EncBinary()
		_ = yym1553
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1554 := !z.EncBinary()
			yy2arr1554 := z.EncBasicHandle().StructToArray
			var yyq1554 [8]bool
			_, _, _ = yysep1554, yyq1554, yy2arr1554
			const yyr1554 bool = false
			yyq1554[0] = x.Phase != ""
			yyq1554[1] = len(x.Conditions) != 0
			yyq1554[2] = x.Message != ""
			yyq1554[3] = x.Reason != ""
			yyq1554[4] = x.HostIP != ""
			yyq1554[5] = x.PodIP != ""
			yyq1554[6] = x.StartTime != nil
			yyq1554[7] = len(x.ContainerStatuses) != 0
			var yynn1554 int
			if yyr1554 || yy2arr1554 {
				r.EncodeArrayStart(8)
			} else {
				yynn1554 = 0
				for _, b := range yyq1554 {
					if b {
						yynn1554++
					}
				}
				r.EncodeMapStart(yynn1554)
				yynn1554 = 0
			}
			if yyr1554 || yy2arr1554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1554[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1554[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1554 || yy2arr1554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1554[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1557 := z.EncBinary()
						_ = yym1557
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1554[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1558 := z.EncBinary()
						_ = yym1558
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1554 || yy2arr1554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1554[2] {
					yym1560 := z.EncBinary()
					_ = yym1560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1554[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1561 := z.EncBinary()
					_ = yym1561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1554 || yy2arr1554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1554[3] {
					yym1563 := z.EncBinary()
					_ = yym1563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1554[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1564 := z.EncBinary()
					_ = yym1564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1554 || yy2arr1554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1554[4] {
					yym1566 := z.EncBinary()
					_ = yym1566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1554[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1567 := z.EncBinary()
					_ = yym1567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1554 || yy2arr1554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1554[5] {
					yym1569 := z.EncBinary()
					_ = yym1569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1554[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1570 := z.EncBinary()
					_ = yym1570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1554 || yy2arr1554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1554[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1572 := z.EncBinary()
						_ = yym1572
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1572 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1572 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1554[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1573 := z.EncBinary()
						_ = yym1573
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1573 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1573 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1554 || yy2arr1554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1554[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1575 := z.EncBinary()
						_ = yym1575
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1554[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1576 := z.EncBinary()
						_ = yym1576
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1554 || yy2arr1554 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1577 := z.DecBinary()
	_ = yym1577
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1578 := r.ContainerType()
		if yyct1578 == codecSelferValueTypeMap1234 {
			yyl1578 := r.ReadMapStart()
			if yyl1578 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1578, d)
			}
		} else if yyct1578 == codecSelferValueTypeArray1234 {
			yyl1578 := r.ReadArrayStart()
			if yyl1578 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1578, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1579Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1579Slc
	var yyhl1579 bool = l >= 0
	for yyj1579 := 0; ; yyj1579++ {
		if yyhl1579 {
			if yyj1579 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1579Slc = r.DecodeBytes(yys1579Slc, true, true)
		yys1579 := string(yys1579Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1579 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1581 := &x.Conditions
				yym1582 := z.DecBinary()
				_ = yym1582
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1581), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1588 := z.DecBinary()
				_ = yym1588
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1588 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1588 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1589 := &x.ContainerStatuses
				yym1590 := z.DecBinary()
				_ = yym1590
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1589), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1579)
		} // end switch yys1579
	} // end for yyj1579
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1591 int
	var yyb1591 bool
	var yyhl1591 bool = l >= 0
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1593 := &x.Conditions
		yym1594 := z.DecBinary()
		_ = yym1594
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1593), d)
		}
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1600 := z.DecBinary()
		_ = yym1600
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1600 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1600 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1591++
	if yyhl1591 {
		yyb1591 = yyj1591 > l
	} else {
		yyb1591 = r.CheckBreak()
	}
	if yyb1591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1601 := &x.ContainerStatuses
		yym1602 := z.DecBinary()
		_ = yym1602
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1601), d)
		}
	}
	for {
		yyj1591++
		if yyhl1591 {
			yyb1591 = yyj1591 > l
		} else {
			yyb1591 = r.CheckBreak()
		}
		if yyb1591 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1591-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1603 := z.EncBinary()
		_ = yym1603
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1604 := !z.EncBinary()
			yy2arr1604 := z.EncBasicHandle().StructToArray
			var yyq1604 [4]bool
			_, _, _ = yysep1604, yyq1604, yy2arr1604
			const yyr1604 bool = false
			yyq1604[0] = x.Kind != ""
			yyq1604[1] = x.APIVersion != ""
			yyq1604[2] = true
			yyq1604[3] = true
			var yynn1604 int
			if yyr1604 || yy2arr1604 {
				r.EncodeArrayStart(4)
			} else {
				yynn1604 = 0
				for _, b := range yyq1604 {
					if b {
						yynn1604++
					}
				}
				r.EncodeMapStart(yynn1604)
				yynn1604 = 0
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[0] {
					yym1606 := z.EncBinary()
					_ = yym1606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1604[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1607 := z.EncBinary()
					_ = yym1607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[1] {
					yym1609 := z.EncBinary()
					_ = yym1609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1604[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1610 := z.EncBinary()
					_ = yym1610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[2] {
					yy1612 := &x.ObjectMeta
					yy1612.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1604[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1613 := &x.ObjectMeta
					yy1613.CodecEncodeSelf(e)
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[3] {
					yy1615 := &x.Status
					yy1615.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1604[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1616 := &x.Status
					yy1616.CodecEncodeSelf(e)
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1617 := z.DecBinary()
	_ = yym1617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1618 := r.ContainerType()
		if yyct1618 == codecSelferValueTypeMap1234 {
			yyl1618 := r.ReadMapStart()
			if yyl1618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1618, d)
			}
		} else if yyct1618 == codecSelferValueTypeArray1234 {
			yyl1618 := r.ReadArrayStart()
			if yyl1618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1619Slc
	var yyhl1619 bool = l >= 0
	for yyj1619 := 0; ; yyj1619++ {
		if yyhl1619 {
			if yyj1619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1619Slc = r.DecodeBytes(yys1619Slc, true, true)
		yys1619 := string(yys1619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1619 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1622 := &x.ObjectMeta
				yyv1622.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1623 := &x.Status
				yyv1623.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1619)
		} // end switch yys1619
	} // end for yyj1619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1624 int
	var yyb1624 bool
	var yyhl1624 bool = l >= 0
	yyj1624++
	if yyhl1624 {
		yyb1624 = yyj1624 > l
	} else {
		yyb1624 = r.CheckBreak()
	}
	if yyb1624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1624++
	if yyhl1624 {
		yyb1624 = yyj1624 > l
	} else {
		yyb1624 = r.CheckBreak()
	}
	if yyb1624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1624++
	if yyhl1624 {
		yyb1624 = yyj1624 > l
	} else {
		yyb1624 = r.CheckBreak()
	}
	if yyb1624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1627 := &x.ObjectMeta
		yyv1627.CodecDecodeSelf(d)
	}
	yyj1624++
	if yyhl1624 {
		yyb1624 = yyj1624 > l
	} else {
		yyb1624 = r.CheckBreak()
	}
	if yyb1624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1628 := &x.Status
		yyv1628.CodecDecodeSelf(d)
	}
	for {
		yyj1624++
		if yyhl1624 {
			yyb1624 = yyj1624 > l
		} else {
			yyb1624 = r.CheckBreak()
		}
		if yyb1624 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1624-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1629 := z.EncBinary()
		_ = yym1629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1630 := !z.EncBinary()
			yy2arr1630 := z.EncBasicHandle().StructToArray
			var yyq1630 [5]bool
			_, _, _ = yysep1630, yyq1630, yy2arr1630
			const yyr1630 bool = false
			yyq1630[0] = x.Kind != ""
			yyq1630[1] = x.APIVersion != ""
			yyq1630[2] = true
			yyq1630[3] = true
			yyq1630[4] = true
			var yynn1630 int
			if yyr1630 || yy2arr1630 {
				r.EncodeArrayStart(5)
			} else {
				yynn1630 = 0
				for _, b := range yyq1630 {
					if b {
						yynn1630++
					}
				}
				r.EncodeMapStart(yynn1630)
				yynn1630 = 0
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[0] {
					yym1632 := z.EncBinary()
					_ = yym1632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1630[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1633 := z.EncBinary()
					_ = yym1633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[1] {
					yym1635 := z.EncBinary()
					_ = yym1635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1636 := z.EncBinary()
					_ = yym1636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[2] {
					yy1638 := &x.ObjectMeta
					yy1638.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1630[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1639 := &x.ObjectMeta
					yy1639.CodecEncodeSelf(e)
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[3] {
					yy1641 := &x.Spec
					yy1641.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1630[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1642 := &x.Spec
					yy1642.CodecEncodeSelf(e)
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1630[4] {
					yy1644 := &x.Status
					yy1644.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1630[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1645 := &x.Status
					yy1645.CodecEncodeSelf(e)
				}
			}
			if yyr1630 || yy2arr1630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1646 := z.DecBinary()
	_ = yym1646
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1647 := r.ContainerType()
		if yyct1647 == codecSelferValueTypeMap1234 {
			yyl1647 := r.ReadMapStart()
			if yyl1647 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1647, d)
			}
		} else if yyct1647 == codecSelferValueTypeArray1234 {
			yyl1647 := r.ReadArrayStart()
			if yyl1647 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1647, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1648Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1648Slc
	var yyhl1648 bool = l >= 0
	for yyj1648 := 0; ; yyj1648++ {
		if yyhl1648 {
			if yyj1648 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1648Slc = r.DecodeBytes(yys1648Slc, true, true)
		yys1648 := string(yys1648Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1648 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1651 := &x.ObjectMeta
				yyv1651.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1652 := &x.Spec
				yyv1652.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1653 := &x.Status
				yyv1653.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1648)
		} // end switch yys1648
	} // end for yyj1648
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1654 int
	var yyb1654 bool
	var yyhl1654 bool = l >= 0
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1657 := &x.ObjectMeta
		yyv1657.CodecDecodeSelf(d)
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1658 := &x.Spec
		yyv1658.CodecDecodeSelf(d)
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1659 := &x.Status
		yyv1659.CodecDecodeSelf(d)
	}
	for {
		yyj1654++
		if yyhl1654 {
			yyb1654 = yyj1654 > l
		} else {
			yyb1654 = r.CheckBreak()
		}
		if yyb1654 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1654-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1660 := z.EncBinary()
		_ = yym1660
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1661 := !z.EncBinary()
			yy2arr1661 := z.EncBasicHandle().StructToArray
			var yyq1661 [2]bool
			_, _, _ = yysep1661, yyq1661, yy2arr1661
			const yyr1661 bool = false
			yyq1661[0] = true
			yyq1661[1] = true
			var yynn1661 int
			if yyr1661 || yy2arr1661 {
				r.EncodeArrayStart(2)
			} else {
				yynn1661 = 0
				for _, b := range yyq1661 {
					if b {
						yynn1661++
					}
				}
				r.EncodeMapStart(yynn1661)
				yynn1661 = 0
			}
			if yyr1661 || yy2arr1661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1661[0] {
					yy1663 := &x.ObjectMeta
					yy1663.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1661[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1664 := &x.ObjectMeta
					yy1664.CodecEncodeSelf(e)
				}
			}
			if yyr1661 || yy2arr1661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1661[1] {
					yy1666 := &x.Spec
					yy1666.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1661[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1667 := &x.Spec
					yy1667.CodecEncodeSelf(e)
				}
			}
			if yyr1661 || yy2arr1661 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1668 := z.DecBinary()
	_ = yym1668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1669 := r.ContainerType()
		if yyct1669 == codecSelferValueTypeMap1234 {
			yyl1669 := r.ReadMapStart()
			if yyl1669 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1669, d)
			}
		} else if yyct1669 == codecSelferValueTypeArray1234 {
			yyl1669 := r.ReadArrayStart()
			if yyl1669 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1670Slc
	var yyhl1670 bool = l >= 0
	for yyj1670 := 0; ; yyj1670++ {
		if yyhl1670 {
			if yyj1670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1670Slc = r.DecodeBytes(yys1670Slc, true, true)
		yys1670 := string(yys1670Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1670 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1671 := &x.ObjectMeta
				yyv1671.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1672 := &x.Spec
				yyv1672.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1670)
		} // end switch yys1670
	} // end for yyj1670
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1673 int
	var yyb1673 bool
	var yyhl1673 bool = l >= 0
	yyj1673++
	if yyhl1673 {
		yyb1673 = yyj1673 > l
	} else {
		yyb1673 = r.CheckBreak()
	}
	if yyb1673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1674 := &x.ObjectMeta
		yyv1674.CodecDecodeSelf(d)
	}
	yyj1673++
	if yyhl1673 {
		yyb1673 = yyj1673 > l
	} else {
		yyb1673 = r.CheckBreak()
	}
	if yyb1673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1675 := &x.Spec
		yyv1675.CodecDecodeSelf(d)
	}
	for {
		yyj1673++
		if yyhl1673 {
			yyb1673 = yyj1673 > l
		} else {
			yyb1673 = r.CheckBreak()
		}
		if yyb1673 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1673-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1676 := z.EncBinary()
		_ = yym1676
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1677 := !z.EncBinary()
			yy2arr1677 := z.EncBasicHandle().StructToArray
			var yyq1677 [4]bool
			_, _, _ = yysep1677, yyq1677, yy2arr1677
			const yyr1677 bool = false
			yyq1677[0] = x.Kind != ""
			yyq1677[1] = x.APIVersion != ""
			yyq1677[2] = true
			yyq1677[3] = true
			var yynn1677 int
			if yyr1677 || yy2arr1677 {
				r.EncodeArrayStart(4)
			} else {
				yynn1677 = 0
				for _, b := range yyq1677 {
					if b {
						yynn1677++
					}
				}
				r.EncodeMapStart(yynn1677)
				yynn1677 = 0
			}
			if yyr1677 || yy2arr1677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1677[0] {
					yym1679 := z.EncBinary()
					_ = yym1679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1677[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1680 := z.EncBinary()
					_ = yym1680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1677 || yy2arr1677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1677[1] {
					yym1682 := z.EncBinary()
					_ = yym1682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1677[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1683 := z.EncBinary()
					_ = yym1683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1677 || yy2arr1677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1677[2] {
					yy1685 := &x.ObjectMeta
					yy1685.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1677[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1686 := &x.ObjectMeta
					yy1686.CodecEncodeSelf(e)
				}
			}
			if yyr1677 || yy2arr1677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1677[3] {
					yy1688 := &x.Template
					yy1688.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1677[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1689 := &x.Template
					yy1689.CodecEncodeSelf(e)
				}
			}
			if yyr1677 || yy2arr1677 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1690 := z.DecBinary()
	_ = yym1690
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1691 := r.ContainerType()
		if yyct1691 == codecSelferValueTypeMap1234 {
			yyl1691 := r.ReadMapStart()
			if yyl1691 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1691, d)
			}
		} else if yyct1691 == codecSelferValueTypeArray1234 {
			yyl1691 := r.ReadArrayStart()
			if yyl1691 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1691, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1692Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1692Slc
	var yyhl1692 bool = l >= 0
	for yyj1692 := 0; ; yyj1692++ {
		if yyhl1692 {
			if yyj1692 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1692Slc = r.DecodeBytes(yys1692Slc, true, true)
		yys1692 := string(yys1692Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1692 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1695 := &x.ObjectMeta
				yyv1695.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1696 := &x.Template
				yyv1696.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1692)
		} // end switch yys1692
	} // end for yyj1692
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1697 int
	var yyb1697 bool
	var yyhl1697 bool = l >= 0
	yyj1697++
	if yyhl1697 {
		yyb1697 = yyj1697 > l
	} else {
		yyb1697 = r.CheckBreak()
	}
	if yyb1697 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1697++
	if yyhl1697 {
		yyb1697 = yyj1697 > l
	} else {
		yyb1697 = r.CheckBreak()
	}
	if yyb1697 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1697++
	if yyhl1697 {
		yyb1697 = yyj1697 > l
	} else {
		yyb1697 = r.CheckBreak()
	}
	if yyb1697 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1700 := &x.ObjectMeta
		yyv1700.CodecDecodeSelf(d)
	}
	yyj1697++
	if yyhl1697 {
		yyb1697 = yyj1697 > l
	} else {
		yyb1697 = r.CheckBreak()
	}
	if yyb1697 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1701 := &x.Template
		yyv1701.CodecDecodeSelf(d)
	}
	for {
		yyj1697++
		if yyhl1697 {
			yyb1697 = yyj1697 > l
		} else {
			yyb1697 = r.CheckBreak()
		}
		if yyb1697 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1697-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1702 := z.EncBinary()
		_ = yym1702
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1703 := !z.EncBinary()
			yy2arr1703 := z.EncBasicHandle().StructToArray
			var yyq1703 [4]bool
			_, _, _ = yysep1703, yyq1703, yy2arr1703
			const yyr1703 bool = false
			yyq1703[0] = x.Kind != ""
			yyq1703[1] = x.APIVersion != ""
			yyq1703[2] = true
			var yynn1703 int
			if yyr1703 || yy2arr1703 {
				r.EncodeArrayStart(4)
			} else {
				yynn1703 = 1
				for _, b := range yyq1703 {
					if b {
						yynn1703++
					}
				}
				r.EncodeMapStart(yynn1703)
				yynn1703 = 0
			}
			if yyr1703 || yy2arr1703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1703[0] {
					yym1705 := z.EncBinary()
					_ = yym1705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1703[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1706 := z.EncBinary()
					_ = yym1706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1703 || yy2arr1703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1703[1] {
					yym1708 := z.EncBinary()
					_ = yym1708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1703[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1709 := z.EncBinary()
					_ = yym1709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1703 || yy2arr1703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1703[2] {
					yy1711 := &x.ListMeta
					yym1712 := z.EncBinary()
					_ = yym1712
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1711) {
					} else {
						z.EncFallback(yy1711)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1703[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1713 := &x.ListMeta
					yym1714 := z.EncBinary()
					_ = yym1714
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1713) {
					} else {
						z.EncFallback(yy1713)
					}
				}
			}
			if yyr1703 || yy2arr1703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1716 := z.EncBinary()
					_ = yym1716
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1717 := z.EncBinary()
					_ = yym1717
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr1703 || yy2arr1703 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1718 := z.DecBinary()
	_ = yym1718
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1719 := r.ContainerType()
		if yyct1719 == codecSelferValueTypeMap1234 {
			yyl1719 := r.ReadMapStart()
			if yyl1719 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1719, d)
			}
		} else if yyct1719 == codecSelferValueTypeArray1234 {
			yyl1719 := r.ReadArrayStart()
			if yyl1719 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1719, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1720Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1720Slc
	var yyhl1720 bool = l >= 0
	for yyj1720 := 0; ; yyj1720++ {
		if yyhl1720 {
			if yyj1720 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1720Slc = r.DecodeBytes(yys1720Slc, true, true)
		yys1720 := string(yys1720Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1720 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1723 := &x.ListMeta
				yym1724 := z.DecBinary()
				_ = yym1724
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1723) {
				} else {
					z.DecFallback(yyv1723, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1725 := &x.Items
				yym1726 := z.DecBinary()
				_ = yym1726
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1725), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1720)
		} // end switch yys1720
	} // end for yyj1720
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1727 int
	var yyb1727 bool
	var yyhl1727 bool = l >= 0
	yyj1727++
	if yyhl1727 {
		yyb1727 = yyj1727 > l
	} else {
		yyb1727 = r.CheckBreak()
	}
	if yyb1727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1727++
	if yyhl1727 {
		yyb1727 = yyj1727 > l
	} else {
		yyb1727 = r.CheckBreak()
	}
	if yyb1727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1727++
	if yyhl1727 {
		yyb1727 = yyj1727 > l
	} else {
		yyb1727 = r.CheckBreak()
	}
	if yyb1727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1730 := &x.ListMeta
		yym1731 := z.DecBinary()
		_ = yym1731
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1730) {
		} else {
			z.DecFallback(yyv1730, false)
		}
	}
	yyj1727++
	if yyhl1727 {
		yyb1727 = yyj1727 > l
	} else {
		yyb1727 = r.CheckBreak()
	}
	if yyb1727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1732 := &x.Items
		yym1733 := z.DecBinary()
		_ = yym1733
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1732), d)
		}
	}
	for {
		yyj1727++
		if yyhl1727 {
			yyb1727 = yyj1727 > l
		} else {
			yyb1727 = r.CheckBreak()
		}
		if yyb1727 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1727-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1734 := z.EncBinary()
		_ = yym1734
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1735 := !z.EncBinary()
			yy2arr1735 := z.EncBasicHandle().StructToArray
			var yyq1735 [3]bool
			_, _, _ = yysep1735, yyq1735, yy2arr1735
			const yyr1735 bool = false
			yyq1735[2] = x.Template != nil
			var yynn1735 int
			if yyr1735 || yy2arr1735 {
				r.EncodeArrayStart(3)
			} else {
				yynn1735 = 2
				for _, b := range yyq1735 {
					if b {
						yynn1735++
					}
				}
				r.EncodeMapStart(yynn1735)
				yynn1735 = 0
			}
			if yyr1735 || yy2arr1735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1737 := z.EncBinary()
				_ = yym1737
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1738 := z.EncBinary()
				_ = yym1738
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1735 || yy2arr1735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1740 := z.EncBinary()
					_ = yym1740
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1735 || yy2arr1735 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1735[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1735[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1735 || yy2arr1735 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1743 := z.DecBinary()
	_ = yym1743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1744 := r.ContainerType()
		if yyct1744 == codecSelferValueTypeMap1234 {
			yyl1744 := r.ReadMapStart()
			if yyl1744 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1744, d)
			}
		} else if yyct1744 == codecSelferValueTypeArray1234 {
			yyl1744 := r.ReadArrayStart()
			if yyl1744 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1745Slc
	var yyhl1745 bool = l >= 0
	for yyj1745 := 0; ; yyj1745++ {
		if yyhl1745 {
			if yyj1745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1745Slc = r.DecodeBytes(yys1745Slc, true, true)
		yys1745 := string(yys1745Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1745 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1747 := &x.Selector
				yym1748 := z.DecBinary()
				_ = yym1748
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1747, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1745)
		} // end switch yys1745
	} // end for yyj1745
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1750 int
	var yyb1750 bool
	var yyhl1750 bool = l >= 0
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1752 := &x.Selector
		yym1753 := z.DecBinary()
		_ = yym1753
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1752, false, d)
		}
	}
	yyj1750++
	if yyhl1750 {
		yyb1750 = yyj1750 > l
	} else {
		yyb1750 = r.CheckBreak()
	}
	if yyb1750 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1750++
		if yyhl1750 {
			yyb1750 = yyj1750 > l
		} else {
			yyb1750 = r.CheckBreak()
		}
		if yyb1750 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1750-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1755 := z.EncBinary()
		_ = yym1755
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1756 := !z.EncBinary()
			yy2arr1756 := z.EncBasicHandle().StructToArray
			var yyq1756 [2]bool
			_, _, _ = yysep1756, yyq1756, yy2arr1756
			const yyr1756 bool = false
			yyq1756[1] = x.ObservedGeneration != 0
			var yynn1756 int
			if yyr1756 || yy2arr1756 {
				r.EncodeArrayStart(2)
			} else {
				yynn1756 = 1
				for _, b := range yyq1756 {
					if b {
						yynn1756++
					}
				}
				r.EncodeMapStart(yynn1756)
				yynn1756 = 0
			}
			if yyr1756 || yy2arr1756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1758 := z.EncBinary()
				_ = yym1758
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1759 := z.EncBinary()
				_ = yym1759
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1756 || yy2arr1756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1756[1] {
					yym1761 := z.EncBinary()
					_ = yym1761
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1756[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1762 := z.EncBinary()
					_ = yym1762
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1756 || yy2arr1756 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1763 := z.DecBinary()
	_ = yym1763
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1764 := r.ContainerType()
		if yyct1764 == codecSelferValueTypeMap1234 {
			yyl1764 := r.ReadMapStart()
			if yyl1764 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1764, d)
			}
		} else if yyct1764 == codecSelferValueTypeArray1234 {
			yyl1764 := r.ReadArrayStart()
			if yyl1764 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1764, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1765Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1765Slc
	var yyhl1765 bool = l >= 0
	for yyj1765 := 0; ; yyj1765++ {
		if yyhl1765 {
			if yyj1765 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1765Slc = r.DecodeBytes(yys1765Slc, true, true)
		yys1765 := string(yys1765Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1765 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1765)
		} // end switch yys1765
	} // end for yyj1765
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1768 int
	var yyb1768 bool
	var yyhl1768 bool = l >= 0
	yyj1768++
	if yyhl1768 {
		yyb1768 = yyj1768 > l
	} else {
		yyb1768 = r.CheckBreak()
	}
	if yyb1768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1768++
	if yyhl1768 {
		yyb1768 = yyj1768 > l
	} else {
		yyb1768 = r.CheckBreak()
	}
	if yyb1768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1768++
		if yyhl1768 {
			yyb1768 = yyj1768 > l
		} else {
			yyb1768 = r.CheckBreak()
		}
		if yyb1768 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1768-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1771 := z.EncBinary()
		_ = yym1771
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1772 := !z.EncBinary()
			yy2arr1772 := z.EncBasicHandle().StructToArray
			var yyq1772 [5]bool
			_, _, _ = yysep1772, yyq1772, yy2arr1772
			const yyr1772 bool = false
			yyq1772[0] = x.Kind != ""
			yyq1772[1] = x.APIVersion != ""
			yyq1772[2] = true
			yyq1772[3] = true
			yyq1772[4] = true
			var yynn1772 int
			if yyr1772 || yy2arr1772 {
				r.EncodeArrayStart(5)
			} else {
				yynn1772 = 0
				for _, b := range yyq1772 {
					if b {
						yynn1772++
					}
				}
				r.EncodeMapStart(yynn1772)
				yynn1772 = 0
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1772[0] {
					yym1774 := z.EncBinary()
					_ = yym1774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1772[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1775 := z.EncBinary()
					_ = yym1775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1772[1] {
					yym1777 := z.EncBinary()
					_ = yym1777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1772[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1778 := z.EncBinary()
					_ = yym1778
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1772[2] {
					yy1780 := &x.ObjectMeta
					yy1780.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1772[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1781 := &x.ObjectMeta
					yy1781.CodecEncodeSelf(e)
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1772[3] {
					yy1783 := &x.Spec
					yy1783.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1772[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1784 := &x.Spec
					yy1784.CodecEncodeSelf(e)
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1772[4] {
					yy1786 := &x.Status
					yy1786.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1772[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1787 := &x.Status
					yy1787.CodecEncodeSelf(e)
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1788 := z.DecBinary()
	_ = yym1788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1789 := r.ContainerType()
		if yyct1789 == codecSelferValueTypeMap1234 {
			yyl1789 := r.ReadMapStart()
			if yyl1789 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1789, d)
			}
		} else if yyct1789 == codecSelferValueTypeArray1234 {
			yyl1789 := r.ReadArrayStart()
			if yyl1789 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1790Slc
	var yyhl1790 bool = l >= 0
	for yyj1790 := 0; ; yyj1790++ {
		if yyhl1790 {
			if yyj1790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1790Slc = r.DecodeBytes(yys1790Slc, true, true)
		yys1790 := string(yys1790Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1790 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1793 := &x.ObjectMeta
				yyv1793.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1794 := &x.Spec
				yyv1794.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1795 := &x.Status
				yyv1795.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1790)
		} // end switch yys1790
	} // end for yyj1790
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1796 int
	var yyb1796 bool
	var yyhl1796 bool = l >= 0
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1799 := &x.ObjectMeta
		yyv1799.CodecDecodeSelf(d)
	}
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1800 := &x.Spec
		yyv1800.CodecDecodeSelf(d)
	}
	yyj1796++
	if yyhl1796 {
		yyb1796 = yyj1796 > l
	} else {
		yyb1796 = r.CheckBreak()
	}
	if yyb1796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1801 := &x.Status
		yyv1801.CodecDecodeSelf(d)
	}
	for {
		yyj1796++
		if yyhl1796 {
			yyb1796 = yyj1796 > l
		} else {
			yyb1796 = r.CheckBreak()
		}
		if yyb1796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1802 := z.EncBinary()
		_ = yym1802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1803 := !z.EncBinary()
			yy2arr1803 := z.EncBasicHandle().StructToArray
			var yyq1803 [4]bool
			_, _, _ = yysep1803, yyq1803, yy2arr1803
			const yyr1803 bool = false
			yyq1803[0] = x.Kind != ""
			yyq1803[1] = x.APIVersion != ""
			yyq1803[2] = true
			var yynn1803 int
			if yyr1803 || yy2arr1803 {
				r.EncodeArrayStart(4)
			} else {
				yynn1803 = 1
				for _, b := range yyq1803 {
					if b {
						yynn1803++
					}
				}
				r.EncodeMapStart(yynn1803)
				yynn1803 = 0
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[0] {
					yym1805 := z.EncBinary()
					_ = yym1805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1803[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1806 := z.EncBinary()
					_ = yym1806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[1] {
					yym1808 := z.EncBinary()
					_ = yym1808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1803[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1809 := z.EncBinary()
					_ = yym1809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[2] {
					yy1811 := &x.ListMeta
					yym1812 := z.EncBinary()
					_ = yym1812
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1811) {
					} else {
						z.EncFallback(yy1811)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1803[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1813 := &x.ListMeta
					yym1814 := z.EncBinary()
					_ = yym1814
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1813) {
					} else {
						z.EncFallback(yy1813)
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1816 := z.EncBinary()
					_ = yym1816
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1817 := z.EncBinary()
					_ = yym1817
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1818 := z.DecBinary()
	_ = yym1818
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1819 := r.ContainerType()
		if yyct1819 == codecSelferValueTypeMap1234 {
			yyl1819 := r.ReadMapStart()
			if yyl1819 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1819, d)
			}
		} else if yyct1819 == codecSelferValueTypeArray1234 {
			yyl1819 := r.ReadArrayStart()
			if yyl1819 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1819, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1820Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1820Slc
	var yyhl1820 bool = l >= 0
	for yyj1820 := 0; ; yyj1820++ {
		if yyhl1820 {
			if yyj1820 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1820Slc = r.DecodeBytes(yys1820Slc, true, true)
		yys1820 := string(yys1820Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1820 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1823 := &x.ListMeta
				yym1824 := z.DecBinary()
				_ = yym1824
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1823) {
				} else {
					z.DecFallback(yyv1823, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1825 := &x.Items
				yym1826 := z.DecBinary()
				_ = yym1826
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1825), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1820)
		} // end switch yys1820
	} // end for yyj1820
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1827 int
	var yyb1827 bool
	var yyhl1827 bool = l >= 0
	yyj1827++
	if yyhl1827 {
		yyb1827 = yyj1827 > l
	} else {
		yyb1827 = r.CheckBreak()
	}
	if yyb1827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1827++
	if yyhl1827 {
		yyb1827 = yyj1827 > l
	} else {
		yyb1827 = r.CheckBreak()
	}
	if yyb1827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1827++
	if yyhl1827 {
		yyb1827 = yyj1827 > l
	} else {
		yyb1827 = r.CheckBreak()
	}
	if yyb1827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1830 := &x.ListMeta
		yym1831 := z.DecBinary()
		_ = yym1831
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1830) {
		} else {
			z.DecFallback(yyv1830, false)
		}
	}
	yyj1827++
	if yyhl1827 {
		yyb1827 = yyj1827 > l
	} else {
		yyb1827 = r.CheckBreak()
	}
	if yyb1827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1832 := &x.Items
		yym1833 := z.DecBinary()
		_ = yym1833
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1832), d)
		}
	}
	for {
		yyj1827++
		if yyhl1827 {
			yyb1827 = yyj1827 > l
		} else {
			yyb1827 = r.CheckBreak()
		}
		if yyb1827 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1827-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1834 := z.EncBinary()
		_ = yym1834
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1835 := !z.EncBinary()
			yy2arr1835 := z.EncBasicHandle().StructToArray
			var yyq1835 [4]bool
			_, _, _ = yysep1835, yyq1835, yy2arr1835
			const yyr1835 bool = false
			yyq1835[0] = x.Kind != ""
			yyq1835[1] = x.APIVersion != ""
			yyq1835[2] = true
			var yynn1835 int
			if yyr1835 || yy2arr1835 {
				r.EncodeArrayStart(4)
			} else {
				yynn1835 = 1
				for _, b := range yyq1835 {
					if b {
						yynn1835++
					}
				}
				r.EncodeMapStart(yynn1835)
				yynn1835 = 0
			}
			if yyr1835 || yy2arr1835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1835[0] {
					yym1837 := z.EncBinary()
					_ = yym1837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1835[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1838 := z.EncBinary()
					_ = yym1838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1835 || yy2arr1835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1835[1] {
					yym1840 := z.EncBinary()
					_ = yym1840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1835[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1841 := z.EncBinary()
					_ = yym1841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1835 || yy2arr1835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1835[2] {
					yy1843 := &x.ListMeta
					yym1844 := z.EncBinary()
					_ = yym1844
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1843) {
					} else {
						z.EncFallback(yy1843)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1835[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1845 := &x.ListMeta
					yym1846 := z.EncBinary()
					_ = yym1846
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1845) {
					} else {
						z.EncFallback(yy1845)
					}
				}
			}
			if yyr1835 || yy2arr1835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1849 := z.EncBinary()
					_ = yym1849
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr1835 || yy2arr1835 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1850 := z.DecBinary()
	_ = yym1850
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1851 := r.ContainerType()
		if yyct1851 == codecSelferValueTypeMap1234 {
			yyl1851 := r.ReadMapStart()
			if yyl1851 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1851, d)
			}
		} else if yyct1851 == codecSelferValueTypeArray1234 {
			yyl1851 := r.ReadArrayStart()
			if yyl1851 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1851, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1852Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1852Slc
	var yyhl1852 bool = l >= 0
	for yyj1852 := 0; ; yyj1852++ {
		if yyhl1852 {
			if yyj1852 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1852Slc = r.DecodeBytes(yys1852Slc, true, true)
		yys1852 := string(yys1852Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1852 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1855 := &x.ListMeta
				yym1856 := z.DecBinary()
				_ = yym1856
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1855) {
				} else {
					z.DecFallback(yyv1855, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1857 := &x.Items
				yym1858 := z.DecBinary()
				_ = yym1858
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1857), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1852)
		} // end switch yys1852
	} // end for yyj1852
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1859 int
	var yyb1859 bool
	var yyhl1859 bool = l >= 0
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1862 := &x.ListMeta
		yym1863 := z.DecBinary()
		_ = yym1863
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1862) {
		} else {
			z.DecFallback(yyv1862, false)
		}
	}
	yyj1859++
	if yyhl1859 {
		yyb1859 = yyj1859 > l
	} else {
		yyb1859 = r.CheckBreak()
	}
	if yyb1859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1864 := &x.Items
		yym1865 := z.DecBinary()
		_ = yym1865
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1864), d)
		}
	}
	for {
		yyj1859++
		if yyhl1859 {
			yyb1859 = yyj1859 > l
		} else {
			yyb1859 = r.CheckBreak()
		}
		if yyb1859 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1859-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1866 := z.EncBinary()
	_ = yym1866
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1867 := z.DecBinary()
	_ = yym1867
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1868 := z.EncBinary()
	_ = yym1868
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1869 := z.DecBinary()
	_ = yym1869
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1870 := z.EncBinary()
		_ = yym1870
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1871 := !z.EncBinary()
			yy2arr1871 := z.EncBasicHandle().StructToArray
			var yyq1871 [1]bool
			_, _, _ = yysep1871, yyq1871, yy2arr1871
			const yyr1871 bool = false
			yyq1871[0] = true
			var yynn1871 int
			if yyr1871 || yy2arr1871 {
				r.EncodeArrayStart(1)
			} else {
				yynn1871 = 0
				for _, b := range yyq1871 {
					if b {
						yynn1871++
					}
				}
				r.EncodeMapStart(yynn1871)
				yynn1871 = 0
			}
			if yyr1871 || yy2arr1871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1871[0] {
					yy1873 := &x.LoadBalancer
					yy1873.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1871[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1874 := &x.LoadBalancer
					yy1874.CodecEncodeSelf(e)
				}
			}
			if yyr1871 || yy2arr1871 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1875 := z.DecBinary()
	_ = yym1875
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1876 := r.ContainerType()
		if yyct1876 == codecSelferValueTypeMap1234 {
			yyl1876 := r.ReadMapStart()
			if yyl1876 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1876, d)
			}
		} else if yyct1876 == codecSelferValueTypeArray1234 {
			yyl1876 := r.ReadArrayStart()
			if yyl1876 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1876, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1877Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1877Slc
	var yyhl1877 bool = l >= 0
	for yyj1877 := 0; ; yyj1877++ {
		if yyhl1877 {
			if yyj1877 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1877Slc = r.DecodeBytes(yys1877Slc, true, true)
		yys1877 := string(yys1877Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1877 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1878 := &x.LoadBalancer
				yyv1878.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1877)
		} // end switch yys1877
	} // end for yyj1877
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1879 int
	var yyb1879 bool
	var yyhl1879 bool = l >= 0
	yyj1879++
	if yyhl1879 {
		yyb1879 = yyj1879 > l
	} else {
		yyb1879 = r.CheckBreak()
	}
	if yyb1879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1880 := &x.LoadBalancer
		yyv1880.CodecDecodeSelf(d)
	}
	for {
		yyj1879++
		if yyhl1879 {
			yyb1879 = yyj1879 > l
		} else {
			yyb1879 = r.CheckBreak()
		}
		if yyb1879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1881 := z.EncBinary()
		_ = yym1881
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1882 := !z.EncBinary()
			yy2arr1882 := z.EncBasicHandle().StructToArray
			var yyq1882 [1]bool
			_, _, _ = yysep1882, yyq1882, yy2arr1882
			const yyr1882 bool = false
			yyq1882[0] = len(x.Ingress) != 0
			var yynn1882 int
			if yyr1882 || yy2arr1882 {
				r.EncodeArrayStart(1)
			} else {
				yynn1882 = 0
				for _, b := range yyq1882 {
					if b {
						yynn1882++
					}
				}
				r.EncodeMapStart(yynn1882)
				yynn1882 = 0
			}
			if yyr1882 || yy2arr1882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1882[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1884 := z.EncBinary()
						_ = yym1884
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1882[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1885 := z.EncBinary()
						_ = yym1885
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1882 || yy2arr1882 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1886 := z.DecBinary()
	_ = yym1886
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1887 := r.ContainerType()
		if yyct1887 == codecSelferValueTypeMap1234 {
			yyl1887 := r.ReadMapStart()
			if yyl1887 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1887, d)
			}
		} else if yyct1887 == codecSelferValueTypeArray1234 {
			yyl1887 := r.ReadArrayStart()
			if yyl1887 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1887, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1888Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1888Slc
	var yyhl1888 bool = l >= 0
	for yyj1888 := 0; ; yyj1888++ {
		if yyhl1888 {
			if yyj1888 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1888Slc = r.DecodeBytes(yys1888Slc, true, true)
		yys1888 := string(yys1888Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1888 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1889 := &x.Ingress
				yym1890 := z.DecBinary()
				_ = yym1890
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1889), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1888)
		} // end switch yys1888
	} // end for yyj1888
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1891 int
	var yyb1891 bool
	var yyhl1891 bool = l >= 0
	yyj1891++
	if yyhl1891 {
		yyb1891 = yyj1891 > l
	} else {
		yyb1891 = r.CheckBreak()
	}
	if yyb1891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1892 := &x.Ingress
		yym1893 := z.DecBinary()
		_ = yym1893
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1892), d)
		}
	}
	for {
		yyj1891++
		if yyhl1891 {
			yyb1891 = yyj1891 > l
		} else {
			yyb1891 = r.CheckBreak()
		}
		if yyb1891 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1891-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1894 := z.EncBinary()
		_ = yym1894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1895 := !z.EncBinary()
			yy2arr1895 := z.EncBasicHandle().StructToArray
			var yyq1895 [2]bool
			_, _, _ = yysep1895, yyq1895, yy2arr1895
			const yyr1895 bool = false
			yyq1895[0] = x.IP != ""
			yyq1895[1] = x.Hostname != ""
			var yynn1895 int
			if yyr1895 || yy2arr1895 {
				r.EncodeArrayStart(2)
			} else {
				yynn1895 = 0
				for _, b := range yyq1895 {
					if b {
						yynn1895++
					}
				}
				r.EncodeMapStart(yynn1895)
				yynn1895 = 0
			}
			if yyr1895 || yy2arr1895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1895[0] {
					yym1897 := z.EncBinary()
					_ = yym1897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1895[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1898 := z.EncBinary()
					_ = yym1898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1895 || yy2arr1895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1895[1] {
					yym1900 := z.EncBinary()
					_ = yym1900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1895[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1901 := z.EncBinary()
					_ = yym1901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1895 || yy2arr1895 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1902 := z.DecBinary()
	_ = yym1902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1903 := r.ContainerType()
		if yyct1903 == codecSelferValueTypeMap1234 {
			yyl1903 := r.ReadMapStart()
			if yyl1903 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1903, d)
			}
		} else if yyct1903 == codecSelferValueTypeArray1234 {
			yyl1903 := r.ReadArrayStart()
			if yyl1903 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1904Slc
	var yyhl1904 bool = l >= 0
	for yyj1904 := 0; ; yyj1904++ {
		if yyhl1904 {
			if yyj1904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1904Slc = r.DecodeBytes(yys1904Slc, true, true)
		yys1904 := string(yys1904Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1904 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1904)
		} // end switch yys1904
	} // end for yyj1904
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1907 int
	var yyb1907 bool
	var yyhl1907 bool = l >= 0
	yyj1907++
	if yyhl1907 {
		yyb1907 = yyj1907 > l
	} else {
		yyb1907 = r.CheckBreak()
	}
	if yyb1907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1907++
	if yyhl1907 {
		yyb1907 = yyj1907 > l
	} else {
		yyb1907 = r.CheckBreak()
	}
	if yyb1907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1907++
		if yyhl1907 {
			yyb1907 = yyj1907 > l
		} else {
			yyb1907 = r.CheckBreak()
		}
		if yyb1907 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1907-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1910 := z.EncBinary()
		_ = yym1910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1911 := !z.EncBinary()
			yy2arr1911 := z.EncBasicHandle().StructToArray
			var yyq1911 [7]bool
			_, _, _ = yysep1911, yyq1911, yy2arr1911
			const yyr1911 bool = false
			yyq1911[0] = x.Type != ""
			yyq1911[3] = x.ClusterIP != ""
			yyq1911[4] = len(x.ExternalIPs) != 0
			yyq1911[5] = x.LoadBalancerIP != ""
			yyq1911[6] = x.SessionAffinity != ""
			var yynn1911 int
			if yyr1911 || yy2arr1911 {
				r.EncodeArrayStart(7)
			} else {
				yynn1911 = 2
				for _, b := range yyq1911 {
					if b {
						yynn1911++
					}
				}
				r.EncodeMapStart(yynn1911)
				yynn1911 = 0
			}
			if yyr1911 || yy2arr1911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1911[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1911[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1911 || yy2arr1911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1914 := z.EncBinary()
					_ = yym1914
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1915 := z.EncBinary()
					_ = yym1915
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1911 || yy2arr1911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1917 := z.EncBinary()
					_ = yym1917
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1918 := z.EncBinary()
					_ = yym1918
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1911 || yy2arr1911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1911[3] {
					yym1920 := z.EncBinary()
					_ = yym1920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1911[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1921 := z.EncBinary()
					_ = yym1921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1911 || yy2arr1911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1911[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1923 := z.EncBinary()
						_ = yym1923
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1911[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1924 := z.EncBinary()
						_ = yym1924
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1911 || yy2arr1911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1911[5] {
					yym1926 := z.EncBinary()
					_ = yym1926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1911[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1927 := z.EncBinary()
					_ = yym1927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1911 || yy2arr1911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1911[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1911[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1911 || yy2arr1911 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1929 := z.DecBinary()
	_ = yym1929
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1930 := r.ContainerType()
		if yyct1930 == codecSelferValueTypeMap1234 {
			yyl1930 := r.ReadMapStart()
			if yyl1930 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1930, d)
			}
		} else if yyct1930 == codecSelferValueTypeArray1234 {
			yyl1930 := r.ReadArrayStart()
			if yyl1930 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1930, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1931Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1931Slc
	var yyhl1931 bool = l >= 0
	for yyj1931 := 0; ; yyj1931++ {
		if yyhl1931 {
			if yyj1931 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1931Slc = r.DecodeBytes(yys1931Slc, true, true)
		yys1931 := string(yys1931Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1931 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1933 := &x.Ports
				yym1934 := z.DecBinary()
				_ = yym1934
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1933), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1935 := &x.Selector
				yym1936 := z.DecBinary()
				_ = yym1936
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1935, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1938 := &x.ExternalIPs
				yym1939 := z.DecBinary()
				_ = yym1939
				if false {
				} else {
					z.F.DecSliceStringX(yyv1938, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1931)
		} // end switch yys1931
	} // end for yyj1931
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1942 int
	var yyb1942 bool
	var yyhl1942 bool = l >= 0
	yyj1942++
	if yyhl1942 {
		yyb1942 = yyj1942 > l
	} else {
		yyb1942 = r.CheckBreak()
	}
	if yyb1942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1942++
	if yyhl1942 {
		yyb1942 = yyj1942 > l
	} else {
		yyb1942 = r.CheckBreak()
	}
	if yyb1942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1944 := &x.Ports
		yym1945 := z.DecBinary()
		_ = yym1945
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1944), d)
		}
	}
	yyj1942++
	if yyhl1942 {
		yyb1942 = yyj1942 > l
	} else {
		yyb1942 = r.CheckBreak()
	}
	if yyb1942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1946 := &x.Selector
		yym1947 := z.DecBinary()
		_ = yym1947
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1946, false, d)
		}
	}
	yyj1942++
	if yyhl1942 {
		yyb1942 = yyj1942 > l
	} else {
		yyb1942 = r.CheckBreak()
	}
	if yyb1942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1942++
	if yyhl1942 {
		yyb1942 = yyj1942 > l
	} else {
		yyb1942 = r.CheckBreak()
	}
	if yyb1942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1949 := &x.ExternalIPs
		yym1950 := z.DecBinary()
		_ = yym1950
		if false {
		} else {
			z.F.DecSliceStringX(yyv1949, false, d)
		}
	}
	yyj1942++
	if yyhl1942 {
		yyb1942 = yyj1942 > l
	} else {
		yyb1942 = r.CheckBreak()
	}
	if yyb1942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj1942++
	if yyhl1942 {
		yyb1942 = yyj1942 > l
	} else {
		yyb1942 = r.CheckBreak()
	}
	if yyb1942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj1942++
		if yyhl1942 {
			yyb1942 = yyj1942 > l
		} else {
			yyb1942 = r.CheckBreak()
		}
		if yyb1942 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1942-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1953 := z.EncBinary()
		_ = yym1953
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1954 := !z.EncBinary()
			yy2arr1954 := z.EncBasicHandle().StructToArray
			var yyq1954 [5]bool
			_, _, _ = yysep1954, yyq1954, yy2arr1954
			const yyr1954 bool = false
			var yynn1954 int
			if yyr1954 || yy2arr1954 {
				r.EncodeArrayStart(5)
			} else {
				yynn1954 = 5
				for _, b := range yyq1954 {
					if b {
						yynn1954++
					}
				}
				r.EncodeMapStart(yynn1954)
				yynn1954 = 0
			}
			if yyr1954 || yy2arr1954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1956 := z.EncBinary()
				_ = yym1956
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1957 := z.EncBinary()
				_ = yym1957
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1954 || yy2arr1954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr1954 || yy2arr1954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1960 := z.EncBinary()
				_ = yym1960
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1961 := z.EncBinary()
				_ = yym1961
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1954 || yy2arr1954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1963 := &x.TargetPort
				yym1964 := z.EncBinary()
				_ = yym1964
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1963) {
				} else if !yym1964 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1963)
				} else {
					z.EncFallback(yy1963)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1965 := &x.TargetPort
				yym1966 := z.EncBinary()
				_ = yym1966
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1965) {
				} else if !yym1966 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1965)
				} else {
					z.EncFallback(yy1965)
				}
			}
			if yyr1954 || yy2arr1954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1968 := z.EncBinary()
				_ = yym1968
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1969 := z.EncBinary()
				_ = yym1969
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr1954 || yy2arr1954 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1970 := z.DecBinary()
	_ = yym1970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1971 := r.ContainerType()
		if yyct1971 == codecSelferValueTypeMap1234 {
			yyl1971 := r.ReadMapStart()
			if yyl1971 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1971, d)
			}
		} else if yyct1971 == codecSelferValueTypeArray1234 {
			yyl1971 := r.ReadArrayStart()
			if yyl1971 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1971, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1972Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1972Slc
	var yyhl1972 bool = l >= 0
	for yyj1972 := 0; ; yyj1972++ {
		if yyhl1972 {
			if yyj1972 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1972Slc = r.DecodeBytes(yys1972Slc, true, true)
		yys1972 := string(yys1972Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1972 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv1976 := &x.TargetPort
				yym1977 := z.DecBinary()
				_ = yym1977
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1976) {
				} else if !yym1977 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1976)
				} else {
					z.DecFallback(yyv1976, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1972)
		} // end switch yys1972
	} // end for yyj1972
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1979 int
	var yyb1979 bool
	var yyhl1979 bool = l >= 0
	yyj1979++
	if yyhl1979 {
		yyb1979 = yyj1979 > l
	} else {
		yyb1979 = r.CheckBreak()
	}
	if yyb1979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1979++
	if yyhl1979 {
		yyb1979 = yyj1979 > l
	} else {
		yyb1979 = r.CheckBreak()
	}
	if yyb1979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1979++
	if yyhl1979 {
		yyb1979 = yyj1979 > l
	} else {
		yyb1979 = r.CheckBreak()
	}
	if yyb1979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1979++
	if yyhl1979 {
		yyb1979 = yyj1979 > l
	} else {
		yyb1979 = r.CheckBreak()
	}
	if yyb1979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv1983 := &x.TargetPort
		yym1984 := z.DecBinary()
		_ = yym1984
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1983) {
		} else if !yym1984 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1983)
		} else {
			z.DecFallback(yyv1983, false)
		}
	}
	yyj1979++
	if yyhl1979 {
		yyb1979 = yyj1979 > l
	} else {
		yyb1979 = r.CheckBreak()
	}
	if yyb1979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1979++
		if yyhl1979 {
			yyb1979 = yyj1979 > l
		} else {
			yyb1979 = r.CheckBreak()
		}
		if yyb1979 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1979-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1986 := z.EncBinary()
		_ = yym1986
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1987 := !z.EncBinary()
			yy2arr1987 := z.EncBasicHandle().StructToArray
			var yyq1987 [5]bool
			_, _, _ = yysep1987, yyq1987, yy2arr1987
			const yyr1987 bool = false
			yyq1987[0] = x.Kind != ""
			yyq1987[1] = x.APIVersion != ""
			yyq1987[2] = true
			yyq1987[3] = true
			yyq1987[4] = true
			var yynn1987 int
			if yyr1987 || yy2arr1987 {
				r.EncodeArrayStart(5)
			} else {
				yynn1987 = 0
				for _, b := range yyq1987 {
					if b {
						yynn1987++
					}
				}
				r.EncodeMapStart(yynn1987)
				yynn1987 = 0
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[0] {
					yym1989 := z.EncBinary()
					_ = yym1989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1987[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1990 := z.EncBinary()
					_ = yym1990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[1] {
					yym1992 := z.EncBinary()
					_ = yym1992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1987[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1993 := z.EncBinary()
					_ = yym1993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[2] {
					yy1995 := &x.ObjectMeta
					yy1995.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1987[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1996 := &x.ObjectMeta
					yy1996.CodecEncodeSelf(e)
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[3] {
					yy1998 := &x.Spec
					yy1998.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1987[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1999 := &x.Spec
					yy1999.CodecEncodeSelf(e)
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1987[4] {
					yy2001 := &x.Status
					yy2001.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1987[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2002 := &x.Status
					yy2002.CodecEncodeSelf(e)
				}
			}
			if yyr1987 || yy2arr1987 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2003 := z.DecBinary()
	_ = yym2003
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2004 := r.ContainerType()
		if yyct2004 == codecSelferValueTypeMap1234 {
			yyl2004 := r.ReadMapStart()
			if yyl2004 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2004, d)
			}
		} else if yyct2004 == codecSelferValueTypeArray1234 {
			yyl2004 := r.ReadArrayStart()
			if yyl2004 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2004, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2005Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2005Slc
	var yyhl2005 bool = l >= 0
	for yyj2005 := 0; ; yyj2005++ {
		if yyhl2005 {
			if yyj2005 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2005Slc = r.DecodeBytes(yys2005Slc, true, true)
		yys2005 := string(yys2005Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2005 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2008 := &x.ObjectMeta
				yyv2008.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2009 := &x.Spec
				yyv2009.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2010 := &x.Status
				yyv2010.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2005)
		} // end switch yys2005
	} // end for yyj2005
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2011 int
	var yyb2011 bool
	var yyhl2011 bool = l >= 0
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2014 := &x.ObjectMeta
		yyv2014.CodecDecodeSelf(d)
	}
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2015 := &x.Spec
		yyv2015.CodecDecodeSelf(d)
	}
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2016 := &x.Status
		yyv2016.CodecDecodeSelf(d)
	}
	for {
		yyj2011++
		if yyhl2011 {
			yyb2011 = yyj2011 > l
		} else {
			yyb2011 = r.CheckBreak()
		}
		if yyb2011 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2011-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2017 := z.EncBinary()
		_ = yym2017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2018 := !z.EncBinary()
			yy2arr2018 := z.EncBasicHandle().StructToArray
			var yyq2018 [5]bool
			_, _, _ = yysep2018, yyq2018, yy2arr2018
			const yyr2018 bool = false
			yyq2018[0] = x.Kind != ""
			yyq2018[1] = x.APIVersion != ""
			yyq2018[2] = true
			yyq2018[4] = len(x.ImagePullSecrets) != 0
			var yynn2018 int
			if yyr2018 || yy2arr2018 {
				r.EncodeArrayStart(5)
			} else {
				yynn2018 = 1
				for _, b := range yyq2018 {
					if b {
						yynn2018++
					}
				}
				r.EncodeMapStart(yynn2018)
				yynn2018 = 0
			}
			if yyr2018 || yy2arr2018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2018[0] {
					yym2020 := z.EncBinary()
					_ = yym2020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2018[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2021 := z.EncBinary()
					_ = yym2021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2018 || yy2arr2018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2018[1] {
					yym2023 := z.EncBinary()
					_ = yym2023
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2018[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2024 := z.EncBinary()
					_ = yym2024
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2018 || yy2arr2018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2018[2] {
					yy2026 := &x.ObjectMeta
					yy2026.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2018[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2027 := &x.ObjectMeta
					yy2027.CodecEncodeSelf(e)
				}
			}
			if yyr2018 || yy2arr2018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2029 := z.EncBinary()
					_ = yym2029
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2030 := z.EncBinary()
					_ = yym2030
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2018 || yy2arr2018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2018[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2032 := z.EncBinary()
						_ = yym2032
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2018[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2033 := z.EncBinary()
						_ = yym2033
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2018 || yy2arr2018 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2034 := z.DecBinary()
	_ = yym2034
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2035 := r.ContainerType()
		if yyct2035 == codecSelferValueTypeMap1234 {
			yyl2035 := r.ReadMapStart()
			if yyl2035 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2035, d)
			}
		} else if yyct2035 == codecSelferValueTypeArray1234 {
			yyl2035 := r.ReadArrayStart()
			if yyl2035 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2035, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2036Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2036Slc
	var yyhl2036 bool = l >= 0
	for yyj2036 := 0; ; yyj2036++ {
		if yyhl2036 {
			if yyj2036 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2036Slc = r.DecodeBytes(yys2036Slc, true, true)
		yys2036 := string(yys2036Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2036 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2039 := &x.ObjectMeta
				yyv2039.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2040 := &x.Secrets
				yym2041 := z.DecBinary()
				_ = yym2041
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2040), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2042 := &x.ImagePullSecrets
				yym2043 := z.DecBinary()
				_ = yym2043
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2042), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2036)
		} // end switch yys2036
	} // end for yyj2036
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2044 int
	var yyb2044 bool
	var yyhl2044 bool = l >= 0
	yyj2044++
	if yyhl2044 {
		yyb2044 = yyj2044 > l
	} else {
		yyb2044 = r.CheckBreak()
	}
	if yyb2044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2044++
	if yyhl2044 {
		yyb2044 = yyj2044 > l
	} else {
		yyb2044 = r.CheckBreak()
	}
	if yyb2044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2044++
	if yyhl2044 {
		yyb2044 = yyj2044 > l
	} else {
		yyb2044 = r.CheckBreak()
	}
	if yyb2044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2047 := &x.ObjectMeta
		yyv2047.CodecDecodeSelf(d)
	}
	yyj2044++
	if yyhl2044 {
		yyb2044 = yyj2044 > l
	} else {
		yyb2044 = r.CheckBreak()
	}
	if yyb2044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2048 := &x.Secrets
		yym2049 := z.DecBinary()
		_ = yym2049
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2048), d)
		}
	}
	yyj2044++
	if yyhl2044 {
		yyb2044 = yyj2044 > l
	} else {
		yyb2044 = r.CheckBreak()
	}
	if yyb2044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2050 := &x.ImagePullSecrets
		yym2051 := z.DecBinary()
		_ = yym2051
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2050), d)
		}
	}
	for {
		yyj2044++
		if yyhl2044 {
			yyb2044 = yyj2044 > l
		} else {
			yyb2044 = r.CheckBreak()
		}
		if yyb2044 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2044-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2052 := z.EncBinary()
		_ = yym2052
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2053 := !z.EncBinary()
			yy2arr2053 := z.EncBasicHandle().StructToArray
			var yyq2053 [4]bool
			_, _, _ = yysep2053, yyq2053, yy2arr2053
			const yyr2053 bool = false
			yyq2053[0] = x.Kind != ""
			yyq2053[1] = x.APIVersion != ""
			yyq2053[2] = true
			var yynn2053 int
			if yyr2053 || yy2arr2053 {
				r.EncodeArrayStart(4)
			} else {
				yynn2053 = 1
				for _, b := range yyq2053 {
					if b {
						yynn2053++
					}
				}
				r.EncodeMapStart(yynn2053)
				yynn2053 = 0
			}
			if yyr2053 || yy2arr2053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2053[0] {
					yym2055 := z.EncBinary()
					_ = yym2055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2053[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2056 := z.EncBinary()
					_ = yym2056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2053 || yy2arr2053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2053[1] {
					yym2058 := z.EncBinary()
					_ = yym2058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2053[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2059 := z.EncBinary()
					_ = yym2059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2053 || yy2arr2053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2053[2] {
					yy2061 := &x.ListMeta
					yym2062 := z.EncBinary()
					_ = yym2062
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2061) {
					} else {
						z.EncFallback(yy2061)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2053[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2063 := &x.ListMeta
					yym2064 := z.EncBinary()
					_ = yym2064
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2063) {
					} else {
						z.EncFallback(yy2063)
					}
				}
			}
			if yyr2053 || yy2arr2053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2066 := z.EncBinary()
					_ = yym2066
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2067 := z.EncBinary()
					_ = yym2067
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2053 || yy2arr2053 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2068 := z.DecBinary()
	_ = yym2068
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2069 := r.ContainerType()
		if yyct2069 == codecSelferValueTypeMap1234 {
			yyl2069 := r.ReadMapStart()
			if yyl2069 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2069, d)
			}
		} else if yyct2069 == codecSelferValueTypeArray1234 {
			yyl2069 := r.ReadArrayStart()
			if yyl2069 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2069, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2070Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2070Slc
	var yyhl2070 bool = l >= 0
	for yyj2070 := 0; ; yyj2070++ {
		if yyhl2070 {
			if yyj2070 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2070Slc = r.DecodeBytes(yys2070Slc, true, true)
		yys2070 := string(yys2070Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2070 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2073 := &x.ListMeta
				yym2074 := z.DecBinary()
				_ = yym2074
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2073) {
				} else {
					z.DecFallback(yyv2073, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2075 := &x.Items
				yym2076 := z.DecBinary()
				_ = yym2076
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2075), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2070)
		} // end switch yys2070
	} // end for yyj2070
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2077 int
	var yyb2077 bool
	var yyhl2077 bool = l >= 0
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2080 := &x.ListMeta
		yym2081 := z.DecBinary()
		_ = yym2081
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2080) {
		} else {
			z.DecFallback(yyv2080, false)
		}
	}
	yyj2077++
	if yyhl2077 {
		yyb2077 = yyj2077 > l
	} else {
		yyb2077 = r.CheckBreak()
	}
	if yyb2077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2082 := &x.Items
		yym2083 := z.DecBinary()
		_ = yym2083
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2082), d)
		}
	}
	for {
		yyj2077++
		if yyhl2077 {
			yyb2077 = yyj2077 > l
		} else {
			yyb2077 = r.CheckBreak()
		}
		if yyb2077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2084 := z.EncBinary()
		_ = yym2084
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2085 := !z.EncBinary()
			yy2arr2085 := z.EncBasicHandle().StructToArray
			var yyq2085 [4]bool
			_, _, _ = yysep2085, yyq2085, yy2arr2085
			const yyr2085 bool = false
			yyq2085[0] = x.Kind != ""
			yyq2085[1] = x.APIVersion != ""
			yyq2085[2] = true
			var yynn2085 int
			if yyr2085 || yy2arr2085 {
				r.EncodeArrayStart(4)
			} else {
				yynn2085 = 1
				for _, b := range yyq2085 {
					if b {
						yynn2085++
					}
				}
				r.EncodeMapStart(yynn2085)
				yynn2085 = 0
			}
			if yyr2085 || yy2arr2085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2085[0] {
					yym2087 := z.EncBinary()
					_ = yym2087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2085[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2088 := z.EncBinary()
					_ = yym2088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2085 || yy2arr2085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2085[1] {
					yym2090 := z.EncBinary()
					_ = yym2090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2085[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2091 := z.EncBinary()
					_ = yym2091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2085 || yy2arr2085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2085[2] {
					yy2093 := &x.ObjectMeta
					yy2093.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2085[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2094 := &x.ObjectMeta
					yy2094.CodecEncodeSelf(e)
				}
			}
			if yyr2085 || yy2arr2085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2097 := z.EncBinary()
					_ = yym2097
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2085 || yy2arr2085 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2098 := z.DecBinary()
	_ = yym2098
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2099 := r.ContainerType()
		if yyct2099 == codecSelferValueTypeMap1234 {
			yyl2099 := r.ReadMapStart()
			if yyl2099 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2099, d)
			}
		} else if yyct2099 == codecSelferValueTypeArray1234 {
			yyl2099 := r.ReadArrayStart()
			if yyl2099 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2099, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2100Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2100Slc
	var yyhl2100 bool = l >= 0
	for yyj2100 := 0; ; yyj2100++ {
		if yyhl2100 {
			if yyj2100 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2100Slc = r.DecodeBytes(yys2100Slc, true, true)
		yys2100 := string(yys2100Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2100 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2103 := &x.ObjectMeta
				yyv2103.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2104 := &x.Subsets
				yym2105 := z.DecBinary()
				_ = yym2105
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2104), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2100)
		} // end switch yys2100
	} // end for yyj2100
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2106 int
	var yyb2106 bool
	var yyhl2106 bool = l >= 0
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2109 := &x.ObjectMeta
		yyv2109.CodecDecodeSelf(d)
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2110 := &x.Subsets
		yym2111 := z.DecBinary()
		_ = yym2111
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2110), d)
		}
	}
	for {
		yyj2106++
		if yyhl2106 {
			yyb2106 = yyj2106 > l
		} else {
			yyb2106 = r.CheckBreak()
		}
		if yyb2106 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2106-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2112 := z.EncBinary()
		_ = yym2112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2113 := !z.EncBinary()
			yy2arr2113 := z.EncBasicHandle().StructToArray
			var yyq2113 [3]bool
			_, _, _ = yysep2113, yyq2113, yy2arr2113
			const yyr2113 bool = false
			var yynn2113 int
			if yyr2113 || yy2arr2113 {
				r.EncodeArrayStart(3)
			} else {
				yynn2113 = 3
				for _, b := range yyq2113 {
					if b {
						yynn2113++
					}
				}
				r.EncodeMapStart(yynn2113)
				yynn2113 = 0
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2115 := z.EncBinary()
					_ = yym2115
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2116 := z.EncBinary()
					_ = yym2116
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2118 := z.EncBinary()
					_ = yym2118
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2119 := z.EncBinary()
					_ = yym2119
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2121 := z.EncBinary()
					_ = yym2121
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2122 := z.EncBinary()
					_ = yym2122
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2113 || yy2arr2113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2123 := z.DecBinary()
	_ = yym2123
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2124 := r.ContainerType()
		if yyct2124 == codecSelferValueTypeMap1234 {
			yyl2124 := r.ReadMapStart()
			if yyl2124 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2124, d)
			}
		} else if yyct2124 == codecSelferValueTypeArray1234 {
			yyl2124 := r.ReadArrayStart()
			if yyl2124 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2124, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2125Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2125Slc
	var yyhl2125 bool = l >= 0
	for yyj2125 := 0; ; yyj2125++ {
		if yyhl2125 {
			if yyj2125 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2125Slc = r.DecodeBytes(yys2125Slc, true, true)
		yys2125 := string(yys2125Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2125 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2126 := &x.Addresses
				yym2127 := z.DecBinary()
				_ = yym2127
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2126), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2128 := &x.NotReadyAddresses
				yym2129 := z.DecBinary()
				_ = yym2129
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2128), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2130 := &x.Ports
				yym2131 := z.DecBinary()
				_ = yym2131
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2130), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2125)
		} // end switch yys2125
	} // end for yyj2125
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2132 int
	var yyb2132 bool
	var yyhl2132 bool = l >= 0
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2133 := &x.Addresses
		yym2134 := z.DecBinary()
		_ = yym2134
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2133), d)
		}
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2135 := &x.NotReadyAddresses
		yym2136 := z.DecBinary()
		_ = yym2136
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2135), d)
		}
	}
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2137 := &x.Ports
		yym2138 := z.DecBinary()
		_ = yym2138
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2137), d)
		}
	}
	for {
		yyj2132++
		if yyhl2132 {
			yyb2132 = yyj2132 > l
		} else {
			yyb2132 = r.CheckBreak()
		}
		if yyb2132 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2132-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2139 := z.EncBinary()
		_ = yym2139
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2140 := !z.EncBinary()
			yy2arr2140 := z.EncBasicHandle().StructToArray
			var yyq2140 [2]bool
			_, _, _ = yysep2140, yyq2140, yy2arr2140
			const yyr2140 bool = false
			var yynn2140 int
			if yyr2140 || yy2arr2140 {
				r.EncodeArrayStart(2)
			} else {
				yynn2140 = 2
				for _, b := range yyq2140 {
					if b {
						yynn2140++
					}
				}
				r.EncodeMapStart(yynn2140)
				yynn2140 = 0
			}
			if yyr2140 || yy2arr2140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2142 := z.EncBinary()
				_ = yym2142
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2143 := z.EncBinary()
				_ = yym2143
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2140 || yy2arr2140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2140 || yy2arr2140 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2145 := z.DecBinary()
	_ = yym2145
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2146 := r.ContainerType()
		if yyct2146 == codecSelferValueTypeMap1234 {
			yyl2146 := r.ReadMapStart()
			if yyl2146 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2146, d)
			}
		} else if yyct2146 == codecSelferValueTypeArray1234 {
			yyl2146 := r.ReadArrayStart()
			if yyl2146 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2146, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2147Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2147Slc
	var yyhl2147 bool = l >= 0
	for yyj2147 := 0; ; yyj2147++ {
		if yyhl2147 {
			if yyj2147 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2147Slc = r.DecodeBytes(yys2147Slc, true, true)
		yys2147 := string(yys2147Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2147 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2147)
		} // end switch yys2147
	} // end for yyj2147
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2150 int
	var yyb2150 bool
	var yyhl2150 bool = l >= 0
	yyj2150++
	if yyhl2150 {
		yyb2150 = yyj2150 > l
	} else {
		yyb2150 = r.CheckBreak()
	}
	if yyb2150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2150++
	if yyhl2150 {
		yyb2150 = yyj2150 > l
	} else {
		yyb2150 = r.CheckBreak()
	}
	if yyb2150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2150++
		if yyhl2150 {
			yyb2150 = yyj2150 > l
		} else {
			yyb2150 = r.CheckBreak()
		}
		if yyb2150 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2150-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2153 := z.EncBinary()
		_ = yym2153
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2154 := !z.EncBinary()
			yy2arr2154 := z.EncBasicHandle().StructToArray
			var yyq2154 [3]bool
			_, _, _ = yysep2154, yyq2154, yy2arr2154
			const yyr2154 bool = false
			var yynn2154 int
			if yyr2154 || yy2arr2154 {
				r.EncodeArrayStart(3)
			} else {
				yynn2154 = 3
				for _, b := range yyq2154 {
					if b {
						yynn2154++
					}
				}
				r.EncodeMapStart(yynn2154)
				yynn2154 = 0
			}
			if yyr2154 || yy2arr2154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2156 := z.EncBinary()
				_ = yym2156
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2157 := z.EncBinary()
				_ = yym2157
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2154 || yy2arr2154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2159 := z.EncBinary()
				_ = yym2159
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2160 := z.EncBinary()
				_ = yym2160
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2154 || yy2arr2154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2154 || yy2arr2154 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2162 := z.DecBinary()
	_ = yym2162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2163 := r.ContainerType()
		if yyct2163 == codecSelferValueTypeMap1234 {
			yyl2163 := r.ReadMapStart()
			if yyl2163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2163, d)
			}
		} else if yyct2163 == codecSelferValueTypeArray1234 {
			yyl2163 := r.ReadArrayStart()
			if yyl2163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2164Slc
	var yyhl2164 bool = l >= 0
	for yyj2164 := 0; ; yyj2164++ {
		if yyhl2164 {
			if yyj2164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2164Slc = r.DecodeBytes(yys2164Slc, true, true)
		yys2164 := string(yys2164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2164 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2164)
		} // end switch yys2164
	} // end for yyj2164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2168 int
	var yyb2168 bool
	var yyhl2168 bool = l >= 0
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2168++
	if yyhl2168 {
		yyb2168 = yyj2168 > l
	} else {
		yyb2168 = r.CheckBreak()
	}
	if yyb2168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2168++
		if yyhl2168 {
			yyb2168 = yyj2168 > l
		} else {
			yyb2168 = r.CheckBreak()
		}
		if yyb2168 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2168-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2172 := z.EncBinary()
		_ = yym2172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2173 := !z.EncBinary()
			yy2arr2173 := z.EncBasicHandle().StructToArray
			var yyq2173 [4]bool
			_, _, _ = yysep2173, yyq2173, yy2arr2173
			const yyr2173 bool = false
			yyq2173[0] = x.Kind != ""
			yyq2173[1] = x.APIVersion != ""
			yyq2173[2] = true
			var yynn2173 int
			if yyr2173 || yy2arr2173 {
				r.EncodeArrayStart(4)
			} else {
				yynn2173 = 1
				for _, b := range yyq2173 {
					if b {
						yynn2173++
					}
				}
				r.EncodeMapStart(yynn2173)
				yynn2173 = 0
			}
			if yyr2173 || yy2arr2173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2173[0] {
					yym2175 := z.EncBinary()
					_ = yym2175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2173[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2176 := z.EncBinary()
					_ = yym2176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2173 || yy2arr2173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2173[1] {
					yym2178 := z.EncBinary()
					_ = yym2178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2173[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2179 := z.EncBinary()
					_ = yym2179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2173 || yy2arr2173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2173[2] {
					yy2181 := &x.ListMeta
					yym2182 := z.EncBinary()
					_ = yym2182
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2181) {
					} else {
						z.EncFallback(yy2181)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2173[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2183 := &x.ListMeta
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2183) {
					} else {
						z.EncFallback(yy2183)
					}
				}
			}
			if yyr2173 || yy2arr2173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2186 := z.EncBinary()
					_ = yym2186
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2173 || yy2arr2173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2188 := z.DecBinary()
	_ = yym2188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2189 := r.ContainerType()
		if yyct2189 == codecSelferValueTypeMap1234 {
			yyl2189 := r.ReadMapStart()
			if yyl2189 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2189, d)
			}
		} else if yyct2189 == codecSelferValueTypeArray1234 {
			yyl2189 := r.ReadArrayStart()
			if yyl2189 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2190Slc
	var yyhl2190 bool = l >= 0
	for yyj2190 := 0; ; yyj2190++ {
		if yyhl2190 {
			if yyj2190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2190Slc = r.DecodeBytes(yys2190Slc, true, true)
		yys2190 := string(yys2190Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2190 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2193 := &x.ListMeta
				yym2194 := z.DecBinary()
				_ = yym2194
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2193) {
				} else {
					z.DecFallback(yyv2193, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2195 := &x.Items
				yym2196 := z.DecBinary()
				_ = yym2196
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2195), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2190)
		} // end switch yys2190
	} // end for yyj2190
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2197 int
	var yyb2197 bool
	var yyhl2197 bool = l >= 0
	yyj2197++
	if yyhl2197 {
		yyb2197 = yyj2197 > l
	} else {
		yyb2197 = r.CheckBreak()
	}
	if yyb2197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2197++
	if yyhl2197 {
		yyb2197 = yyj2197 > l
	} else {
		yyb2197 = r.CheckBreak()
	}
	if yyb2197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2197++
	if yyhl2197 {
		yyb2197 = yyj2197 > l
	} else {
		yyb2197 = r.CheckBreak()
	}
	if yyb2197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2200 := &x.ListMeta
		yym2201 := z.DecBinary()
		_ = yym2201
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2200) {
		} else {
			z.DecFallback(yyv2200, false)
		}
	}
	yyj2197++
	if yyhl2197 {
		yyb2197 = yyj2197 > l
	} else {
		yyb2197 = r.CheckBreak()
	}
	if yyb2197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2202 := &x.Items
		yym2203 := z.DecBinary()
		_ = yym2203
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2202), d)
		}
	}
	for {
		yyj2197++
		if yyhl2197 {
			yyb2197 = yyj2197 > l
		} else {
			yyb2197 = r.CheckBreak()
		}
		if yyb2197 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2197-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2204 := z.EncBinary()
		_ = yym2204
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2205 := !z.EncBinary()
			yy2arr2205 := z.EncBasicHandle().StructToArray
			var yyq2205 [4]bool
			_, _, _ = yysep2205, yyq2205, yy2arr2205
			const yyr2205 bool = false
			yyq2205[0] = x.PodCIDR != ""
			yyq2205[1] = x.ExternalID != ""
			yyq2205[2] = x.ProviderID != ""
			yyq2205[3] = x.Unschedulable != false
			var yynn2205 int
			if yyr2205 || yy2arr2205 {
				r.EncodeArrayStart(4)
			} else {
				yynn2205 = 0
				for _, b := range yyq2205 {
					if b {
						yynn2205++
					}
				}
				r.EncodeMapStart(yynn2205)
				yynn2205 = 0
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[0] {
					yym2207 := z.EncBinary()
					_ = yym2207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2205[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2208 := z.EncBinary()
					_ = yym2208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[1] {
					yym2210 := z.EncBinary()
					_ = yym2210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2205[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2211 := z.EncBinary()
					_ = yym2211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[2] {
					yym2213 := z.EncBinary()
					_ = yym2213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2205[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2214 := z.EncBinary()
					_ = yym2214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[3] {
					yym2216 := z.EncBinary()
					_ = yym2216
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2205[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2217 := z.EncBinary()
					_ = yym2217
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2218 := z.DecBinary()
	_ = yym2218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2219 := r.ContainerType()
		if yyct2219 == codecSelferValueTypeMap1234 {
			yyl2219 := r.ReadMapStart()
			if yyl2219 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2219, d)
			}
		} else if yyct2219 == codecSelferValueTypeArray1234 {
			yyl2219 := r.ReadArrayStart()
			if yyl2219 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2220Slc
	var yyhl2220 bool = l >= 0
	for yyj2220 := 0; ; yyj2220++ {
		if yyhl2220 {
			if yyj2220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2220Slc = r.DecodeBytes(yys2220Slc, true, true)
		yys2220 := string(yys2220Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2220 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2220)
		} // end switch yys2220
	} // end for yyj2220
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2225 int
	var yyb2225 bool
	var yyhl2225 bool = l >= 0
	yyj2225++
	if yyhl2225 {
		yyb2225 = yyj2225 > l
	} else {
		yyb2225 = r.CheckBreak()
	}
	if yyb2225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2225++
	if yyhl2225 {
		yyb2225 = yyj2225 > l
	} else {
		yyb2225 = r.CheckBreak()
	}
	if yyb2225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2225++
	if yyhl2225 {
		yyb2225 = yyj2225 > l
	} else {
		yyb2225 = r.CheckBreak()
	}
	if yyb2225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2225++
	if yyhl2225 {
		yyb2225 = yyj2225 > l
	} else {
		yyb2225 = r.CheckBreak()
	}
	if yyb2225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2225++
		if yyhl2225 {
			yyb2225 = yyj2225 > l
		} else {
			yyb2225 = r.CheckBreak()
		}
		if yyb2225 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2225-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2230 := z.EncBinary()
		_ = yym2230
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2231 := !z.EncBinary()
			yy2arr2231 := z.EncBasicHandle().StructToArray
			var yyq2231 [1]bool
			_, _, _ = yysep2231, yyq2231, yy2arr2231
			const yyr2231 bool = false
			var yynn2231 int
			if yyr2231 || yy2arr2231 {
				r.EncodeArrayStart(1)
			} else {
				yynn2231 = 1
				for _, b := range yyq2231 {
					if b {
						yynn2231++
					}
				}
				r.EncodeMapStart(yynn2231)
				yynn2231 = 0
			}
			if yyr2231 || yy2arr2231 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2233 := z.EncBinary()
				_ = yym2233
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2234 := z.EncBinary()
				_ = yym2234
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2231 || yy2arr2231 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2235 := z.DecBinary()
	_ = yym2235
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2236 := r.ContainerType()
		if yyct2236 == codecSelferValueTypeMap1234 {
			yyl2236 := r.ReadMapStart()
			if yyl2236 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2236, d)
			}
		} else if yyct2236 == codecSelferValueTypeArray1234 {
			yyl2236 := r.ReadArrayStart()
			if yyl2236 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2236, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2237Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2237Slc
	var yyhl2237 bool = l >= 0
	for yyj2237 := 0; ; yyj2237++ {
		if yyhl2237 {
			if yyj2237 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2237Slc = r.DecodeBytes(yys2237Slc, true, true)
		yys2237 := string(yys2237Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2237 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2237)
		} // end switch yys2237
	} // end for yyj2237
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2239 int
	var yyb2239 bool
	var yyhl2239 bool = l >= 0
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2239++
		if yyhl2239 {
			yyb2239 = yyj2239 > l
		} else {
			yyb2239 = r.CheckBreak()
		}
		if yyb2239 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2239-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2241 := z.EncBinary()
		_ = yym2241
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2242 := !z.EncBinary()
			yy2arr2242 := z.EncBasicHandle().StructToArray
			var yyq2242 [1]bool
			_, _, _ = yysep2242, yyq2242, yy2arr2242
			const yyr2242 bool = false
			yyq2242[0] = true
			var yynn2242 int
			if yyr2242 || yy2arr2242 {
				r.EncodeArrayStart(1)
			} else {
				yynn2242 = 0
				for _, b := range yyq2242 {
					if b {
						yynn2242++
					}
				}
				r.EncodeMapStart(yynn2242)
				yynn2242 = 0
			}
			if yyr2242 || yy2arr2242 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2242[0] {
					yy2244 := &x.KubeletEndpoint
					yy2244.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2242[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2245 := &x.KubeletEndpoint
					yy2245.CodecEncodeSelf(e)
				}
			}
			if yyr2242 || yy2arr2242 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2246 := z.DecBinary()
	_ = yym2246
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2247 := r.ContainerType()
		if yyct2247 == codecSelferValueTypeMap1234 {
			yyl2247 := r.ReadMapStart()
			if yyl2247 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2247, d)
			}
		} else if yyct2247 == codecSelferValueTypeArray1234 {
			yyl2247 := r.ReadArrayStart()
			if yyl2247 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2247, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2248Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2248Slc
	var yyhl2248 bool = l >= 0
	for yyj2248 := 0; ; yyj2248++ {
		if yyhl2248 {
			if yyj2248 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2248Slc = r.DecodeBytes(yys2248Slc, true, true)
		yys2248 := string(yys2248Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2248 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2249 := &x.KubeletEndpoint
				yyv2249.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2248)
		} // end switch yys2248
	} // end for yyj2248
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2250 int
	var yyb2250 bool
	var yyhl2250 bool = l >= 0
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2251 := &x.KubeletEndpoint
		yyv2251.CodecDecodeSelf(d)
	}
	for {
		yyj2250++
		if yyhl2250 {
			yyb2250 = yyj2250 > l
		} else {
			yyb2250 = r.CheckBreak()
		}
		if yyb2250 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2250-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2252 := z.EncBinary()
		_ = yym2252
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2253 := !z.EncBinary()
			yy2arr2253 := z.EncBasicHandle().StructToArray
			var yyq2253 [8]bool
			_, _, _ = yysep2253, yyq2253, yy2arr2253
			const yyr2253 bool = false
			var yynn2253 int
			if yyr2253 || yy2arr2253 {
				r.EncodeArrayStart(8)
			} else {
				yynn2253 = 8
				for _, b := range yyq2253 {
					if b {
						yynn2253++
					}
				}
				r.EncodeMapStart(yynn2253)
				yynn2253 = 0
			}
			if yyr2253 || yy2arr2253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2255 := z.EncBinary()
				_ = yym2255
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2256 := z.EncBinary()
				_ = yym2256
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2253 || yy2arr2253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2258 := z.EncBinary()
				_ = yym2258
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2259 := z.EncBinary()
				_ = yym2259
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2253 || yy2arr2253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2261 := z.EncBinary()
				_ = yym2261
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2262 := z.EncBinary()
				_ = yym2262
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2253 || yy2arr2253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2264 := z.EncBinary()
				_ = yym2264
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2265 := z.EncBinary()
				_ = yym2265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2253 || yy2arr2253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2267 := z.EncBinary()
				_ = yym2267
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2268 := z.EncBinary()
				_ = yym2268
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2253 || yy2arr2253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2270 := z.EncBinary()
				_ = yym2270
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2271 := z.EncBinary()
				_ = yym2271
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2253 || yy2arr2253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2273 := z.EncBinary()
				_ = yym2273
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2274 := z.EncBinary()
				_ = yym2274
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2253 || yy2arr2253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2276 := z.EncBinary()
				_ = yym2276
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2277 := z.EncBinary()
				_ = yym2277
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2253 || yy2arr2253 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2278 := z.DecBinary()
	_ = yym2278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2279 := r.ContainerType()
		if yyct2279 == codecSelferValueTypeMap1234 {
			yyl2279 := r.ReadMapStart()
			if yyl2279 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2279, d)
			}
		} else if yyct2279 == codecSelferValueTypeArray1234 {
			yyl2279 := r.ReadArrayStart()
			if yyl2279 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2280Slc
	var yyhl2280 bool = l >= 0
	for yyj2280 := 0; ; yyj2280++ {
		if yyhl2280 {
			if yyj2280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2280Slc = r.DecodeBytes(yys2280Slc, true, true)
		yys2280 := string(yys2280Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2280 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2280)
		} // end switch yys2280
	} // end for yyj2280
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2289 int
	var yyb2289 bool
	var yyhl2289 bool = l >= 0
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2289++
	if yyhl2289 {
		yyb2289 = yyj2289 > l
	} else {
		yyb2289 = r.CheckBreak()
	}
	if yyb2289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2289++
		if yyhl2289 {
			yyb2289 = yyj2289 > l
		} else {
			yyb2289 = r.CheckBreak()
		}
		if yyb2289 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2289-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2298 := z.EncBinary()
		_ = yym2298
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2299 := !z.EncBinary()
			yy2arr2299 := z.EncBasicHandle().StructToArray
			var yyq2299 [6]bool
			_, _, _ = yysep2299, yyq2299, yy2arr2299
			const yyr2299 bool = false
			yyq2299[0] = len(x.Capacity) != 0
			yyq2299[1] = x.Phase != ""
			yyq2299[2] = len(x.Conditions) != 0
			yyq2299[3] = len(x.Addresses) != 0
			yyq2299[4] = true
			yyq2299[5] = true
			var yynn2299 int
			if yyr2299 || yy2arr2299 {
				r.EncodeArrayStart(6)
			} else {
				yynn2299 = 0
				for _, b := range yyq2299 {
					if b {
						yynn2299++
					}
				}
				r.EncodeMapStart(yynn2299)
				yynn2299 = 0
			}
			if yyr2299 || yy2arr2299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2299[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2299[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2299 || yy2arr2299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2299[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2299[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2299 || yy2arr2299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2299[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2303 := z.EncBinary()
						_ = yym2303
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2299[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2304 := z.EncBinary()
						_ = yym2304
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2299 || yy2arr2299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2299[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2306 := z.EncBinary()
						_ = yym2306
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2299[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2307 := z.EncBinary()
						_ = yym2307
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2299 || yy2arr2299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2299[4] {
					yy2309 := &x.DaemonEndpoints
					yy2309.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2299[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2310 := &x.DaemonEndpoints
					yy2310.CodecEncodeSelf(e)
				}
			}
			if yyr2299 || yy2arr2299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2299[5] {
					yy2312 := &x.NodeInfo
					yy2312.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2299[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2313 := &x.NodeInfo
					yy2313.CodecEncodeSelf(e)
				}
			}
			if yyr2299 || yy2arr2299 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2314 := z.DecBinary()
	_ = yym2314
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2315 := r.ContainerType()
		if yyct2315 == codecSelferValueTypeMap1234 {
			yyl2315 := r.ReadMapStart()
			if yyl2315 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2315, d)
			}
		} else if yyct2315 == codecSelferValueTypeArray1234 {
			yyl2315 := r.ReadArrayStart()
			if yyl2315 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2315, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2316Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2316Slc
	var yyhl2316 bool = l >= 0
	for yyj2316 := 0; ; yyj2316++ {
		if yyhl2316 {
			if yyj2316 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2316Slc = r.DecodeBytes(yys2316Slc, true, true)
		yys2316 := string(yys2316Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2316 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2317 := &x.Capacity
				yyv2317.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2319 := &x.Conditions
				yym2320 := z.DecBinary()
				_ = yym2320
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2319), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2321 := &x.Addresses
				yym2322 := z.DecBinary()
				_ = yym2322
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2321), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2323 := &x.DaemonEndpoints
				yyv2323.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2324 := &x.NodeInfo
				yyv2324.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2316)
		} // end switch yys2316
	} // end for yyj2316
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2325 int
	var yyb2325 bool
	var yyhl2325 bool = l >= 0
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2326 := &x.Capacity
		yyv2326.CodecDecodeSelf(d)
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2328 := &x.Conditions
		yym2329 := z.DecBinary()
		_ = yym2329
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2328), d)
		}
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2330 := &x.Addresses
		yym2331 := z.DecBinary()
		_ = yym2331
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2330), d)
		}
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2332 := &x.DaemonEndpoints
		yyv2332.CodecDecodeSelf(d)
	}
	yyj2325++
	if yyhl2325 {
		yyb2325 = yyj2325 > l
	} else {
		yyb2325 = r.CheckBreak()
	}
	if yyb2325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2333 := &x.NodeInfo
		yyv2333.CodecDecodeSelf(d)
	}
	for {
		yyj2325++
		if yyhl2325 {
			yyb2325 = yyj2325 > l
		} else {
			yyb2325 = r.CheckBreak()
		}
		if yyb2325 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2325-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2334 := z.EncBinary()
	_ = yym2334
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2335 := z.DecBinary()
	_ = yym2335
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2336 := z.EncBinary()
	_ = yym2336
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2337 := z.DecBinary()
	_ = yym2337
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2338 := z.EncBinary()
		_ = yym2338
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2339 := !z.EncBinary()
			yy2arr2339 := z.EncBasicHandle().StructToArray
			var yyq2339 [6]bool
			_, _, _ = yysep2339, yyq2339, yy2arr2339
			const yyr2339 bool = false
			yyq2339[2] = true
			yyq2339[3] = true
			yyq2339[4] = x.Reason != ""
			yyq2339[5] = x.Message != ""
			var yynn2339 int
			if yyr2339 || yy2arr2339 {
				r.EncodeArrayStart(6)
			} else {
				yynn2339 = 2
				for _, b := range yyq2339 {
					if b {
						yynn2339++
					}
				}
				r.EncodeMapStart(yynn2339)
				yynn2339 = 0
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[2] {
					yy2343 := &x.LastHeartbeatTime
					yym2344 := z.EncBinary()
					_ = yym2344
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2343) {
					} else if yym2344 {
						z.EncBinaryMarshal(yy2343)
					} else if !yym2344 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2343)
					} else {
						z.EncFallback(yy2343)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2339[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2345 := &x.LastHeartbeatTime
					yym2346 := z.EncBinary()
					_ = yym2346
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2345) {
					} else if yym2346 {
						z.EncBinaryMarshal(yy2345)
					} else if !yym2346 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2345)
					} else {
						z.EncFallback(yy2345)
					}
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[3] {
					yy2348 := &x.LastTransitionTime
					yym2349 := z.EncBinary()
					_ = yym2349
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2348) {
					} else if yym2349 {
						z.EncBinaryMarshal(yy2348)
					} else if !yym2349 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2348)
					} else {
						z.EncFallback(yy2348)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2339[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2350 := &x.LastTransitionTime
					yym2351 := z.EncBinary()
					_ = yym2351
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2350) {
					} else if yym2351 {
						z.EncBinaryMarshal(yy2350)
					} else if !yym2351 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2350)
					} else {
						z.EncFallback(yy2350)
					}
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[4] {
					yym2353 := z.EncBinary()
					_ = yym2353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2339[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2354 := z.EncBinary()
					_ = yym2354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2339[5] {
					yym2356 := z.EncBinary()
					_ = yym2356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2339[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2357 := z.EncBinary()
					_ = yym2357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2339 || yy2arr2339 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2358 := z.DecBinary()
	_ = yym2358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2359 := r.ContainerType()
		if yyct2359 == codecSelferValueTypeMap1234 {
			yyl2359 := r.ReadMapStart()
			if yyl2359 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2359, d)
			}
		} else if yyct2359 == codecSelferValueTypeArray1234 {
			yyl2359 := r.ReadArrayStart()
			if yyl2359 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2359, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2360Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2360Slc
	var yyhl2360 bool = l >= 0
	for yyj2360 := 0; ; yyj2360++ {
		if yyhl2360 {
			if yyj2360 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2360Slc = r.DecodeBytes(yys2360Slc, true, true)
		yys2360 := string(yys2360Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2360 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2363 := &x.LastHeartbeatTime
				yym2364 := z.DecBinary()
				_ = yym2364
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2363) {
				} else if yym2364 {
					z.DecBinaryUnmarshal(yyv2363)
				} else if !yym2364 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2363)
				} else {
					z.DecFallback(yyv2363, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2365 := &x.LastTransitionTime
				yym2366 := z.DecBinary()
				_ = yym2366
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2365) {
				} else if yym2366 {
					z.DecBinaryUnmarshal(yyv2365)
				} else if !yym2366 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2365)
				} else {
					z.DecFallback(yyv2365, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2360)
		} // end switch yys2360
	} // end for yyj2360
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2369 int
	var yyb2369 bool
	var yyhl2369 bool = l >= 0
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2372 := &x.LastHeartbeatTime
		yym2373 := z.DecBinary()
		_ = yym2373
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2372) {
		} else if yym2373 {
			z.DecBinaryUnmarshal(yyv2372)
		} else if !yym2373 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2372)
		} else {
			z.DecFallback(yyv2372, false)
		}
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2374 := &x.LastTransitionTime
		yym2375 := z.DecBinary()
		_ = yym2375
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2374) {
		} else if yym2375 {
			z.DecBinaryUnmarshal(yyv2374)
		} else if !yym2375 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2374)
		} else {
			z.DecFallback(yyv2374, false)
		}
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2369++
		if yyhl2369 {
			yyb2369 = yyj2369 > l
		} else {
			yyb2369 = r.CheckBreak()
		}
		if yyb2369 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2369-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2378 := z.EncBinary()
	_ = yym2378
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2379 := z.DecBinary()
	_ = yym2379
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2380 := z.EncBinary()
		_ = yym2380
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2381 := !z.EncBinary()
			yy2arr2381 := z.EncBasicHandle().StructToArray
			var yyq2381 [2]bool
			_, _, _ = yysep2381, yyq2381, yy2arr2381
			const yyr2381 bool = false
			var yynn2381 int
			if yyr2381 || yy2arr2381 {
				r.EncodeArrayStart(2)
			} else {
				yynn2381 = 2
				for _, b := range yyq2381 {
					if b {
						yynn2381++
					}
				}
				r.EncodeMapStart(yynn2381)
				yynn2381 = 0
			}
			if yyr2381 || yy2arr2381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2381 || yy2arr2381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2384 := z.EncBinary()
				_ = yym2384
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2385 := z.EncBinary()
				_ = yym2385
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2381 || yy2arr2381 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2386 := z.DecBinary()
	_ = yym2386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2387 := r.ContainerType()
		if yyct2387 == codecSelferValueTypeMap1234 {
			yyl2387 := r.ReadMapStart()
			if yyl2387 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2387, d)
			}
		} else if yyct2387 == codecSelferValueTypeArray1234 {
			yyl2387 := r.ReadArrayStart()
			if yyl2387 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2387, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2388Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2388Slc
	var yyhl2388 bool = l >= 0
	for yyj2388 := 0; ; yyj2388++ {
		if yyhl2388 {
			if yyj2388 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2388Slc = r.DecodeBytes(yys2388Slc, true, true)
		yys2388 := string(yys2388Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2388 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2388)
		} // end switch yys2388
	} // end for yyj2388
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2391 int
	var yyb2391 bool
	var yyhl2391 bool = l >= 0
	yyj2391++
	if yyhl2391 {
		yyb2391 = yyj2391 > l
	} else {
		yyb2391 = r.CheckBreak()
	}
	if yyb2391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2391++
	if yyhl2391 {
		yyb2391 = yyj2391 > l
	} else {
		yyb2391 = r.CheckBreak()
	}
	if yyb2391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2391++
		if yyhl2391 {
			yyb2391 = yyj2391 > l
		} else {
			yyb2391 = r.CheckBreak()
		}
		if yyb2391 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2391-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2394 := z.EncBinary()
		_ = yym2394
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2395 := !z.EncBinary()
			yy2arr2395 := z.EncBasicHandle().StructToArray
			var yyq2395 [1]bool
			_, _, _ = yysep2395, yyq2395, yy2arr2395
			const yyr2395 bool = false
			yyq2395[0] = len(x.Capacity) != 0
			var yynn2395 int
			if yyr2395 || yy2arr2395 {
				r.EncodeArrayStart(1)
			} else {
				yynn2395 = 0
				for _, b := range yyq2395 {
					if b {
						yynn2395++
					}
				}
				r.EncodeMapStart(yynn2395)
				yynn2395 = 0
			}
			if yyr2395 || yy2arr2395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2395[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2395[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2395 || yy2arr2395 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2397 := z.DecBinary()
	_ = yym2397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2398 := r.ContainerType()
		if yyct2398 == codecSelferValueTypeMap1234 {
			yyl2398 := r.ReadMapStart()
			if yyl2398 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2398, d)
			}
		} else if yyct2398 == codecSelferValueTypeArray1234 {
			yyl2398 := r.ReadArrayStart()
			if yyl2398 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2398, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2399Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2399Slc
	var yyhl2399 bool = l >= 0
	for yyj2399 := 0; ; yyj2399++ {
		if yyhl2399 {
			if yyj2399 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2399Slc = r.DecodeBytes(yys2399Slc, true, true)
		yys2399 := string(yys2399Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2399 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2400 := &x.Capacity
				yyv2400.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2399)
		} // end switch yys2399
	} // end for yyj2399
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2401 int
	var yyb2401 bool
	var yyhl2401 bool = l >= 0
	yyj2401++
	if yyhl2401 {
		yyb2401 = yyj2401 > l
	} else {
		yyb2401 = r.CheckBreak()
	}
	if yyb2401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2402 := &x.Capacity
		yyv2402.CodecDecodeSelf(d)
	}
	for {
		yyj2401++
		if yyhl2401 {
			yyb2401 = yyj2401 > l
		} else {
			yyb2401 = r.CheckBreak()
		}
		if yyb2401 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2401-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2403 := z.EncBinary()
	_ = yym2403
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2404 := z.DecBinary()
	_ = yym2404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2405 := z.EncBinary()
		_ = yym2405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2406 := z.DecBinary()
	_ = yym2406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2407 := z.EncBinary()
		_ = yym2407
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2408 := !z.EncBinary()
			yy2arr2408 := z.EncBasicHandle().StructToArray
			var yyq2408 [5]bool
			_, _, _ = yysep2408, yyq2408, yy2arr2408
			const yyr2408 bool = false
			yyq2408[0] = x.Kind != ""
			yyq2408[1] = x.APIVersion != ""
			yyq2408[2] = true
			yyq2408[3] = true
			yyq2408[4] = true
			var yynn2408 int
			if yyr2408 || yy2arr2408 {
				r.EncodeArrayStart(5)
			} else {
				yynn2408 = 0
				for _, b := range yyq2408 {
					if b {
						yynn2408++
					}
				}
				r.EncodeMapStart(yynn2408)
				yynn2408 = 0
			}
			if yyr2408 || yy2arr2408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2408[0] {
					yym2410 := z.EncBinary()
					_ = yym2410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2408[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2411 := z.EncBinary()
					_ = yym2411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2408 || yy2arr2408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2408[1] {
					yym2413 := z.EncBinary()
					_ = yym2413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2408[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2414 := z.EncBinary()
					_ = yym2414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2408 || yy2arr2408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2408[2] {
					yy2416 := &x.ObjectMeta
					yy2416.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2408[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2417 := &x.ObjectMeta
					yy2417.CodecEncodeSelf(e)
				}
			}
			if yyr2408 || yy2arr2408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2408[3] {
					yy2419 := &x.Spec
					yy2419.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2408[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2420 := &x.Spec
					yy2420.CodecEncodeSelf(e)
				}
			}
			if yyr2408 || yy2arr2408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2408[4] {
					yy2422 := &x.Status
					yy2422.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2408[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2423 := &x.Status
					yy2423.CodecEncodeSelf(e)
				}
			}
			if yyr2408 || yy2arr2408 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2424 := z.DecBinary()
	_ = yym2424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2425 := r.ContainerType()
		if yyct2425 == codecSelferValueTypeMap1234 {
			yyl2425 := r.ReadMapStart()
			if yyl2425 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2425, d)
			}
		} else if yyct2425 == codecSelferValueTypeArray1234 {
			yyl2425 := r.ReadArrayStart()
			if yyl2425 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2425, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2426Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2426Slc
	var yyhl2426 bool = l >= 0
	for yyj2426 := 0; ; yyj2426++ {
		if yyhl2426 {
			if yyj2426 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2426Slc = r.DecodeBytes(yys2426Slc, true, true)
		yys2426 := string(yys2426Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2426 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2429 := &x.ObjectMeta
				yyv2429.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2430 := &x.Spec
				yyv2430.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2431 := &x.Status
				yyv2431.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2426)
		} // end switch yys2426
	} // end for yyj2426
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2432 int
	var yyb2432 bool
	var yyhl2432 bool = l >= 0
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2435 := &x.ObjectMeta
		yyv2435.CodecDecodeSelf(d)
	}
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2436 := &x.Spec
		yyv2436.CodecDecodeSelf(d)
	}
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2437 := &x.Status
		yyv2437.CodecDecodeSelf(d)
	}
	for {
		yyj2432++
		if yyhl2432 {
			yyb2432 = yyj2432 > l
		} else {
			yyb2432 = r.CheckBreak()
		}
		if yyb2432 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2432-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2438 := z.EncBinary()
		_ = yym2438
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2439 := !z.EncBinary()
			yy2arr2439 := z.EncBasicHandle().StructToArray
			var yyq2439 [4]bool
			_, _, _ = yysep2439, yyq2439, yy2arr2439
			const yyr2439 bool = false
			yyq2439[0] = x.Kind != ""
			yyq2439[1] = x.APIVersion != ""
			yyq2439[2] = true
			var yynn2439 int
			if yyr2439 || yy2arr2439 {
				r.EncodeArrayStart(4)
			} else {
				yynn2439 = 1
				for _, b := range yyq2439 {
					if b {
						yynn2439++
					}
				}
				r.EncodeMapStart(yynn2439)
				yynn2439 = 0
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2439[0] {
					yym2441 := z.EncBinary()
					_ = yym2441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2439[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2442 := z.EncBinary()
					_ = yym2442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2439[1] {
					yym2444 := z.EncBinary()
					_ = yym2444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2439[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2445 := z.EncBinary()
					_ = yym2445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2439[2] {
					yy2447 := &x.ListMeta
					yym2448 := z.EncBinary()
					_ = yym2448
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2447) {
					} else {
						z.EncFallback(yy2447)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2439[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2449 := &x.ListMeta
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2449) {
					} else {
						z.EncFallback(yy2449)
					}
				}
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2452 := z.EncBinary()
					_ = yym2452
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2454 := z.DecBinary()
	_ = yym2454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2455 := r.ContainerType()
		if yyct2455 == codecSelferValueTypeMap1234 {
			yyl2455 := r.ReadMapStart()
			if yyl2455 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2455, d)
			}
		} else if yyct2455 == codecSelferValueTypeArray1234 {
			yyl2455 := r.ReadArrayStart()
			if yyl2455 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2455, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2456Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2456Slc
	var yyhl2456 bool = l >= 0
	for yyj2456 := 0; ; yyj2456++ {
		if yyhl2456 {
			if yyj2456 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2456Slc = r.DecodeBytes(yys2456Slc, true, true)
		yys2456 := string(yys2456Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2456 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2459 := &x.ListMeta
				yym2460 := z.DecBinary()
				_ = yym2460
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2459) {
				} else {
					z.DecFallback(yyv2459, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2461 := &x.Items
				yym2462 := z.DecBinary()
				_ = yym2462
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2461), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2456)
		} // end switch yys2456
	} // end for yyj2456
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2463 int
	var yyb2463 bool
	var yyhl2463 bool = l >= 0
	yyj2463++
	if yyhl2463 {
		yyb2463 = yyj2463 > l
	} else {
		yyb2463 = r.CheckBreak()
	}
	if yyb2463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2463++
	if yyhl2463 {
		yyb2463 = yyj2463 > l
	} else {
		yyb2463 = r.CheckBreak()
	}
	if yyb2463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2463++
	if yyhl2463 {
		yyb2463 = yyj2463 > l
	} else {
		yyb2463 = r.CheckBreak()
	}
	if yyb2463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2466 := &x.ListMeta
		yym2467 := z.DecBinary()
		_ = yym2467
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2466) {
		} else {
			z.DecFallback(yyv2466, false)
		}
	}
	yyj2463++
	if yyhl2463 {
		yyb2463 = yyj2463 > l
	} else {
		yyb2463 = r.CheckBreak()
	}
	if yyb2463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2468 := &x.Items
		yym2469 := z.DecBinary()
		_ = yym2469
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2468), d)
		}
	}
	for {
		yyj2463++
		if yyhl2463 {
			yyb2463 = yyj2463 > l
		} else {
			yyb2463 = r.CheckBreak()
		}
		if yyb2463 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2463-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2470 := z.EncBinary()
		_ = yym2470
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2471 := !z.EncBinary()
			yy2arr2471 := z.EncBasicHandle().StructToArray
			var yyq2471 [1]bool
			_, _, _ = yysep2471, yyq2471, yy2arr2471
			const yyr2471 bool = false
			var yynn2471 int
			if yyr2471 || yy2arr2471 {
				r.EncodeArrayStart(1)
			} else {
				yynn2471 = 1
				for _, b := range yyq2471 {
					if b {
						yynn2471++
					}
				}
				r.EncodeMapStart(yynn2471)
				yynn2471 = 0
			}
			if yyr2471 || yy2arr2471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2473 := z.EncBinary()
					_ = yym2473
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2474 := z.EncBinary()
					_ = yym2474
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr2471 || yy2arr2471 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2475 := z.DecBinary()
	_ = yym2475
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2476 := r.ContainerType()
		if yyct2476 == codecSelferValueTypeMap1234 {
			yyl2476 := r.ReadMapStart()
			if yyl2476 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2476, d)
			}
		} else if yyct2476 == codecSelferValueTypeArray1234 {
			yyl2476 := r.ReadArrayStart()
			if yyl2476 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2476, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2477Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2477Slc
	var yyhl2477 bool = l >= 0
	for yyj2477 := 0; ; yyj2477++ {
		if yyhl2477 {
			if yyj2477 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2477Slc = r.DecodeBytes(yys2477Slc, true, true)
		yys2477 := string(yys2477Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2477 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2478 := &x.Finalizers
				yym2479 := z.DecBinary()
				_ = yym2479
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2478), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2477)
		} // end switch yys2477
	} // end for yyj2477
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2480 int
	var yyb2480 bool
	var yyhl2480 bool = l >= 0
	yyj2480++
	if yyhl2480 {
		yyb2480 = yyj2480 > l
	} else {
		yyb2480 = r.CheckBreak()
	}
	if yyb2480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2481 := &x.Finalizers
		yym2482 := z.DecBinary()
		_ = yym2482
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2481), d)
		}
	}
	for {
		yyj2480++
		if yyhl2480 {
			yyb2480 = yyj2480 > l
		} else {
			yyb2480 = r.CheckBreak()
		}
		if yyb2480 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2480-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2483 := z.EncBinary()
	_ = yym2483
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2484 := z.DecBinary()
	_ = yym2484
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2485 := z.EncBinary()
		_ = yym2485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2486 := !z.EncBinary()
			yy2arr2486 := z.EncBasicHandle().StructToArray
			var yyq2486 [1]bool
			_, _, _ = yysep2486, yyq2486, yy2arr2486
			const yyr2486 bool = false
			yyq2486[0] = x.Phase != ""
			var yynn2486 int
			if yyr2486 || yy2arr2486 {
				r.EncodeArrayStart(1)
			} else {
				yynn2486 = 0
				for _, b := range yyq2486 {
					if b {
						yynn2486++
					}
				}
				r.EncodeMapStart(yynn2486)
				yynn2486 = 0
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2486[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2486[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2486 || yy2arr2486 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2488 := z.DecBinary()
	_ = yym2488
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2489 := r.ContainerType()
		if yyct2489 == codecSelferValueTypeMap1234 {
			yyl2489 := r.ReadMapStart()
			if yyl2489 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2489, d)
			}
		} else if yyct2489 == codecSelferValueTypeArray1234 {
			yyl2489 := r.ReadArrayStart()
			if yyl2489 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2489, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2490Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2490Slc
	var yyhl2490 bool = l >= 0
	for yyj2490 := 0; ; yyj2490++ {
		if yyhl2490 {
			if yyj2490 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2490Slc = r.DecodeBytes(yys2490Slc, true, true)
		yys2490 := string(yys2490Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2490 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2490)
		} // end switch yys2490
	} // end for yyj2490
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2492 int
	var yyb2492 bool
	var yyhl2492 bool = l >= 0
	yyj2492++
	if yyhl2492 {
		yyb2492 = yyj2492 > l
	} else {
		yyb2492 = r.CheckBreak()
	}
	if yyb2492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2492++
		if yyhl2492 {
			yyb2492 = yyj2492 > l
		} else {
			yyb2492 = r.CheckBreak()
		}
		if yyb2492 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2492-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2494 := z.EncBinary()
	_ = yym2494
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2495 := z.DecBinary()
	_ = yym2495
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2496 := z.EncBinary()
		_ = yym2496
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2497 := !z.EncBinary()
			yy2arr2497 := z.EncBasicHandle().StructToArray
			var yyq2497 [5]bool
			_, _, _ = yysep2497, yyq2497, yy2arr2497
			const yyr2497 bool = false
			yyq2497[0] = x.Kind != ""
			yyq2497[1] = x.APIVersion != ""
			yyq2497[2] = true
			yyq2497[3] = true
			yyq2497[4] = true
			var yynn2497 int
			if yyr2497 || yy2arr2497 {
				r.EncodeArrayStart(5)
			} else {
				yynn2497 = 0
				for _, b := range yyq2497 {
					if b {
						yynn2497++
					}
				}
				r.EncodeMapStart(yynn2497)
				yynn2497 = 0
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2497[0] {
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2497[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2500 := z.EncBinary()
					_ = yym2500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2497[1] {
					yym2502 := z.EncBinary()
					_ = yym2502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2497[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2503 := z.EncBinary()
					_ = yym2503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2497[2] {
					yy2505 := &x.ObjectMeta
					yy2505.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2497[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2506 := &x.ObjectMeta
					yy2506.CodecEncodeSelf(e)
				}
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2497[3] {
					yy2508 := &x.Spec
					yy2508.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2497[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2509 := &x.Spec
					yy2509.CodecEncodeSelf(e)
				}
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2497[4] {
					yy2511 := &x.Status
					yy2511.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2497[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2512 := &x.Status
					yy2512.CodecEncodeSelf(e)
				}
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2513 := z.DecBinary()
	_ = yym2513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2514 := r.ContainerType()
		if yyct2514 == codecSelferValueTypeMap1234 {
			yyl2514 := r.ReadMapStart()
			if yyl2514 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2514, d)
			}
		} else if yyct2514 == codecSelferValueTypeArray1234 {
			yyl2514 := r.ReadArrayStart()
			if yyl2514 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2515Slc
	var yyhl2515 bool = l >= 0
	for yyj2515 := 0; ; yyj2515++ {
		if yyhl2515 {
			if yyj2515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2515Slc = r.DecodeBytes(yys2515Slc, true, true)
		yys2515 := string(yys2515Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2515 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2518 := &x.ObjectMeta
				yyv2518.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2519 := &x.Spec
				yyv2519.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2520 := &x.Status
				yyv2520.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2515)
		} // end switch yys2515
	} // end for yyj2515
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2521 int
	var yyb2521 bool
	var yyhl2521 bool = l >= 0
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2524 := &x.ObjectMeta
		yyv2524.CodecDecodeSelf(d)
	}
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2525 := &x.Spec
		yyv2525.CodecDecodeSelf(d)
	}
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2526 := &x.Status
		yyv2526.CodecDecodeSelf(d)
	}
	for {
		yyj2521++
		if yyhl2521 {
			yyb2521 = yyj2521 > l
		} else {
			yyb2521 = r.CheckBreak()
		}
		if yyb2521 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2521-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2527 := z.EncBinary()
		_ = yym2527
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2528 := !z.EncBinary()
			yy2arr2528 := z.EncBasicHandle().StructToArray
			var yyq2528 [4]bool
			_, _, _ = yysep2528, yyq2528, yy2arr2528
			const yyr2528 bool = false
			yyq2528[0] = x.Kind != ""
			yyq2528[1] = x.APIVersion != ""
			yyq2528[2] = true
			var yynn2528 int
			if yyr2528 || yy2arr2528 {
				r.EncodeArrayStart(4)
			} else {
				yynn2528 = 1
				for _, b := range yyq2528 {
					if b {
						yynn2528++
					}
				}
				r.EncodeMapStart(yynn2528)
				yynn2528 = 0
			}
			if yyr2528 || yy2arr2528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2528[0] {
					yym2530 := z.EncBinary()
					_ = yym2530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2528[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2531 := z.EncBinary()
					_ = yym2531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2528 || yy2arr2528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2528[1] {
					yym2533 := z.EncBinary()
					_ = yym2533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2528[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2534 := z.EncBinary()
					_ = yym2534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2528 || yy2arr2528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2528[2] {
					yy2536 := &x.ListMeta
					yym2537 := z.EncBinary()
					_ = yym2537
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2536) {
					} else {
						z.EncFallback(yy2536)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2528[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2538 := &x.ListMeta
					yym2539 := z.EncBinary()
					_ = yym2539
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2538) {
					} else {
						z.EncFallback(yy2538)
					}
				}
			}
			if yyr2528 || yy2arr2528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2542 := z.EncBinary()
					_ = yym2542
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2528 || yy2arr2528 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2543 := z.DecBinary()
	_ = yym2543
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2544 := r.ContainerType()
		if yyct2544 == codecSelferValueTypeMap1234 {
			yyl2544 := r.ReadMapStart()
			if yyl2544 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2544, d)
			}
		} else if yyct2544 == codecSelferValueTypeArray1234 {
			yyl2544 := r.ReadArrayStart()
			if yyl2544 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2544, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2545Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2545Slc
	var yyhl2545 bool = l >= 0
	for yyj2545 := 0; ; yyj2545++ {
		if yyhl2545 {
			if yyj2545 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2545Slc = r.DecodeBytes(yys2545Slc, true, true)
		yys2545 := string(yys2545Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2545 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2548 := &x.ListMeta
				yym2549 := z.DecBinary()
				_ = yym2549
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2548) {
				} else {
					z.DecFallback(yyv2548, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2550 := &x.Items
				yym2551 := z.DecBinary()
				_ = yym2551
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2550), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2545)
		} // end switch yys2545
	} // end for yyj2545
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2552 int
	var yyb2552 bool
	var yyhl2552 bool = l >= 0
	yyj2552++
	if yyhl2552 {
		yyb2552 = yyj2552 > l
	} else {
		yyb2552 = r.CheckBreak()
	}
	if yyb2552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2552++
	if yyhl2552 {
		yyb2552 = yyj2552 > l
	} else {
		yyb2552 = r.CheckBreak()
	}
	if yyb2552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2552++
	if yyhl2552 {
		yyb2552 = yyj2552 > l
	} else {
		yyb2552 = r.CheckBreak()
	}
	if yyb2552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2555 := &x.ListMeta
		yym2556 := z.DecBinary()
		_ = yym2556
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2555) {
		} else {
			z.DecFallback(yyv2555, false)
		}
	}
	yyj2552++
	if yyhl2552 {
		yyb2552 = yyj2552 > l
	} else {
		yyb2552 = r.CheckBreak()
	}
	if yyb2552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2557 := &x.Items
		yym2558 := z.DecBinary()
		_ = yym2558
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2557), d)
		}
	}
	for {
		yyj2552++
		if yyhl2552 {
			yyb2552 = yyj2552 > l
		} else {
			yyb2552 = r.CheckBreak()
		}
		if yyb2552 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2552-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2559 := z.EncBinary()
		_ = yym2559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2560 := !z.EncBinary()
			yy2arr2560 := z.EncBasicHandle().StructToArray
			var yyq2560 [4]bool
			_, _, _ = yysep2560, yyq2560, yy2arr2560
			const yyr2560 bool = false
			yyq2560[0] = x.Kind != ""
			yyq2560[1] = x.APIVersion != ""
			yyq2560[2] = true
			var yynn2560 int
			if yyr2560 || yy2arr2560 {
				r.EncodeArrayStart(4)
			} else {
				yynn2560 = 1
				for _, b := range yyq2560 {
					if b {
						yynn2560++
					}
				}
				r.EncodeMapStart(yynn2560)
				yynn2560 = 0
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2560[0] {
					yym2562 := z.EncBinary()
					_ = yym2562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2560[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2560[1] {
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2560[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2566 := z.EncBinary()
					_ = yym2566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2560[2] {
					yy2568 := &x.ObjectMeta
					yy2568.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2560[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2569 := &x.ObjectMeta
					yy2569.CodecEncodeSelf(e)
				}
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2571 := &x.Target
				yy2571.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2572 := &x.Target
				yy2572.CodecEncodeSelf(e)
			}
			if yyr2560 || yy2arr2560 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2573 := z.DecBinary()
	_ = yym2573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2574 := r.ContainerType()
		if yyct2574 == codecSelferValueTypeMap1234 {
			yyl2574 := r.ReadMapStart()
			if yyl2574 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2574, d)
			}
		} else if yyct2574 == codecSelferValueTypeArray1234 {
			yyl2574 := r.ReadArrayStart()
			if yyl2574 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2575Slc
	var yyhl2575 bool = l >= 0
	for yyj2575 := 0; ; yyj2575++ {
		if yyhl2575 {
			if yyj2575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2575Slc = r.DecodeBytes(yys2575Slc, true, true)
		yys2575 := string(yys2575Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2575 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2578 := &x.ObjectMeta
				yyv2578.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2579 := &x.Target
				yyv2579.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2575)
		} // end switch yys2575
	} // end for yyj2575
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2580 int
	var yyb2580 bool
	var yyhl2580 bool = l >= 0
	yyj2580++
	if yyhl2580 {
		yyb2580 = yyj2580 > l
	} else {
		yyb2580 = r.CheckBreak()
	}
	if yyb2580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2580++
	if yyhl2580 {
		yyb2580 = yyj2580 > l
	} else {
		yyb2580 = r.CheckBreak()
	}
	if yyb2580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2580++
	if yyhl2580 {
		yyb2580 = yyj2580 > l
	} else {
		yyb2580 = r.CheckBreak()
	}
	if yyb2580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2583 := &x.ObjectMeta
		yyv2583.CodecDecodeSelf(d)
	}
	yyj2580++
	if yyhl2580 {
		yyb2580 = yyj2580 > l
	} else {
		yyb2580 = r.CheckBreak()
	}
	if yyb2580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2584 := &x.Target
		yyv2584.CodecDecodeSelf(d)
	}
	for {
		yyj2580++
		if yyhl2580 {
			yyb2580 = yyj2580 > l
		} else {
			yyb2580 = r.CheckBreak()
		}
		if yyb2580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2585 := z.EncBinary()
		_ = yym2585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2586 := !z.EncBinary()
			yy2arr2586 := z.EncBasicHandle().StructToArray
			var yyq2586 [3]bool
			_, _, _ = yysep2586, yyq2586, yy2arr2586
			const yyr2586 bool = false
			yyq2586[0] = x.Kind != ""
			yyq2586[1] = x.APIVersion != ""
			var yynn2586 int
			if yyr2586 || yy2arr2586 {
				r.EncodeArrayStart(3)
			} else {
				yynn2586 = 1
				for _, b := range yyq2586 {
					if b {
						yynn2586++
					}
				}
				r.EncodeMapStart(yynn2586)
				yynn2586 = 0
			}
			if yyr2586 || yy2arr2586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2586[0] {
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2586[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2586 || yy2arr2586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2586[1] {
					yym2591 := z.EncBinary()
					_ = yym2591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2586[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2592 := z.EncBinary()
					_ = yym2592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2586 || yy2arr2586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2594 := *x.GracePeriodSeconds
					yym2595 := z.EncBinary()
					_ = yym2595
					if false {
					} else {
						r.EncodeInt(int64(yy2594))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2596 := *x.GracePeriodSeconds
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else {
						r.EncodeInt(int64(yy2596))
					}
				}
			}
			if yyr2586 || yy2arr2586 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2598 := z.DecBinary()
	_ = yym2598
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2599 := r.ContainerType()
		if yyct2599 == codecSelferValueTypeMap1234 {
			yyl2599 := r.ReadMapStart()
			if yyl2599 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2599, d)
			}
		} else if yyct2599 == codecSelferValueTypeArray1234 {
			yyl2599 := r.ReadArrayStart()
			if yyl2599 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2599, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2600Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2600Slc
	var yyhl2600 bool = l >= 0
	for yyj2600 := 0; ; yyj2600++ {
		if yyhl2600 {
			if yyj2600 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2600Slc = r.DecodeBytes(yys2600Slc, true, true)
		yys2600 := string(yys2600Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2600 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2604 := z.DecBinary()
				_ = yym2604
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2600)
		} // end switch yys2600
	} // end for yyj2600
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2605 int
	var yyb2605 bool
	var yyhl2605 bool = l >= 0
	yyj2605++
	if yyhl2605 {
		yyb2605 = yyj2605 > l
	} else {
		yyb2605 = r.CheckBreak()
	}
	if yyb2605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2605++
	if yyhl2605 {
		yyb2605 = yyj2605 > l
	} else {
		yyb2605 = r.CheckBreak()
	}
	if yyb2605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2605++
	if yyhl2605 {
		yyb2605 = yyj2605 > l
	} else {
		yyb2605 = r.CheckBreak()
	}
	if yyb2605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2609 := z.DecBinary()
		_ = yym2609
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2605++
		if yyhl2605 {
			yyb2605 = yyj2605 > l
		} else {
			yyb2605 = r.CheckBreak()
		}
		if yyb2605 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2605-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2610 := z.EncBinary()
		_ = yym2610
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2611 := !z.EncBinary()
			yy2arr2611 := z.EncBasicHandle().StructToArray
			var yyq2611 [10]bool
			_, _, _ = yysep2611, yyq2611, yy2arr2611
			const yyr2611 bool = false
			yyq2611[0] = x.Kind != ""
			yyq2611[1] = x.APIVersion != ""
			var yynn2611 int
			if yyr2611 || yy2arr2611 {
				r.EncodeArrayStart(10)
			} else {
				yynn2611 = 8
				for _, b := range yyq2611 {
					if b {
						yynn2611++
					}
				}
				r.EncodeMapStart(yynn2611)
				yynn2611 = 0
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2611[0] {
					yym2613 := z.EncBinary()
					_ = yym2613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2611[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2614 := z.EncBinary()
					_ = yym2614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2611[1] {
					yym2616 := z.EncBinary()
					_ = yym2616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2611[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2619 := z.EncBinary()
				_ = yym2619
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2620 := z.EncBinary()
				_ = yym2620
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2622 := z.EncBinary()
				_ = yym2622
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2623 := z.EncBinary()
				_ = yym2623
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2625 := z.EncBinary()
				_ = yym2625
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2626 := z.EncBinary()
				_ = yym2626
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2628 := *x.SinceSeconds
					yym2629 := z.EncBinary()
					_ = yym2629
					if false {
					} else {
						r.EncodeInt(int64(yy2628))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2630 := *x.SinceSeconds
					yym2631 := z.EncBinary()
					_ = yym2631
					if false {
					} else {
						r.EncodeInt(int64(yy2630))
					}
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2633 := z.EncBinary()
					_ = yym2633
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2633 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2633 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2634 := z.EncBinary()
					_ = yym2634
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2634 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2634 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2636 := z.EncBinary()
				_ = yym2636
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2637 := z.EncBinary()
				_ = yym2637
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2639 := *x.TailLines
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						r.EncodeInt(int64(yy2639))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2641 := *x.TailLines
					yym2642 := z.EncBinary()
					_ = yym2642
					if false {
					} else {
						r.EncodeInt(int64(yy2641))
					}
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2644 := *x.LimitBytes
					yym2645 := z.EncBinary()
					_ = yym2645
					if false {
					} else {
						r.EncodeInt(int64(yy2644))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2646 := *x.LimitBytes
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else {
						r.EncodeInt(int64(yy2646))
					}
				}
			}
			if yyr2611 || yy2arr2611 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2648 := z.DecBinary()
	_ = yym2648
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2649 := r.ContainerType()
		if yyct2649 == codecSelferValueTypeMap1234 {
			yyl2649 := r.ReadMapStart()
			if yyl2649 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2649, d)
			}
		} else if yyct2649 == codecSelferValueTypeArray1234 {
			yyl2649 := r.ReadArrayStart()
			if yyl2649 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2649, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2650Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2650Slc
	var yyhl2650 bool = l >= 0
	for yyj2650 := 0; ; yyj2650++ {
		if yyhl2650 {
			if yyj2650 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2650Slc = r.DecodeBytes(yys2650Slc, true, true)
		yys2650 := string(yys2650Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2650 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2657 := z.DecBinary()
				_ = yym2657
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2659 := z.DecBinary()
				_ = yym2659
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2659 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2659 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2662 := z.DecBinary()
				_ = yym2662
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2664 := z.DecBinary()
				_ = yym2664
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2650)
		} // end switch yys2650
	} // end for yyj2650
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2665 int
	var yyb2665 bool
	var yyhl2665 bool = l >= 0
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2672 := z.DecBinary()
		_ = yym2672
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2674 := z.DecBinary()
		_ = yym2674
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2674 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2674 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2677 := z.DecBinary()
		_ = yym2677
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2679 := z.DecBinary()
		_ = yym2679
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2665++
		if yyhl2665 {
			yyb2665 = yyj2665 > l
		} else {
			yyb2665 = r.CheckBreak()
		}
		if yyb2665 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2665-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2680 := z.EncBinary()
		_ = yym2680
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2681 := !z.EncBinary()
			yy2arr2681 := z.EncBasicHandle().StructToArray
			var yyq2681 [7]bool
			_, _, _ = yysep2681, yyq2681, yy2arr2681
			const yyr2681 bool = false
			yyq2681[0] = x.Kind != ""
			yyq2681[1] = x.APIVersion != ""
			yyq2681[2] = x.Stdin != false
			yyq2681[3] = x.Stdout != false
			yyq2681[4] = x.Stderr != false
			yyq2681[5] = x.TTY != false
			yyq2681[6] = x.Container != ""
			var yynn2681 int
			if yyr2681 || yy2arr2681 {
				r.EncodeArrayStart(7)
			} else {
				yynn2681 = 0
				for _, b := range yyq2681 {
					if b {
						yynn2681++
					}
				}
				r.EncodeMapStart(yynn2681)
				yynn2681 = 0
			}
			if yyr2681 || yy2arr2681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2681[0] {
					yym2683 := z.EncBinary()
					_ = yym2683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2681[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2684 := z.EncBinary()
					_ = yym2684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2681 || yy2arr2681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2681[1] {
					yym2686 := z.EncBinary()
					_ = yym2686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2681[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2687 := z.EncBinary()
					_ = yym2687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2681 || yy2arr2681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2681[2] {
					yym2689 := z.EncBinary()
					_ = yym2689
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2681[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2690 := z.EncBinary()
					_ = yym2690
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2681 || yy2arr2681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2681[3] {
					yym2692 := z.EncBinary()
					_ = yym2692
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2681[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2693 := z.EncBinary()
					_ = yym2693
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2681 || yy2arr2681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2681[4] {
					yym2695 := z.EncBinary()
					_ = yym2695
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2681[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2681 || yy2arr2681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2681[5] {
					yym2698 := z.EncBinary()
					_ = yym2698
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2681[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2681 || yy2arr2681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2681[6] {
					yym2701 := z.EncBinary()
					_ = yym2701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2681[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2681 || yy2arr2681 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2703 := z.DecBinary()
	_ = yym2703
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2704 := r.ContainerType()
		if yyct2704 == codecSelferValueTypeMap1234 {
			yyl2704 := r.ReadMapStart()
			if yyl2704 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2704, d)
			}
		} else if yyct2704 == codecSelferValueTypeArray1234 {
			yyl2704 := r.ReadArrayStart()
			if yyl2704 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2704, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2705Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2705Slc
	var yyhl2705 bool = l >= 0
	for yyj2705 := 0; ; yyj2705++ {
		if yyhl2705 {
			if yyj2705 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2705Slc = r.DecodeBytes(yys2705Slc, true, true)
		yys2705 := string(yys2705Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2705 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2705)
		} // end switch yys2705
	} // end for yyj2705
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2713 int
	var yyb2713 bool
	var yyhl2713 bool = l >= 0
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2713++
		if yyhl2713 {
			yyb2713 = yyj2713 > l
		} else {
			yyb2713 = r.CheckBreak()
		}
		if yyb2713 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2713-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2721 := z.EncBinary()
		_ = yym2721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2722 := !z.EncBinary()
			yy2arr2722 := z.EncBasicHandle().StructToArray
			var yyq2722 [8]bool
			_, _, _ = yysep2722, yyq2722, yy2arr2722
			const yyr2722 bool = false
			yyq2722[0] = x.Kind != ""
			yyq2722[1] = x.APIVersion != ""
			var yynn2722 int
			if yyr2722 || yy2arr2722 {
				r.EncodeArrayStart(8)
			} else {
				yynn2722 = 6
				for _, b := range yyq2722 {
					if b {
						yynn2722++
					}
				}
				r.EncodeMapStart(yynn2722)
				yynn2722 = 0
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2722[0] {
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2722[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2725 := z.EncBinary()
					_ = yym2725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2722[1] {
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2722[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2730 := z.EncBinary()
				_ = yym2730
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2731 := z.EncBinary()
				_ = yym2731
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2733 := z.EncBinary()
				_ = yym2733
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2734 := z.EncBinary()
				_ = yym2734
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2736 := z.EncBinary()
				_ = yym2736
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2737 := z.EncBinary()
				_ = yym2737
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2739 := z.EncBinary()
				_ = yym2739
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2740 := z.EncBinary()
				_ = yym2740
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2742 := z.EncBinary()
				_ = yym2742
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2743 := z.EncBinary()
				_ = yym2743
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2745 := z.EncBinary()
					_ = yym2745
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2747 := z.DecBinary()
	_ = yym2747
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2748 := r.ContainerType()
		if yyct2748 == codecSelferValueTypeMap1234 {
			yyl2748 := r.ReadMapStart()
			if yyl2748 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2748, d)
			}
		} else if yyct2748 == codecSelferValueTypeArray1234 {
			yyl2748 := r.ReadArrayStart()
			if yyl2748 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2748, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2749Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2749Slc
	var yyhl2749 bool = l >= 0
	for yyj2749 := 0; ; yyj2749++ {
		if yyhl2749 {
			if yyj2749 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2749Slc = r.DecodeBytes(yys2749Slc, true, true)
		yys2749 := string(yys2749Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2749 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2757 := &x.Command
				yym2758 := z.DecBinary()
				_ = yym2758
				if false {
				} else {
					z.F.DecSliceStringX(yyv2757, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2749)
		} // end switch yys2749
	} // end for yyj2749
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2759 int
	var yyb2759 bool
	var yyhl2759 bool = l >= 0
	yyj2759++
	if yyhl2759 {
		yyb2759 = yyj2759 > l
	} else {
		yyb2759 = r.CheckBreak()
	}
	if yyb2759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2759++
	if yyhl2759 {
		yyb2759 = yyj2759 > l
	} else {
		yyb2759 = r.CheckBreak()
	}
	if yyb2759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2759++
	if yyhl2759 {
		yyb2759 = yyj2759 > l
	} else {
		yyb2759 = r.CheckBreak()
	}
	if yyb2759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2759++
	if yyhl2759 {
		yyb2759 = yyj2759 > l
	} else {
		yyb2759 = r.CheckBreak()
	}
	if yyb2759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2759++
	if yyhl2759 {
		yyb2759 = yyj2759 > l
	} else {
		yyb2759 = r.CheckBreak()
	}
	if yyb2759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2759++
	if yyhl2759 {
		yyb2759 = yyj2759 > l
	} else {
		yyb2759 = r.CheckBreak()
	}
	if yyb2759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2759++
	if yyhl2759 {
		yyb2759 = yyj2759 > l
	} else {
		yyb2759 = r.CheckBreak()
	}
	if yyb2759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2759++
	if yyhl2759 {
		yyb2759 = yyj2759 > l
	} else {
		yyb2759 = r.CheckBreak()
	}
	if yyb2759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2767 := &x.Command
		yym2768 := z.DecBinary()
		_ = yym2768
		if false {
		} else {
			z.F.DecSliceStringX(yyv2767, false, d)
		}
	}
	for {
		yyj2759++
		if yyhl2759 {
			yyb2759 = yyj2759 > l
		} else {
			yyb2759 = r.CheckBreak()
		}
		if yyb2759 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2759-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2769 := z.EncBinary()
		_ = yym2769
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2770 := !z.EncBinary()
			yy2arr2770 := z.EncBasicHandle().StructToArray
			var yyq2770 [3]bool
			_, _, _ = yysep2770, yyq2770, yy2arr2770
			const yyr2770 bool = false
			yyq2770[0] = x.Kind != ""
			yyq2770[1] = x.APIVersion != ""
			var yynn2770 int
			if yyr2770 || yy2arr2770 {
				r.EncodeArrayStart(3)
			} else {
				yynn2770 = 1
				for _, b := range yyq2770 {
					if b {
						yynn2770++
					}
				}
				r.EncodeMapStart(yynn2770)
				yynn2770 = 0
			}
			if yyr2770 || yy2arr2770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2770[0] {
					yym2772 := z.EncBinary()
					_ = yym2772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2770[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2773 := z.EncBinary()
					_ = yym2773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2770 || yy2arr2770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2770[1] {
					yym2775 := z.EncBinary()
					_ = yym2775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2770[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2776 := z.EncBinary()
					_ = yym2776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2770 || yy2arr2770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2778 := z.EncBinary()
				_ = yym2778
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2779 := z.EncBinary()
				_ = yym2779
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr2770 || yy2arr2770 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2780 := z.DecBinary()
	_ = yym2780
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2781 := r.ContainerType()
		if yyct2781 == codecSelferValueTypeMap1234 {
			yyl2781 := r.ReadMapStart()
			if yyl2781 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2781, d)
			}
		} else if yyct2781 == codecSelferValueTypeArray1234 {
			yyl2781 := r.ReadArrayStart()
			if yyl2781 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2781, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2782Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2782Slc
	var yyhl2782 bool = l >= 0
	for yyj2782 := 0; ; yyj2782++ {
		if yyhl2782 {
			if yyj2782 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2782Slc = r.DecodeBytes(yys2782Slc, true, true)
		yys2782 := string(yys2782Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2782 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2782)
		} // end switch yys2782
	} // end for yyj2782
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2786 int
	var yyb2786 bool
	var yyhl2786 bool = l >= 0
	yyj2786++
	if yyhl2786 {
		yyb2786 = yyj2786 > l
	} else {
		yyb2786 = r.CheckBreak()
	}
	if yyb2786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2786++
	if yyhl2786 {
		yyb2786 = yyj2786 > l
	} else {
		yyb2786 = r.CheckBreak()
	}
	if yyb2786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2786++
	if yyhl2786 {
		yyb2786 = yyj2786 > l
	} else {
		yyb2786 = r.CheckBreak()
	}
	if yyb2786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2786++
		if yyhl2786 {
			yyb2786 = yyj2786 > l
		} else {
			yyb2786 = r.CheckBreak()
		}
		if yyb2786 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2786-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2790 := z.EncBinary()
		_ = yym2790
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2791 := !z.EncBinary()
			yy2arr2791 := z.EncBasicHandle().StructToArray
			var yyq2791 [7]bool
			_, _, _ = yysep2791, yyq2791, yy2arr2791
			const yyr2791 bool = false
			yyq2791[0] = x.Kind != ""
			yyq2791[1] = x.Namespace != ""
			yyq2791[2] = x.Name != ""
			yyq2791[3] = x.UID != ""
			yyq2791[4] = x.APIVersion != ""
			yyq2791[5] = x.ResourceVersion != ""
			yyq2791[6] = x.FieldPath != ""
			var yynn2791 int
			if yyr2791 || yy2arr2791 {
				r.EncodeArrayStart(7)
			} else {
				yynn2791 = 0
				for _, b := range yyq2791 {
					if b {
						yynn2791++
					}
				}
				r.EncodeMapStart(yynn2791)
				yynn2791 = 0
			}
			if yyr2791 || yy2arr2791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2791[0] {
					yym2793 := z.EncBinary()
					_ = yym2793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2791[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2794 := z.EncBinary()
					_ = yym2794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2791 || yy2arr2791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2791[1] {
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2791[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2791 || yy2arr2791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2791[2] {
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2791[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2800 := z.EncBinary()
					_ = yym2800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2791 || yy2arr2791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2791[3] {
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2791[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2803 := z.EncBinary()
					_ = yym2803
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2791 || yy2arr2791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2791[4] {
					yym2805 := z.EncBinary()
					_ = yym2805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2791[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2806 := z.EncBinary()
					_ = yym2806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2791 || yy2arr2791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2791[5] {
					yym2808 := z.EncBinary()
					_ = yym2808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2791[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2791 || yy2arr2791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2791[6] {
					yym2811 := z.EncBinary()
					_ = yym2811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2791[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2812 := z.EncBinary()
					_ = yym2812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr2791 || yy2arr2791 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2813 := z.DecBinary()
	_ = yym2813
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2814 := r.ContainerType()
		if yyct2814 == codecSelferValueTypeMap1234 {
			yyl2814 := r.ReadMapStart()
			if yyl2814 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2814, d)
			}
		} else if yyct2814 == codecSelferValueTypeArray1234 {
			yyl2814 := r.ReadArrayStart()
			if yyl2814 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2814, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2815Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2815Slc
	var yyhl2815 bool = l >= 0
	for yyj2815 := 0; ; yyj2815++ {
		if yyhl2815 {
			if yyj2815 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2815Slc = r.DecodeBytes(yys2815Slc, true, true)
		yys2815 := string(yys2815Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2815 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2815)
		} // end switch yys2815
	} // end for yyj2815
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2823 int
	var yyb2823 bool
	var yyhl2823 bool = l >= 0
	yyj2823++
	if yyhl2823 {
		yyb2823 = yyj2823 > l
	} else {
		yyb2823 = r.CheckBreak()
	}
	if yyb2823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2823++
	if yyhl2823 {
		yyb2823 = yyj2823 > l
	} else {
		yyb2823 = r.CheckBreak()
	}
	if yyb2823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2823++
	if yyhl2823 {
		yyb2823 = yyj2823 > l
	} else {
		yyb2823 = r.CheckBreak()
	}
	if yyb2823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2823++
	if yyhl2823 {
		yyb2823 = yyj2823 > l
	} else {
		yyb2823 = r.CheckBreak()
	}
	if yyb2823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2823++
	if yyhl2823 {
		yyb2823 = yyj2823 > l
	} else {
		yyb2823 = r.CheckBreak()
	}
	if yyb2823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2823++
	if yyhl2823 {
		yyb2823 = yyj2823 > l
	} else {
		yyb2823 = r.CheckBreak()
	}
	if yyb2823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2823++
	if yyhl2823 {
		yyb2823 = yyj2823 > l
	} else {
		yyb2823 = r.CheckBreak()
	}
	if yyb2823 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2823++
		if yyhl2823 {
			yyb2823 = yyj2823 > l
		} else {
			yyb2823 = r.CheckBreak()
		}
		if yyb2823 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2823-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2831 := z.EncBinary()
		_ = yym2831
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2832 := !z.EncBinary()
			yy2arr2832 := z.EncBasicHandle().StructToArray
			var yyq2832 [1]bool
			_, _, _ = yysep2832, yyq2832, yy2arr2832
			const yyr2832 bool = false
			var yynn2832 int
			if yyr2832 || yy2arr2832 {
				r.EncodeArrayStart(1)
			} else {
				yynn2832 = 1
				for _, b := range yyq2832 {
					if b {
						yynn2832++
					}
				}
				r.EncodeMapStart(yynn2832)
				yynn2832 = 0
			}
			if yyr2832 || yy2arr2832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2834 := z.EncBinary()
				_ = yym2834
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2835 := z.EncBinary()
				_ = yym2835
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2832 || yy2arr2832 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2836 := z.DecBinary()
	_ = yym2836
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2837 := r.ContainerType()
		if yyct2837 == codecSelferValueTypeMap1234 {
			yyl2837 := r.ReadMapStart()
			if yyl2837 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2837, d)
			}
		} else if yyct2837 == codecSelferValueTypeArray1234 {
			yyl2837 := r.ReadArrayStart()
			if yyl2837 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2837, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2838Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2838Slc
	var yyhl2838 bool = l >= 0
	for yyj2838 := 0; ; yyj2838++ {
		if yyhl2838 {
			if yyj2838 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2838Slc = r.DecodeBytes(yys2838Slc, true, true)
		yys2838 := string(yys2838Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2838 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2838)
		} // end switch yys2838
	} // end for yyj2838
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2840 int
	var yyb2840 bool
	var yyhl2840 bool = l >= 0
	yyj2840++
	if yyhl2840 {
		yyb2840 = yyj2840 > l
	} else {
		yyb2840 = r.CheckBreak()
	}
	if yyb2840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2840++
		if yyhl2840 {
			yyb2840 = yyj2840 > l
		} else {
			yyb2840 = r.CheckBreak()
		}
		if yyb2840 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2840-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2842 := z.EncBinary()
		_ = yym2842
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2843 := !z.EncBinary()
			yy2arr2843 := z.EncBasicHandle().StructToArray
			var yyq2843 [3]bool
			_, _, _ = yysep2843, yyq2843, yy2arr2843
			const yyr2843 bool = false
			yyq2843[0] = x.Kind != ""
			yyq2843[1] = x.APIVersion != ""
			yyq2843[2] = true
			var yynn2843 int
			if yyr2843 || yy2arr2843 {
				r.EncodeArrayStart(3)
			} else {
				yynn2843 = 0
				for _, b := range yyq2843 {
					if b {
						yynn2843++
					}
				}
				r.EncodeMapStart(yynn2843)
				yynn2843 = 0
			}
			if yyr2843 || yy2arr2843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2843[0] {
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2843[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2846 := z.EncBinary()
					_ = yym2846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2843 || yy2arr2843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2843[1] {
					yym2848 := z.EncBinary()
					_ = yym2848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2843[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2849 := z.EncBinary()
					_ = yym2849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2843 || yy2arr2843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2843[2] {
					yy2851 := &x.Reference
					yy2851.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2843[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2852 := &x.Reference
					yy2852.CodecEncodeSelf(e)
				}
			}
			if yyr2843 || yy2arr2843 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2853 := z.DecBinary()
	_ = yym2853
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2854 := r.ContainerType()
		if yyct2854 == codecSelferValueTypeMap1234 {
			yyl2854 := r.ReadMapStart()
			if yyl2854 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2854, d)
			}
		} else if yyct2854 == codecSelferValueTypeArray1234 {
			yyl2854 := r.ReadArrayStart()
			if yyl2854 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2854, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2855Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2855Slc
	var yyhl2855 bool = l >= 0
	for yyj2855 := 0; ; yyj2855++ {
		if yyhl2855 {
			if yyj2855 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2855Slc = r.DecodeBytes(yys2855Slc, true, true)
		yys2855 := string(yys2855Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2855 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2858 := &x.Reference
				yyv2858.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2855)
		} // end switch yys2855
	} // end for yyj2855
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2859 int
	var yyb2859 bool
	var yyhl2859 bool = l >= 0
	yyj2859++
	if yyhl2859 {
		yyb2859 = yyj2859 > l
	} else {
		yyb2859 = r.CheckBreak()
	}
	if yyb2859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2859++
	if yyhl2859 {
		yyb2859 = yyj2859 > l
	} else {
		yyb2859 = r.CheckBreak()
	}
	if yyb2859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2859++
	if yyhl2859 {
		yyb2859 = yyj2859 > l
	} else {
		yyb2859 = r.CheckBreak()
	}
	if yyb2859 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2862 := &x.Reference
		yyv2862.CodecDecodeSelf(d)
	}
	for {
		yyj2859++
		if yyhl2859 {
			yyb2859 = yyj2859 > l
		} else {
			yyb2859 = r.CheckBreak()
		}
		if yyb2859 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2859-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2863 := z.EncBinary()
		_ = yym2863
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2864 := !z.EncBinary()
			yy2arr2864 := z.EncBasicHandle().StructToArray
			var yyq2864 [2]bool
			_, _, _ = yysep2864, yyq2864, yy2arr2864
			const yyr2864 bool = false
			yyq2864[0] = x.Component != ""
			yyq2864[1] = x.Host != ""
			var yynn2864 int
			if yyr2864 || yy2arr2864 {
				r.EncodeArrayStart(2)
			} else {
				yynn2864 = 0
				for _, b := range yyq2864 {
					if b {
						yynn2864++
					}
				}
				r.EncodeMapStart(yynn2864)
				yynn2864 = 0
			}
			if yyr2864 || yy2arr2864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2864[0] {
					yym2866 := z.EncBinary()
					_ = yym2866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2864[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2867 := z.EncBinary()
					_ = yym2867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2864 || yy2arr2864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2864[1] {
					yym2869 := z.EncBinary()
					_ = yym2869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2864[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2870 := z.EncBinary()
					_ = yym2870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr2864 || yy2arr2864 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2871 := z.DecBinary()
	_ = yym2871
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2872 := r.ContainerType()
		if yyct2872 == codecSelferValueTypeMap1234 {
			yyl2872 := r.ReadMapStart()
			if yyl2872 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2872, d)
			}
		} else if yyct2872 == codecSelferValueTypeArray1234 {
			yyl2872 := r.ReadArrayStart()
			if yyl2872 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2872, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2873Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2873Slc
	var yyhl2873 bool = l >= 0
	for yyj2873 := 0; ; yyj2873++ {
		if yyhl2873 {
			if yyj2873 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2873Slc = r.DecodeBytes(yys2873Slc, true, true)
		yys2873 := string(yys2873Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2873 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2873)
		} // end switch yys2873
	} // end for yyj2873
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2876 int
	var yyb2876 bool
	var yyhl2876 bool = l >= 0
	yyj2876++
	if yyhl2876 {
		yyb2876 = yyj2876 > l
	} else {
		yyb2876 = r.CheckBreak()
	}
	if yyb2876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2876++
	if yyhl2876 {
		yyb2876 = yyj2876 > l
	} else {
		yyb2876 = r.CheckBreak()
	}
	if yyb2876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2876++
		if yyhl2876 {
			yyb2876 = yyj2876 > l
		} else {
			yyb2876 = r.CheckBreak()
		}
		if yyb2876 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2876-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2879 := z.EncBinary()
		_ = yym2879
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2880 := !z.EncBinary()
			yy2arr2880 := z.EncBasicHandle().StructToArray
			var yyq2880 [11]bool
			_, _, _ = yysep2880, yyq2880, yy2arr2880
			const yyr2880 bool = false
			yyq2880[0] = x.Kind != ""
			yyq2880[1] = x.APIVersion != ""
			yyq2880[2] = true
			yyq2880[3] = true
			yyq2880[4] = x.Reason != ""
			yyq2880[5] = x.Message != ""
			yyq2880[6] = true
			yyq2880[7] = true
			yyq2880[8] = true
			yyq2880[9] = x.Count != 0
			yyq2880[10] = x.Type != ""
			var yynn2880 int
			if yyr2880 || yy2arr2880 {
				r.EncodeArrayStart(11)
			} else {
				yynn2880 = 0
				for _, b := range yyq2880 {
					if b {
						yynn2880++
					}
				}
				r.EncodeMapStart(yynn2880)
				yynn2880 = 0
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2880[0] {
					yym2882 := z.EncBinary()
					_ = yym2882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2880[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2883 := z.EncBinary()
					_ = yym2883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2880[1] {
					yym2885 := z.EncBinary()
					_ = yym2885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2880[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2886 := z.EncBinary()
					_ = yym2886
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2880[2] {
					yy2888 := &x.ObjectMeta
					yy2888.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2880[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2889 := &x.ObjectMeta
					yy2889.CodecEncodeSelf(e)
				}
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2880[3] {
					yy2891 := &x.InvolvedObject
					yy2891.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2880[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2892 := &x.InvolvedObject
					yy2892.CodecEncodeSelf(e)
				}
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2880[4] {
					yym2894 := z.EncBinary()
					_ = yym2894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2880[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2895 := z.EncBinary()
					_ = yym2895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2880[5] {
					yym2897 := z.EncBinary()
					_ = yym2897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2880[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2898 := z.EncBinary()
					_ = yym2898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2880[6] {
					yy2900 := &x.Source
					yy2900.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2880[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2901 := &x.Source
					yy2901.CodecEncodeSelf(e)
				}
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2880[7] {
					yy2903 := &x.FirstTimestamp
					yym2904 := z.EncBinary()
					_ = yym2904
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2903) {
					} else if yym2904 {
						z.EncBinaryMarshal(yy2903)
					} else if !yym2904 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2903)
					} else {
						z.EncFallback(yy2903)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2880[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2905 := &x.FirstTimestamp
					yym2906 := z.EncBinary()
					_ = yym2906
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2905) {
					} else if yym2906 {
						z.EncBinaryMarshal(yy2905)
					} else if !yym2906 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2905)
					} else {
						z.EncFallback(yy2905)
					}
				}
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2880[8] {
					yy2908 := &x.LastTimestamp
					yym2909 := z.EncBinary()
					_ = yym2909
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2908) {
					} else if yym2909 {
						z.EncBinaryMarshal(yy2908)
					} else if !yym2909 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2908)
					} else {
						z.EncFallback(yy2908)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2880[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2910 := &x.LastTimestamp
					yym2911 := z.EncBinary()
					_ = yym2911
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2910) {
					} else if yym2911 {
						z.EncBinaryMarshal(yy2910)
					} else if !yym2911 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2910)
					} else {
						z.EncFallback(yy2910)
					}
				}
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2880[9] {
					yym2913 := z.EncBinary()
					_ = yym2913
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2880[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2880[10] {
					yym2916 := z.EncBinary()
					_ = yym2916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2880[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2917 := z.EncBinary()
					_ = yym2917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr2880 || yy2arr2880 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2918 := z.DecBinary()
	_ = yym2918
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2919 := r.ContainerType()
		if yyct2919 == codecSelferValueTypeMap1234 {
			yyl2919 := r.ReadMapStart()
			if yyl2919 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2919, d)
			}
		} else if yyct2919 == codecSelferValueTypeArray1234 {
			yyl2919 := r.ReadArrayStart()
			if yyl2919 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2919, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2920Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2920Slc
	var yyhl2920 bool = l >= 0
	for yyj2920 := 0; ; yyj2920++ {
		if yyhl2920 {
			if yyj2920 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2920Slc = r.DecodeBytes(yys2920Slc, true, true)
		yys2920 := string(yys2920Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2920 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2923 := &x.ObjectMeta
				yyv2923.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2924 := &x.InvolvedObject
				yyv2924.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2927 := &x.Source
				yyv2927.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2928 := &x.FirstTimestamp
				yym2929 := z.DecBinary()
				_ = yym2929
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2928) {
				} else if yym2929 {
					z.DecBinaryUnmarshal(yyv2928)
				} else if !yym2929 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2928)
				} else {
					z.DecFallback(yyv2928, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2930 := &x.LastTimestamp
				yym2931 := z.DecBinary()
				_ = yym2931
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2930) {
				} else if yym2931 {
					z.DecBinaryUnmarshal(yyv2930)
				} else if !yym2931 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2930)
				} else {
					z.DecFallback(yyv2930, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2920)
		} // end switch yys2920
	} // end for yyj2920
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2934 int
	var yyb2934 bool
	var yyhl2934 bool = l >= 0
	yyj2934++
	if yyhl2934 {
		yyb2934 = yyj2934 > l
	} else {
		yyb2934 = r.CheckBreak()
	}
	if yyb2934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2934++
	if yyhl2934 {
		yyb2934 = yyj2934 > l
	} else {
		yyb2934 = r.CheckBreak()
	}
	if yyb2934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2934++
	if yyhl2934 {
		yyb2934 = yyj2934 > l
	} else {
		yyb2934 = r.CheckBreak()
	}
	if yyb2934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2937 := &x.ObjectMeta
		yyv2937.CodecDecodeSelf(d)
	}
	yyj2934++
	if yyhl2934 {
		yyb2934 = yyj2934 > l
	} else {
		yyb2934 = r.CheckBreak()
	}
	if yyb2934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2938 := &x.InvolvedObject
		yyv2938.CodecDecodeSelf(d)
	}
	yyj2934++
	if yyhl2934 {
		yyb2934 = yyj2934 > l
	} else {
		yyb2934 = r.CheckBreak()
	}
	if yyb2934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2934++
	if yyhl2934 {
		yyb2934 = yyj2934 > l
	} else {
		yyb2934 = r.CheckBreak()
	}
	if yyb2934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2934++
	if yyhl2934 {
		yyb2934 = yyj2934 > l
	} else {
		yyb2934 = r.CheckBreak()
	}
	if yyb2934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2941 := &x.Source
		yyv2941.CodecDecodeSelf(d)
	}
	yyj2934++
	if yyhl2934 {
		yyb2934 = yyj2934 > l
	} else {
		yyb2934 = r.CheckBreak()
	}
	if yyb2934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2942 := &x.FirstTimestamp
		yym2943 := z.DecBinary()
		_ = yym2943
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2942) {
		} else if yym2943 {
			z.DecBinaryUnmarshal(yyv2942)
		} else if !yym2943 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2942)
		} else {
			z.DecFallback(yyv2942, false)
		}
	}
	yyj2934++
	if yyhl2934 {
		yyb2934 = yyj2934 > l
	} else {
		yyb2934 = r.CheckBreak()
	}
	if yyb2934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2944 := &x.LastTimestamp
		yym2945 := z.DecBinary()
		_ = yym2945
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2944) {
		} else if yym2945 {
			z.DecBinaryUnmarshal(yyv2944)
		} else if !yym2945 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2944)
		} else {
			z.DecFallback(yyv2944, false)
		}
	}
	yyj2934++
	if yyhl2934 {
		yyb2934 = yyj2934 > l
	} else {
		yyb2934 = r.CheckBreak()
	}
	if yyb2934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2934++
	if yyhl2934 {
		yyb2934 = yyj2934 > l
	} else {
		yyb2934 = r.CheckBreak()
	}
	if yyb2934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj2934++
		if yyhl2934 {
			yyb2934 = yyj2934 > l
		} else {
			yyb2934 = r.CheckBreak()
		}
		if yyb2934 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2934-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2948 := z.EncBinary()
		_ = yym2948
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2949 := !z.EncBinary()
			yy2arr2949 := z.EncBasicHandle().StructToArray
			var yyq2949 [4]bool
			_, _, _ = yysep2949, yyq2949, yy2arr2949
			const yyr2949 bool = false
			yyq2949[0] = x.Kind != ""
			yyq2949[1] = x.APIVersion != ""
			yyq2949[2] = true
			var yynn2949 int
			if yyr2949 || yy2arr2949 {
				r.EncodeArrayStart(4)
			} else {
				yynn2949 = 1
				for _, b := range yyq2949 {
					if b {
						yynn2949++
					}
				}
				r.EncodeMapStart(yynn2949)
				yynn2949 = 0
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2949[0] {
					yym2951 := z.EncBinary()
					_ = yym2951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2949[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2952 := z.EncBinary()
					_ = yym2952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2949[1] {
					yym2954 := z.EncBinary()
					_ = yym2954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2949[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2955 := z.EncBinary()
					_ = yym2955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2949[2] {
					yy2957 := &x.ListMeta
					yym2958 := z.EncBinary()
					_ = yym2958
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2957) {
					} else {
						z.EncFallback(yy2957)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2949[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2959 := &x.ListMeta
					yym2960 := z.EncBinary()
					_ = yym2960
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2959) {
					} else {
						z.EncFallback(yy2959)
					}
				}
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2963 := z.EncBinary()
					_ = yym2963
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr2949 || yy2arr2949 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2964 := z.DecBinary()
	_ = yym2964
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2965 := r.ContainerType()
		if yyct2965 == codecSelferValueTypeMap1234 {
			yyl2965 := r.ReadMapStart()
			if yyl2965 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2965, d)
			}
		} else if yyct2965 == codecSelferValueTypeArray1234 {
			yyl2965 := r.ReadArrayStart()
			if yyl2965 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2965, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2966Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2966Slc
	var yyhl2966 bool = l >= 0
	for yyj2966 := 0; ; yyj2966++ {
		if yyhl2966 {
			if yyj2966 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2966Slc = r.DecodeBytes(yys2966Slc, true, true)
		yys2966 := string(yys2966Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2966 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2969 := &x.ListMeta
				yym2970 := z.DecBinary()
				_ = yym2970
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2969) {
				} else {
					z.DecFallback(yyv2969, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2971 := &x.Items
				yym2972 := z.DecBinary()
				_ = yym2972
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2971), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2966)
		} // end switch yys2966
	} // end for yyj2966
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2973 int
	var yyb2973 bool
	var yyhl2973 bool = l >= 0
	yyj2973++
	if yyhl2973 {
		yyb2973 = yyj2973 > l
	} else {
		yyb2973 = r.CheckBreak()
	}
	if yyb2973 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2973++
	if yyhl2973 {
		yyb2973 = yyj2973 > l
	} else {
		yyb2973 = r.CheckBreak()
	}
	if yyb2973 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2973++
	if yyhl2973 {
		yyb2973 = yyj2973 > l
	} else {
		yyb2973 = r.CheckBreak()
	}
	if yyb2973 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2976 := &x.ListMeta
		yym2977 := z.DecBinary()
		_ = yym2977
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2976) {
		} else {
			z.DecFallback(yyv2976, false)
		}
	}
	yyj2973++
	if yyhl2973 {
		yyb2973 = yyj2973 > l
	} else {
		yyb2973 = r.CheckBreak()
	}
	if yyb2973 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2978 := &x.Items
		yym2979 := z.DecBinary()
		_ = yym2979
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2978), d)
		}
	}
	for {
		yyj2973++
		if yyhl2973 {
			yyb2973 = yyj2973 > l
		} else {
			yyb2973 = r.CheckBreak()
		}
		if yyb2973 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2973-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2980 := z.EncBinary()
		_ = yym2980
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2981 := !z.EncBinary()
			yy2arr2981 := z.EncBasicHandle().StructToArray
			var yyq2981 [4]bool
			_, _, _ = yysep2981, yyq2981, yy2arr2981
			const yyr2981 bool = false
			yyq2981[0] = x.Kind != ""
			yyq2981[1] = x.APIVersion != ""
			yyq2981[2] = true
			var yynn2981 int
			if yyr2981 || yy2arr2981 {
				r.EncodeArrayStart(4)
			} else {
				yynn2981 = 1
				for _, b := range yyq2981 {
					if b {
						yynn2981++
					}
				}
				r.EncodeMapStart(yynn2981)
				yynn2981 = 0
			}
			if yyr2981 || yy2arr2981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2981[0] {
					yym2983 := z.EncBinary()
					_ = yym2983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2981[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2984 := z.EncBinary()
					_ = yym2984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2981 || yy2arr2981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2981[1] {
					yym2986 := z.EncBinary()
					_ = yym2986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2981[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2987 := z.EncBinary()
					_ = yym2987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2981 || yy2arr2981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2981[2] {
					yy2989 := &x.ListMeta
					yym2990 := z.EncBinary()
					_ = yym2990
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2989) {
					} else {
						z.EncFallback(yy2989)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2981[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2991 := &x.ListMeta
					yym2992 := z.EncBinary()
					_ = yym2992
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2991) {
					} else {
						z.EncFallback(yy2991)
					}
				}
			}
			if yyr2981 || yy2arr2981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2994 := z.EncBinary()
					_ = yym2994
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg6_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2995 := z.EncBinary()
					_ = yym2995
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg6_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr2981 || yy2arr2981 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2996 := z.DecBinary()
	_ = yym2996
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2997 := r.ContainerType()
		if yyct2997 == codecSelferValueTypeMap1234 {
			yyl2997 := r.ReadMapStart()
			if yyl2997 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2997, d)
			}
		} else if yyct2997 == codecSelferValueTypeArray1234 {
			yyl2997 := r.ReadArrayStart()
			if yyl2997 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2997, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2998Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2998Slc
	var yyhl2998 bool = l >= 0
	for yyj2998 := 0; ; yyj2998++ {
		if yyhl2998 {
			if yyj2998 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2998Slc = r.DecodeBytes(yys2998Slc, true, true)
		yys2998 := string(yys2998Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2998 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3001 := &x.ListMeta
				yym3002 := z.DecBinary()
				_ = yym3002
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3001) {
				} else {
					z.DecFallback(yyv3001, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3003 := &x.Items
				yym3004 := z.DecBinary()
				_ = yym3004
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg6_runtime.Object)(yyv3003), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2998)
		} // end switch yys2998
	} // end for yyj2998
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3005 int
	var yyb3005 bool
	var yyhl3005 bool = l >= 0
	yyj3005++
	if yyhl3005 {
		yyb3005 = yyj3005 > l
	} else {
		yyb3005 = r.CheckBreak()
	}
	if yyb3005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3005++
	if yyhl3005 {
		yyb3005 = yyj3005 > l
	} else {
		yyb3005 = r.CheckBreak()
	}
	if yyb3005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3005++
	if yyhl3005 {
		yyb3005 = yyj3005 > l
	} else {
		yyb3005 = r.CheckBreak()
	}
	if yyb3005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3008 := &x.ListMeta
		yym3009 := z.DecBinary()
		_ = yym3009
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3008) {
		} else {
			z.DecFallback(yyv3008, false)
		}
	}
	yyj3005++
	if yyhl3005 {
		yyb3005 = yyj3005 > l
	} else {
		yyb3005 = r.CheckBreak()
	}
	if yyb3005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3010 := &x.Items
		yym3011 := z.DecBinary()
		_ = yym3011
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg6_runtime.Object)(yyv3010), d)
		}
	}
	for {
		yyj3005++
		if yyhl3005 {
			yyb3005 = yyj3005 > l
		} else {
			yyb3005 = r.CheckBreak()
		}
		if yyb3005 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3005-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3012 := z.EncBinary()
	_ = yym3012
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3013 := z.DecBinary()
	_ = yym3013
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3014 := z.EncBinary()
		_ = yym3014
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3015 := !z.EncBinary()
			yy2arr3015 := z.EncBasicHandle().StructToArray
			var yyq3015 [6]bool
			_, _, _ = yysep3015, yyq3015, yy2arr3015
			const yyr3015 bool = false
			yyq3015[0] = x.Type != ""
			yyq3015[1] = len(x.Max) != 0
			yyq3015[2] = len(x.Min) != 0
			yyq3015[3] = len(x.Default) != 0
			yyq3015[4] = len(x.DefaultRequest) != 0
			yyq3015[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3015 int
			if yyr3015 || yy2arr3015 {
				r.EncodeArrayStart(6)
			} else {
				yynn3015 = 0
				for _, b := range yyq3015 {
					if b {
						yynn3015++
					}
				}
				r.EncodeMapStart(yynn3015)
				yynn3015 = 0
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3015[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3015[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3015[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3015[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3015[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3015[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3015[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3015[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3015[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3015[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3015[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3015[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3015 || yy2arr3015 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3022 := z.DecBinary()
	_ = yym3022
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3023 := r.ContainerType()
		if yyct3023 == codecSelferValueTypeMap1234 {
			yyl3023 := r.ReadMapStart()
			if yyl3023 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3023, d)
			}
		} else if yyct3023 == codecSelferValueTypeArray1234 {
			yyl3023 := r.ReadArrayStart()
			if yyl3023 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3023, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3024Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3024Slc
	var yyhl3024 bool = l >= 0
	for yyj3024 := 0; ; yyj3024++ {
		if yyhl3024 {
			if yyj3024 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3024Slc = r.DecodeBytes(yys3024Slc, true, true)
		yys3024 := string(yys3024Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3024 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3026 := &x.Max
				yyv3026.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3027 := &x.Min
				yyv3027.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3028 := &x.Default
				yyv3028.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3029 := &x.DefaultRequest
				yyv3029.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3030 := &x.MaxLimitRequestRatio
				yyv3030.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3024)
		} // end switch yys3024
	} // end for yyj3024
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3031 int
	var yyb3031 bool
	var yyhl3031 bool = l >= 0
	yyj3031++
	if yyhl3031 {
		yyb3031 = yyj3031 > l
	} else {
		yyb3031 = r.CheckBreak()
	}
	if yyb3031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3031++
	if yyhl3031 {
		yyb3031 = yyj3031 > l
	} else {
		yyb3031 = r.CheckBreak()
	}
	if yyb3031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3033 := &x.Max
		yyv3033.CodecDecodeSelf(d)
	}
	yyj3031++
	if yyhl3031 {
		yyb3031 = yyj3031 > l
	} else {
		yyb3031 = r.CheckBreak()
	}
	if yyb3031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3034 := &x.Min
		yyv3034.CodecDecodeSelf(d)
	}
	yyj3031++
	if yyhl3031 {
		yyb3031 = yyj3031 > l
	} else {
		yyb3031 = r.CheckBreak()
	}
	if yyb3031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3035 := &x.Default
		yyv3035.CodecDecodeSelf(d)
	}
	yyj3031++
	if yyhl3031 {
		yyb3031 = yyj3031 > l
	} else {
		yyb3031 = r.CheckBreak()
	}
	if yyb3031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3036 := &x.DefaultRequest
		yyv3036.CodecDecodeSelf(d)
	}
	yyj3031++
	if yyhl3031 {
		yyb3031 = yyj3031 > l
	} else {
		yyb3031 = r.CheckBreak()
	}
	if yyb3031 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3037 := &x.MaxLimitRequestRatio
		yyv3037.CodecDecodeSelf(d)
	}
	for {
		yyj3031++
		if yyhl3031 {
			yyb3031 = yyj3031 > l
		} else {
			yyb3031 = r.CheckBreak()
		}
		if yyb3031 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3031-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3038 := z.EncBinary()
		_ = yym3038
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3039 := !z.EncBinary()
			yy2arr3039 := z.EncBasicHandle().StructToArray
			var yyq3039 [1]bool
			_, _, _ = yysep3039, yyq3039, yy2arr3039
			const yyr3039 bool = false
			var yynn3039 int
			if yyr3039 || yy2arr3039 {
				r.EncodeArrayStart(1)
			} else {
				yynn3039 = 1
				for _, b := range yyq3039 {
					if b {
						yynn3039++
					}
				}
				r.EncodeMapStart(yynn3039)
				yynn3039 = 0
			}
			if yyr3039 || yy2arr3039 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3041 := z.EncBinary()
					_ = yym3041
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3042 := z.EncBinary()
					_ = yym3042
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3039 || yy2arr3039 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3043 := z.DecBinary()
	_ = yym3043
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3044 := r.ContainerType()
		if yyct3044 == codecSelferValueTypeMap1234 {
			yyl3044 := r.ReadMapStart()
			if yyl3044 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3044, d)
			}
		} else if yyct3044 == codecSelferValueTypeArray1234 {
			yyl3044 := r.ReadArrayStart()
			if yyl3044 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3044, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3045Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3045Slc
	var yyhl3045 bool = l >= 0
	for yyj3045 := 0; ; yyj3045++ {
		if yyhl3045 {
			if yyj3045 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3045Slc = r.DecodeBytes(yys3045Slc, true, true)
		yys3045 := string(yys3045Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3045 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3046 := &x.Limits
				yym3047 := z.DecBinary()
				_ = yym3047
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3046), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3045)
		} // end switch yys3045
	} // end for yyj3045
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3048 int
	var yyb3048 bool
	var yyhl3048 bool = l >= 0
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3049 := &x.Limits
		yym3050 := z.DecBinary()
		_ = yym3050
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3049), d)
		}
	}
	for {
		yyj3048++
		if yyhl3048 {
			yyb3048 = yyj3048 > l
		} else {
			yyb3048 = r.CheckBreak()
		}
		if yyb3048 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3048-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3051 := z.EncBinary()
		_ = yym3051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3052 := !z.EncBinary()
			yy2arr3052 := z.EncBasicHandle().StructToArray
			var yyq3052 [4]bool
			_, _, _ = yysep3052, yyq3052, yy2arr3052
			const yyr3052 bool = false
			yyq3052[0] = x.Kind != ""
			yyq3052[1] = x.APIVersion != ""
			yyq3052[2] = true
			yyq3052[3] = true
			var yynn3052 int
			if yyr3052 || yy2arr3052 {
				r.EncodeArrayStart(4)
			} else {
				yynn3052 = 0
				for _, b := range yyq3052 {
					if b {
						yynn3052++
					}
				}
				r.EncodeMapStart(yynn3052)
				yynn3052 = 0
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3052[0] {
					yym3054 := z.EncBinary()
					_ = yym3054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3052[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3055 := z.EncBinary()
					_ = yym3055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3052[1] {
					yym3057 := z.EncBinary()
					_ = yym3057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3052[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3058 := z.EncBinary()
					_ = yym3058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3052[2] {
					yy3060 := &x.ObjectMeta
					yy3060.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3052[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3061 := &x.ObjectMeta
					yy3061.CodecEncodeSelf(e)
				}
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3052[3] {
					yy3063 := &x.Spec
					yy3063.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3052[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3064 := &x.Spec
					yy3064.CodecEncodeSelf(e)
				}
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3065 := z.DecBinary()
	_ = yym3065
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3066 := r.ContainerType()
		if yyct3066 == codecSelferValueTypeMap1234 {
			yyl3066 := r.ReadMapStart()
			if yyl3066 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3066, d)
			}
		} else if yyct3066 == codecSelferValueTypeArray1234 {
			yyl3066 := r.ReadArrayStart()
			if yyl3066 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3066, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3067Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3067Slc
	var yyhl3067 bool = l >= 0
	for yyj3067 := 0; ; yyj3067++ {
		if yyhl3067 {
			if yyj3067 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3067Slc = r.DecodeBytes(yys3067Slc, true, true)
		yys3067 := string(yys3067Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3067 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3070 := &x.ObjectMeta
				yyv3070.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3071 := &x.Spec
				yyv3071.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3067)
		} // end switch yys3067
	} // end for yyj3067
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3072 int
	var yyb3072 bool
	var yyhl3072 bool = l >= 0
	yyj3072++
	if yyhl3072 {
		yyb3072 = yyj3072 > l
	} else {
		yyb3072 = r.CheckBreak()
	}
	if yyb3072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3072++
	if yyhl3072 {
		yyb3072 = yyj3072 > l
	} else {
		yyb3072 = r.CheckBreak()
	}
	if yyb3072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3072++
	if yyhl3072 {
		yyb3072 = yyj3072 > l
	} else {
		yyb3072 = r.CheckBreak()
	}
	if yyb3072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3075 := &x.ObjectMeta
		yyv3075.CodecDecodeSelf(d)
	}
	yyj3072++
	if yyhl3072 {
		yyb3072 = yyj3072 > l
	} else {
		yyb3072 = r.CheckBreak()
	}
	if yyb3072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3076 := &x.Spec
		yyv3076.CodecDecodeSelf(d)
	}
	for {
		yyj3072++
		if yyhl3072 {
			yyb3072 = yyj3072 > l
		} else {
			yyb3072 = r.CheckBreak()
		}
		if yyb3072 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3072-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3077 := z.EncBinary()
		_ = yym3077
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3078 := !z.EncBinary()
			yy2arr3078 := z.EncBasicHandle().StructToArray
			var yyq3078 [4]bool
			_, _, _ = yysep3078, yyq3078, yy2arr3078
			const yyr3078 bool = false
			yyq3078[0] = x.Kind != ""
			yyq3078[1] = x.APIVersion != ""
			yyq3078[2] = true
			var yynn3078 int
			if yyr3078 || yy2arr3078 {
				r.EncodeArrayStart(4)
			} else {
				yynn3078 = 1
				for _, b := range yyq3078 {
					if b {
						yynn3078++
					}
				}
				r.EncodeMapStart(yynn3078)
				yynn3078 = 0
			}
			if yyr3078 || yy2arr3078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3078[0] {
					yym3080 := z.EncBinary()
					_ = yym3080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3078[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3081 := z.EncBinary()
					_ = yym3081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3078 || yy2arr3078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3078[1] {
					yym3083 := z.EncBinary()
					_ = yym3083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3078[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3084 := z.EncBinary()
					_ = yym3084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3078 || yy2arr3078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3078[2] {
					yy3086 := &x.ListMeta
					yym3087 := z.EncBinary()
					_ = yym3087
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3086) {
					} else {
						z.EncFallback(yy3086)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3078[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3088 := &x.ListMeta
					yym3089 := z.EncBinary()
					_ = yym3089
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3088) {
					} else {
						z.EncFallback(yy3088)
					}
				}
			}
			if yyr3078 || yy2arr3078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3091 := z.EncBinary()
					_ = yym3091
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3092 := z.EncBinary()
					_ = yym3092
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3078 || yy2arr3078 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3093 := z.DecBinary()
	_ = yym3093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3094 := r.ContainerType()
		if yyct3094 == codecSelferValueTypeMap1234 {
			yyl3094 := r.ReadMapStart()
			if yyl3094 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3094, d)
			}
		} else if yyct3094 == codecSelferValueTypeArray1234 {
			yyl3094 := r.ReadArrayStart()
			if yyl3094 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3094, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3095Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3095Slc
	var yyhl3095 bool = l >= 0
	for yyj3095 := 0; ; yyj3095++ {
		if yyhl3095 {
			if yyj3095 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3095Slc = r.DecodeBytes(yys3095Slc, true, true)
		yys3095 := string(yys3095Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3095 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3098 := &x.ListMeta
				yym3099 := z.DecBinary()
				_ = yym3099
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3098) {
				} else {
					z.DecFallback(yyv3098, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3100 := &x.Items
				yym3101 := z.DecBinary()
				_ = yym3101
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3100), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3095)
		} // end switch yys3095
	} // end for yyj3095
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3102 int
	var yyb3102 bool
	var yyhl3102 bool = l >= 0
	yyj3102++
	if yyhl3102 {
		yyb3102 = yyj3102 > l
	} else {
		yyb3102 = r.CheckBreak()
	}
	if yyb3102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3102++
	if yyhl3102 {
		yyb3102 = yyj3102 > l
	} else {
		yyb3102 = r.CheckBreak()
	}
	if yyb3102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3102++
	if yyhl3102 {
		yyb3102 = yyj3102 > l
	} else {
		yyb3102 = r.CheckBreak()
	}
	if yyb3102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3105 := &x.ListMeta
		yym3106 := z.DecBinary()
		_ = yym3106
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3105) {
		} else {
			z.DecFallback(yyv3105, false)
		}
	}
	yyj3102++
	if yyhl3102 {
		yyb3102 = yyj3102 > l
	} else {
		yyb3102 = r.CheckBreak()
	}
	if yyb3102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3107 := &x.Items
		yym3108 := z.DecBinary()
		_ = yym3108
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3107), d)
		}
	}
	for {
		yyj3102++
		if yyhl3102 {
			yyb3102 = yyj3102 > l
		} else {
			yyb3102 = r.CheckBreak()
		}
		if yyb3102 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3102-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3109 := z.EncBinary()
		_ = yym3109
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3110 := !z.EncBinary()
			yy2arr3110 := z.EncBasicHandle().StructToArray
			var yyq3110 [1]bool
			_, _, _ = yysep3110, yyq3110, yy2arr3110
			const yyr3110 bool = false
			yyq3110[0] = len(x.Hard) != 0
			var yynn3110 int
			if yyr3110 || yy2arr3110 {
				r.EncodeArrayStart(1)
			} else {
				yynn3110 = 0
				for _, b := range yyq3110 {
					if b {
						yynn3110++
					}
				}
				r.EncodeMapStart(yynn3110)
				yynn3110 = 0
			}
			if yyr3110 || yy2arr3110 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3110[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3110[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3110 || yy2arr3110 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3112 := z.DecBinary()
	_ = yym3112
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3113 := r.ContainerType()
		if yyct3113 == codecSelferValueTypeMap1234 {
			yyl3113 := r.ReadMapStart()
			if yyl3113 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3113, d)
			}
		} else if yyct3113 == codecSelferValueTypeArray1234 {
			yyl3113 := r.ReadArrayStart()
			if yyl3113 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3113, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3114Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3114Slc
	var yyhl3114 bool = l >= 0
	for yyj3114 := 0; ; yyj3114++ {
		if yyhl3114 {
			if yyj3114 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3114Slc = r.DecodeBytes(yys3114Slc, true, true)
		yys3114 := string(yys3114Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3114 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3115 := &x.Hard
				yyv3115.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3114)
		} // end switch yys3114
	} // end for yyj3114
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3116 int
	var yyb3116 bool
	var yyhl3116 bool = l >= 0
	yyj3116++
	if yyhl3116 {
		yyb3116 = yyj3116 > l
	} else {
		yyb3116 = r.CheckBreak()
	}
	if yyb3116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3117 := &x.Hard
		yyv3117.CodecDecodeSelf(d)
	}
	for {
		yyj3116++
		if yyhl3116 {
			yyb3116 = yyj3116 > l
		} else {
			yyb3116 = r.CheckBreak()
		}
		if yyb3116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3118 := z.EncBinary()
		_ = yym3118
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3119 := !z.EncBinary()
			yy2arr3119 := z.EncBasicHandle().StructToArray
			var yyq3119 [2]bool
			_, _, _ = yysep3119, yyq3119, yy2arr3119
			const yyr3119 bool = false
			yyq3119[0] = len(x.Hard) != 0
			yyq3119[1] = len(x.Used) != 0
			var yynn3119 int
			if yyr3119 || yy2arr3119 {
				r.EncodeArrayStart(2)
			} else {
				yynn3119 = 0
				for _, b := range yyq3119 {
					if b {
						yynn3119++
					}
				}
				r.EncodeMapStart(yynn3119)
				yynn3119 = 0
			}
			if yyr3119 || yy2arr3119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3119[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3119[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3119 || yy2arr3119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3119[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3119[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3119 || yy2arr3119 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3122 := z.DecBinary()
	_ = yym3122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3123 := r.ContainerType()
		if yyct3123 == codecSelferValueTypeMap1234 {
			yyl3123 := r.ReadMapStart()
			if yyl3123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3123, d)
			}
		} else if yyct3123 == codecSelferValueTypeArray1234 {
			yyl3123 := r.ReadArrayStart()
			if yyl3123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3124Slc
	var yyhl3124 bool = l >= 0
	for yyj3124 := 0; ; yyj3124++ {
		if yyhl3124 {
			if yyj3124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3124Slc = r.DecodeBytes(yys3124Slc, true, true)
		yys3124 := string(yys3124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3124 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3125 := &x.Hard
				yyv3125.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3126 := &x.Used
				yyv3126.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3124)
		} // end switch yys3124
	} // end for yyj3124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3127 int
	var yyb3127 bool
	var yyhl3127 bool = l >= 0
	yyj3127++
	if yyhl3127 {
		yyb3127 = yyj3127 > l
	} else {
		yyb3127 = r.CheckBreak()
	}
	if yyb3127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3128 := &x.Hard
		yyv3128.CodecDecodeSelf(d)
	}
	yyj3127++
	if yyhl3127 {
		yyb3127 = yyj3127 > l
	} else {
		yyb3127 = r.CheckBreak()
	}
	if yyb3127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3129 := &x.Used
		yyv3129.CodecDecodeSelf(d)
	}
	for {
		yyj3127++
		if yyhl3127 {
			yyb3127 = yyj3127 > l
		} else {
			yyb3127 = r.CheckBreak()
		}
		if yyb3127 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3127-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3130 := z.EncBinary()
		_ = yym3130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3131 := !z.EncBinary()
			yy2arr3131 := z.EncBasicHandle().StructToArray
			var yyq3131 [5]bool
			_, _, _ = yysep3131, yyq3131, yy2arr3131
			const yyr3131 bool = false
			yyq3131[0] = x.Kind != ""
			yyq3131[1] = x.APIVersion != ""
			yyq3131[2] = true
			yyq3131[3] = true
			yyq3131[4] = true
			var yynn3131 int
			if yyr3131 || yy2arr3131 {
				r.EncodeArrayStart(5)
			} else {
				yynn3131 = 0
				for _, b := range yyq3131 {
					if b {
						yynn3131++
					}
				}
				r.EncodeMapStart(yynn3131)
				yynn3131 = 0
			}
			if yyr3131 || yy2arr3131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3131[0] {
					yym3133 := z.EncBinary()
					_ = yym3133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3131[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3134 := z.EncBinary()
					_ = yym3134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3131 || yy2arr3131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3131[1] {
					yym3136 := z.EncBinary()
					_ = yym3136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3131[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3137 := z.EncBinary()
					_ = yym3137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3131 || yy2arr3131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3131[2] {
					yy3139 := &x.ObjectMeta
					yy3139.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3131[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3140 := &x.ObjectMeta
					yy3140.CodecEncodeSelf(e)
				}
			}
			if yyr3131 || yy2arr3131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3131[3] {
					yy3142 := &x.Spec
					yy3142.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3131[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3143 := &x.Spec
					yy3143.CodecEncodeSelf(e)
				}
			}
			if yyr3131 || yy2arr3131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3131[4] {
					yy3145 := &x.Status
					yy3145.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3131[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3146 := &x.Status
					yy3146.CodecEncodeSelf(e)
				}
			}
			if yyr3131 || yy2arr3131 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3147 := z.DecBinary()
	_ = yym3147
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3148 := r.ContainerType()
		if yyct3148 == codecSelferValueTypeMap1234 {
			yyl3148 := r.ReadMapStart()
			if yyl3148 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3148, d)
			}
		} else if yyct3148 == codecSelferValueTypeArray1234 {
			yyl3148 := r.ReadArrayStart()
			if yyl3148 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3148, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3149Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3149Slc
	var yyhl3149 bool = l >= 0
	for yyj3149 := 0; ; yyj3149++ {
		if yyhl3149 {
			if yyj3149 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3149Slc = r.DecodeBytes(yys3149Slc, true, true)
		yys3149 := string(yys3149Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3149 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3152 := &x.ObjectMeta
				yyv3152.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3153 := &x.Spec
				yyv3153.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3154 := &x.Status
				yyv3154.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3149)
		} // end switch yys3149
	} // end for yyj3149
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3155 int
	var yyb3155 bool
	var yyhl3155 bool = l >= 0
	yyj3155++
	if yyhl3155 {
		yyb3155 = yyj3155 > l
	} else {
		yyb3155 = r.CheckBreak()
	}
	if yyb3155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3155++
	if yyhl3155 {
		yyb3155 = yyj3155 > l
	} else {
		yyb3155 = r.CheckBreak()
	}
	if yyb3155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3155++
	if yyhl3155 {
		yyb3155 = yyj3155 > l
	} else {
		yyb3155 = r.CheckBreak()
	}
	if yyb3155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3158 := &x.ObjectMeta
		yyv3158.CodecDecodeSelf(d)
	}
	yyj3155++
	if yyhl3155 {
		yyb3155 = yyj3155 > l
	} else {
		yyb3155 = r.CheckBreak()
	}
	if yyb3155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3159 := &x.Spec
		yyv3159.CodecDecodeSelf(d)
	}
	yyj3155++
	if yyhl3155 {
		yyb3155 = yyj3155 > l
	} else {
		yyb3155 = r.CheckBreak()
	}
	if yyb3155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3160 := &x.Status
		yyv3160.CodecDecodeSelf(d)
	}
	for {
		yyj3155++
		if yyhl3155 {
			yyb3155 = yyj3155 > l
		} else {
			yyb3155 = r.CheckBreak()
		}
		if yyb3155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3161 := z.EncBinary()
		_ = yym3161
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3162 := !z.EncBinary()
			yy2arr3162 := z.EncBasicHandle().StructToArray
			var yyq3162 [4]bool
			_, _, _ = yysep3162, yyq3162, yy2arr3162
			const yyr3162 bool = false
			yyq3162[0] = x.Kind != ""
			yyq3162[1] = x.APIVersion != ""
			yyq3162[2] = true
			var yynn3162 int
			if yyr3162 || yy2arr3162 {
				r.EncodeArrayStart(4)
			} else {
				yynn3162 = 1
				for _, b := range yyq3162 {
					if b {
						yynn3162++
					}
				}
				r.EncodeMapStart(yynn3162)
				yynn3162 = 0
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[0] {
					yym3164 := z.EncBinary()
					_ = yym3164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3162[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3165 := z.EncBinary()
					_ = yym3165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[1] {
					yym3167 := z.EncBinary()
					_ = yym3167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3162[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3168 := z.EncBinary()
					_ = yym3168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3162[2] {
					yy3170 := &x.ListMeta
					yym3171 := z.EncBinary()
					_ = yym3171
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3170) {
					} else {
						z.EncFallback(yy3170)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3162[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3172 := &x.ListMeta
					yym3173 := z.EncBinary()
					_ = yym3173
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3172) {
					} else {
						z.EncFallback(yy3172)
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3175 := z.EncBinary()
					_ = yym3175
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3176 := z.EncBinary()
					_ = yym3176
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3177 := z.DecBinary()
	_ = yym3177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3178 := r.ContainerType()
		if yyct3178 == codecSelferValueTypeMap1234 {
			yyl3178 := r.ReadMapStart()
			if yyl3178 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3178, d)
			}
		} else if yyct3178 == codecSelferValueTypeArray1234 {
			yyl3178 := r.ReadArrayStart()
			if yyl3178 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3179Slc
	var yyhl3179 bool = l >= 0
	for yyj3179 := 0; ; yyj3179++ {
		if yyhl3179 {
			if yyj3179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3179Slc = r.DecodeBytes(yys3179Slc, true, true)
		yys3179 := string(yys3179Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3179 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3182 := &x.ListMeta
				yym3183 := z.DecBinary()
				_ = yym3183
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3182) {
				} else {
					z.DecFallback(yyv3182, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3184 := &x.Items
				yym3185 := z.DecBinary()
				_ = yym3185
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3184), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3179)
		} // end switch yys3179
	} // end for yyj3179
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3186 int
	var yyb3186 bool
	var yyhl3186 bool = l >= 0
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3189 := &x.ListMeta
		yym3190 := z.DecBinary()
		_ = yym3190
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3189) {
		} else {
			z.DecFallback(yyv3189, false)
		}
	}
	yyj3186++
	if yyhl3186 {
		yyb3186 = yyj3186 > l
	} else {
		yyb3186 = r.CheckBreak()
	}
	if yyb3186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3191 := &x.Items
		yym3192 := z.DecBinary()
		_ = yym3192
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3191), d)
		}
	}
	for {
		yyj3186++
		if yyhl3186 {
			yyb3186 = yyj3186 > l
		} else {
			yyb3186 = r.CheckBreak()
		}
		if yyb3186 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3186-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3193 := z.EncBinary()
		_ = yym3193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3194 := !z.EncBinary()
			yy2arr3194 := z.EncBasicHandle().StructToArray
			var yyq3194 [5]bool
			_, _, _ = yysep3194, yyq3194, yy2arr3194
			const yyr3194 bool = false
			yyq3194[0] = x.Kind != ""
			yyq3194[1] = x.APIVersion != ""
			yyq3194[2] = true
			yyq3194[3] = len(x.Data) != 0
			yyq3194[4] = x.Type != ""
			var yynn3194 int
			if yyr3194 || yy2arr3194 {
				r.EncodeArrayStart(5)
			} else {
				yynn3194 = 0
				for _, b := range yyq3194 {
					if b {
						yynn3194++
					}
				}
				r.EncodeMapStart(yynn3194)
				yynn3194 = 0
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3194[0] {
					yym3196 := z.EncBinary()
					_ = yym3196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3194[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3197 := z.EncBinary()
					_ = yym3197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3194[1] {
					yym3199 := z.EncBinary()
					_ = yym3199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3194[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3200 := z.EncBinary()
					_ = yym3200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3194[2] {
					yy3202 := &x.ObjectMeta
					yy3202.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3194[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3203 := &x.ObjectMeta
					yy3203.CodecEncodeSelf(e)
				}
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3194[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3205 := z.EncBinary()
						_ = yym3205
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3194[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3206 := z.EncBinary()
						_ = yym3206
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3194[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3194[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3208 := z.DecBinary()
	_ = yym3208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3209 := r.ContainerType()
		if yyct3209 == codecSelferValueTypeMap1234 {
			yyl3209 := r.ReadMapStart()
			if yyl3209 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3209, d)
			}
		} else if yyct3209 == codecSelferValueTypeArray1234 {
			yyl3209 := r.ReadArrayStart()
			if yyl3209 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3210Slc
	var yyhl3210 bool = l >= 0
	for yyj3210 := 0; ; yyj3210++ {
		if yyhl3210 {
			if yyj3210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3210Slc = r.DecodeBytes(yys3210Slc, true, true)
		yys3210 := string(yys3210Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3210 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3213 := &x.ObjectMeta
				yyv3213.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3214 := &x.Data
				yym3215 := z.DecBinary()
				_ = yym3215
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3214), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3210)
		} // end switch yys3210
	} // end for yyj3210
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3217 int
	var yyb3217 bool
	var yyhl3217 bool = l >= 0
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3220 := &x.ObjectMeta
		yyv3220.CodecDecodeSelf(d)
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3221 := &x.Data
		yym3222 := z.DecBinary()
		_ = yym3222
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3221), d)
		}
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3217++
		if yyhl3217 {
			yyb3217 = yyj3217 > l
		} else {
			yyb3217 = r.CheckBreak()
		}
		if yyb3217 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3217-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3224 := z.EncBinary()
	_ = yym3224
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3225 := z.DecBinary()
	_ = yym3225
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3226 := z.EncBinary()
		_ = yym3226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3227 := !z.EncBinary()
			yy2arr3227 := z.EncBasicHandle().StructToArray
			var yyq3227 [4]bool
			_, _, _ = yysep3227, yyq3227, yy2arr3227
			const yyr3227 bool = false
			yyq3227[0] = x.Kind != ""
			yyq3227[1] = x.APIVersion != ""
			yyq3227[2] = true
			var yynn3227 int
			if yyr3227 || yy2arr3227 {
				r.EncodeArrayStart(4)
			} else {
				yynn3227 = 1
				for _, b := range yyq3227 {
					if b {
						yynn3227++
					}
				}
				r.EncodeMapStart(yynn3227)
				yynn3227 = 0
			}
			if yyr3227 || yy2arr3227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3227[0] {
					yym3229 := z.EncBinary()
					_ = yym3229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3227[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3230 := z.EncBinary()
					_ = yym3230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3227 || yy2arr3227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3227[1] {
					yym3232 := z.EncBinary()
					_ = yym3232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3227[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3233 := z.EncBinary()
					_ = yym3233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3227 || yy2arr3227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3227[2] {
					yy3235 := &x.ListMeta
					yym3236 := z.EncBinary()
					_ = yym3236
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3235) {
					} else {
						z.EncFallback(yy3235)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3227[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3237 := &x.ListMeta
					yym3238 := z.EncBinary()
					_ = yym3238
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3237) {
					} else {
						z.EncFallback(yy3237)
					}
				}
			}
			if yyr3227 || yy2arr3227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3240 := z.EncBinary()
					_ = yym3240
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3241 := z.EncBinary()
					_ = yym3241
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3227 || yy2arr3227 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3242 := z.DecBinary()
	_ = yym3242
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3243 := r.ContainerType()
		if yyct3243 == codecSelferValueTypeMap1234 {
			yyl3243 := r.ReadMapStart()
			if yyl3243 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3243, d)
			}
		} else if yyct3243 == codecSelferValueTypeArray1234 {
			yyl3243 := r.ReadArrayStart()
			if yyl3243 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3243, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3244Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3244Slc
	var yyhl3244 bool = l >= 0
	for yyj3244 := 0; ; yyj3244++ {
		if yyhl3244 {
			if yyj3244 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3244Slc = r.DecodeBytes(yys3244Slc, true, true)
		yys3244 := string(yys3244Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3244 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3247 := &x.ListMeta
				yym3248 := z.DecBinary()
				_ = yym3248
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3247) {
				} else {
					z.DecFallback(yyv3247, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3249 := &x.Items
				yym3250 := z.DecBinary()
				_ = yym3250
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3249), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3244)
		} // end switch yys3244
	} // end for yyj3244
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3251 int
	var yyb3251 bool
	var yyhl3251 bool = l >= 0
	yyj3251++
	if yyhl3251 {
		yyb3251 = yyj3251 > l
	} else {
		yyb3251 = r.CheckBreak()
	}
	if yyb3251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3251++
	if yyhl3251 {
		yyb3251 = yyj3251 > l
	} else {
		yyb3251 = r.CheckBreak()
	}
	if yyb3251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3251++
	if yyhl3251 {
		yyb3251 = yyj3251 > l
	} else {
		yyb3251 = r.CheckBreak()
	}
	if yyb3251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3254 := &x.ListMeta
		yym3255 := z.DecBinary()
		_ = yym3255
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3254) {
		} else {
			z.DecFallback(yyv3254, false)
		}
	}
	yyj3251++
	if yyhl3251 {
		yyb3251 = yyj3251 > l
	} else {
		yyb3251 = r.CheckBreak()
	}
	if yyb3251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3256 := &x.Items
		yym3257 := z.DecBinary()
		_ = yym3257
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3256), d)
		}
	}
	for {
		yyj3251++
		if yyhl3251 {
			yyb3251 = yyj3251 > l
		} else {
			yyb3251 = r.CheckBreak()
		}
		if yyb3251 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3251-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3258 := z.EncBinary()
	_ = yym3258
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3259 := z.DecBinary()
	_ = yym3259
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3260 := z.EncBinary()
	_ = yym3260
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3261 := z.DecBinary()
	_ = yym3261
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3262 := z.EncBinary()
		_ = yym3262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3263 := !z.EncBinary()
			yy2arr3263 := z.EncBasicHandle().StructToArray
			var yyq3263 [4]bool
			_, _, _ = yysep3263, yyq3263, yy2arr3263
			const yyr3263 bool = false
			yyq3263[2] = x.Message != ""
			yyq3263[3] = x.Error != ""
			var yynn3263 int
			if yyr3263 || yy2arr3263 {
				r.EncodeArrayStart(4)
			} else {
				yynn3263 = 2
				for _, b := range yyq3263 {
					if b {
						yynn3263++
					}
				}
				r.EncodeMapStart(yynn3263)
				yynn3263 = 0
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3263[2] {
					yym3267 := z.EncBinary()
					_ = yym3267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3263[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3268 := z.EncBinary()
					_ = yym3268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3263[3] {
					yym3270 := z.EncBinary()
					_ = yym3270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3263[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3271 := z.EncBinary()
					_ = yym3271
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3272 := z.DecBinary()
	_ = yym3272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3273 := r.ContainerType()
		if yyct3273 == codecSelferValueTypeMap1234 {
			yyl3273 := r.ReadMapStart()
			if yyl3273 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3273, d)
			}
		} else if yyct3273 == codecSelferValueTypeArray1234 {
			yyl3273 := r.ReadArrayStart()
			if yyl3273 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3273, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3274Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3274Slc
	var yyhl3274 bool = l >= 0
	for yyj3274 := 0; ; yyj3274++ {
		if yyhl3274 {
			if yyj3274 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3274Slc = r.DecodeBytes(yys3274Slc, true, true)
		yys3274 := string(yys3274Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3274 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3274)
		} // end switch yys3274
	} // end for yyj3274
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3279 int
	var yyb3279 bool
	var yyhl3279 bool = l >= 0
	yyj3279++
	if yyhl3279 {
		yyb3279 = yyj3279 > l
	} else {
		yyb3279 = r.CheckBreak()
	}
	if yyb3279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3279++
	if yyhl3279 {
		yyb3279 = yyj3279 > l
	} else {
		yyb3279 = r.CheckBreak()
	}
	if yyb3279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3279++
	if yyhl3279 {
		yyb3279 = yyj3279 > l
	} else {
		yyb3279 = r.CheckBreak()
	}
	if yyb3279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3279++
	if yyhl3279 {
		yyb3279 = yyj3279 > l
	} else {
		yyb3279 = r.CheckBreak()
	}
	if yyb3279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3279++
		if yyhl3279 {
			yyb3279 = yyj3279 > l
		} else {
			yyb3279 = r.CheckBreak()
		}
		if yyb3279 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3279-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3284 := z.EncBinary()
		_ = yym3284
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3285 := !z.EncBinary()
			yy2arr3285 := z.EncBasicHandle().StructToArray
			var yyq3285 [4]bool
			_, _, _ = yysep3285, yyq3285, yy2arr3285
			const yyr3285 bool = false
			yyq3285[0] = x.Kind != ""
			yyq3285[1] = x.APIVersion != ""
			yyq3285[2] = true
			yyq3285[3] = len(x.Conditions) != 0
			var yynn3285 int
			if yyr3285 || yy2arr3285 {
				r.EncodeArrayStart(4)
			} else {
				yynn3285 = 0
				for _, b := range yyq3285 {
					if b {
						yynn3285++
					}
				}
				r.EncodeMapStart(yynn3285)
				yynn3285 = 0
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3285[0] {
					yym3287 := z.EncBinary()
					_ = yym3287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3285[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3288 := z.EncBinary()
					_ = yym3288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3285[1] {
					yym3290 := z.EncBinary()
					_ = yym3290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3285[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3291 := z.EncBinary()
					_ = yym3291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3285[2] {
					yy3293 := &x.ObjectMeta
					yy3293.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3285[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3294 := &x.ObjectMeta
					yy3294.CodecEncodeSelf(e)
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3285[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3296 := z.EncBinary()
						_ = yym3296
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3285[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3297 := z.EncBinary()
						_ = yym3297
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3298 := z.DecBinary()
	_ = yym3298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3299 := r.ContainerType()
		if yyct3299 == codecSelferValueTypeMap1234 {
			yyl3299 := r.ReadMapStart()
			if yyl3299 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3299, d)
			}
		} else if yyct3299 == codecSelferValueTypeArray1234 {
			yyl3299 := r.ReadArrayStart()
			if yyl3299 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3300Slc
	var yyhl3300 bool = l >= 0
	for yyj3300 := 0; ; yyj3300++ {
		if yyhl3300 {
			if yyj3300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3300Slc = r.DecodeBytes(yys3300Slc, true, true)
		yys3300 := string(yys3300Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3300 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3303 := &x.ObjectMeta
				yyv3303.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3304 := &x.Conditions
				yym3305 := z.DecBinary()
				_ = yym3305
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3304), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3300)
		} // end switch yys3300
	} // end for yyj3300
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3306 int
	var yyb3306 bool
	var yyhl3306 bool = l >= 0
	yyj3306++
	if yyhl3306 {
		yyb3306 = yyj3306 > l
	} else {
		yyb3306 = r.CheckBreak()
	}
	if yyb3306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3306++
	if yyhl3306 {
		yyb3306 = yyj3306 > l
	} else {
		yyb3306 = r.CheckBreak()
	}
	if yyb3306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3306++
	if yyhl3306 {
		yyb3306 = yyj3306 > l
	} else {
		yyb3306 = r.CheckBreak()
	}
	if yyb3306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3309 := &x.ObjectMeta
		yyv3309.CodecDecodeSelf(d)
	}
	yyj3306++
	if yyhl3306 {
		yyb3306 = yyj3306 > l
	} else {
		yyb3306 = r.CheckBreak()
	}
	if yyb3306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3310 := &x.Conditions
		yym3311 := z.DecBinary()
		_ = yym3311
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3310), d)
		}
	}
	for {
		yyj3306++
		if yyhl3306 {
			yyb3306 = yyj3306 > l
		} else {
			yyb3306 = r.CheckBreak()
		}
		if yyb3306 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3306-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3312 := z.EncBinary()
		_ = yym3312
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3313 := !z.EncBinary()
			yy2arr3313 := z.EncBasicHandle().StructToArray
			var yyq3313 [4]bool
			_, _, _ = yysep3313, yyq3313, yy2arr3313
			const yyr3313 bool = false
			yyq3313[0] = x.Kind != ""
			yyq3313[1] = x.APIVersion != ""
			yyq3313[2] = true
			var yynn3313 int
			if yyr3313 || yy2arr3313 {
				r.EncodeArrayStart(4)
			} else {
				yynn3313 = 1
				for _, b := range yyq3313 {
					if b {
						yynn3313++
					}
				}
				r.EncodeMapStart(yynn3313)
				yynn3313 = 0
			}
			if yyr3313 || yy2arr3313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3313[0] {
					yym3315 := z.EncBinary()
					_ = yym3315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3313[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3316 := z.EncBinary()
					_ = yym3316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3313 || yy2arr3313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3313[1] {
					yym3318 := z.EncBinary()
					_ = yym3318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3313[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3313 || yy2arr3313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3313[2] {
					yy3321 := &x.ListMeta
					yym3322 := z.EncBinary()
					_ = yym3322
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3321) {
					} else {
						z.EncFallback(yy3321)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3313[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3323 := &x.ListMeta
					yym3324 := z.EncBinary()
					_ = yym3324
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3323) {
					} else {
						z.EncFallback(yy3323)
					}
				}
			}
			if yyr3313 || yy2arr3313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3326 := z.EncBinary()
					_ = yym3326
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3327 := z.EncBinary()
					_ = yym3327
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3313 || yy2arr3313 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3328 := z.DecBinary()
	_ = yym3328
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3329 := r.ContainerType()
		if yyct3329 == codecSelferValueTypeMap1234 {
			yyl3329 := r.ReadMapStart()
			if yyl3329 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3329, d)
			}
		} else if yyct3329 == codecSelferValueTypeArray1234 {
			yyl3329 := r.ReadArrayStart()
			if yyl3329 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3329, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3330Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3330Slc
	var yyhl3330 bool = l >= 0
	for yyj3330 := 0; ; yyj3330++ {
		if yyhl3330 {
			if yyj3330 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3330Slc = r.DecodeBytes(yys3330Slc, true, true)
		yys3330 := string(yys3330Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3330 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3333 := &x.ListMeta
				yym3334 := z.DecBinary()
				_ = yym3334
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3333) {
				} else {
					z.DecFallback(yyv3333, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3335 := &x.Items
				yym3336 := z.DecBinary()
				_ = yym3336
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3335), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3330)
		} // end switch yys3330
	} // end for yyj3330
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3337 int
	var yyb3337 bool
	var yyhl3337 bool = l >= 0
	yyj3337++
	if yyhl3337 {
		yyb3337 = yyj3337 > l
	} else {
		yyb3337 = r.CheckBreak()
	}
	if yyb3337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3337++
	if yyhl3337 {
		yyb3337 = yyj3337 > l
	} else {
		yyb3337 = r.CheckBreak()
	}
	if yyb3337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3337++
	if yyhl3337 {
		yyb3337 = yyj3337 > l
	} else {
		yyb3337 = r.CheckBreak()
	}
	if yyb3337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3340 := &x.ListMeta
		yym3341 := z.DecBinary()
		_ = yym3341
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3340) {
		} else {
			z.DecFallback(yyv3340, false)
		}
	}
	yyj3337++
	if yyhl3337 {
		yyb3337 = yyj3337 > l
	} else {
		yyb3337 = r.CheckBreak()
	}
	if yyb3337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3342 := &x.Items
		yym3343 := z.DecBinary()
		_ = yym3343
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3342), d)
		}
	}
	for {
		yyj3337++
		if yyhl3337 {
			yyb3337 = yyj3337 > l
		} else {
			yyb3337 = r.CheckBreak()
		}
		if yyb3337 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3337-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3344 := z.EncBinary()
		_ = yym3344
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3345 := !z.EncBinary()
			yy2arr3345 := z.EncBasicHandle().StructToArray
			var yyq3345 [5]bool
			_, _, _ = yysep3345, yyq3345, yy2arr3345
			const yyr3345 bool = false
			yyq3345[0] = x.Capabilities != nil
			yyq3345[1] = x.Privileged != nil
			yyq3345[2] = x.SELinuxOptions != nil
			yyq3345[3] = x.RunAsUser != nil
			yyq3345[4] = x.RunAsNonRoot != nil
			var yynn3345 int
			if yyr3345 || yy2arr3345 {
				r.EncodeArrayStart(5)
			} else {
				yynn3345 = 0
				for _, b := range yyq3345 {
					if b {
						yynn3345++
					}
				}
				r.EncodeMapStart(yynn3345)
				yynn3345 = 0
			}
			if yyr3345 || yy2arr3345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3345[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3345[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3345 || yy2arr3345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3345[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3348 := *x.Privileged
						yym3349 := z.EncBinary()
						_ = yym3349
						if false {
						} else {
							r.EncodeBool(bool(yy3348))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3345[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3350 := *x.Privileged
						yym3351 := z.EncBinary()
						_ = yym3351
						if false {
						} else {
							r.EncodeBool(bool(yy3350))
						}
					}
				}
			}
			if yyr3345 || yy2arr3345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3345[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3345[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3345 || yy2arr3345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3345[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3354 := *x.RunAsUser
						yym3355 := z.EncBinary()
						_ = yym3355
						if false {
						} else {
							r.EncodeInt(int64(yy3354))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3345[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3356 := *x.RunAsUser
						yym3357 := z.EncBinary()
						_ = yym3357
						if false {
						} else {
							r.EncodeInt(int64(yy3356))
						}
					}
				}
			}
			if yyr3345 || yy2arr3345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3345[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3359 := *x.RunAsNonRoot
						yym3360 := z.EncBinary()
						_ = yym3360
						if false {
						} else {
							r.EncodeBool(bool(yy3359))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3345[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3361 := *x.RunAsNonRoot
						yym3362 := z.EncBinary()
						_ = yym3362
						if false {
						} else {
							r.EncodeBool(bool(yy3361))
						}
					}
				}
			}
			if yyr3345 || yy2arr3345 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3363 := z.DecBinary()
	_ = yym3363
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3364 := r.ContainerType()
		if yyct3364 == codecSelferValueTypeMap1234 {
			yyl3364 := r.ReadMapStart()
			if yyl3364 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3364, d)
			}
		} else if yyct3364 == codecSelferValueTypeArray1234 {
			yyl3364 := r.ReadArrayStart()
			if yyl3364 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3364, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3365Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3365Slc
	var yyhl3365 bool = l >= 0
	for yyj3365 := 0; ; yyj3365++ {
		if yyhl3365 {
			if yyj3365 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3365Slc = r.DecodeBytes(yys3365Slc, true, true)
		yys3365 := string(yys3365Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3365 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3368 := z.DecBinary()
				_ = yym3368
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3371 := z.DecBinary()
				_ = yym3371
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3373 := z.DecBinary()
				_ = yym3373
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3365)
		} // end switch yys3365
	} // end for yyj3365
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3374 int
	var yyb3374 bool
	var yyhl3374 bool = l >= 0
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3377 := z.DecBinary()
		_ = yym3377
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3380 := z.DecBinary()
		_ = yym3380
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3382 := z.DecBinary()
		_ = yym3382
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3374++
		if yyhl3374 {
			yyb3374 = yyj3374 > l
		} else {
			yyb3374 = r.CheckBreak()
		}
		if yyb3374 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3374-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3383 := z.EncBinary()
		_ = yym3383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3384 := !z.EncBinary()
			yy2arr3384 := z.EncBasicHandle().StructToArray
			var yyq3384 [4]bool
			_, _, _ = yysep3384, yyq3384, yy2arr3384
			const yyr3384 bool = false
			yyq3384[0] = x.User != ""
			yyq3384[1] = x.Role != ""
			yyq3384[2] = x.Type != ""
			yyq3384[3] = x.Level != ""
			var yynn3384 int
			if yyr3384 || yy2arr3384 {
				r.EncodeArrayStart(4)
			} else {
				yynn3384 = 0
				for _, b := range yyq3384 {
					if b {
						yynn3384++
					}
				}
				r.EncodeMapStart(yynn3384)
				yynn3384 = 0
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3384[0] {
					yym3386 := z.EncBinary()
					_ = yym3386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3387 := z.EncBinary()
					_ = yym3387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3384[1] {
					yym3389 := z.EncBinary()
					_ = yym3389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3390 := z.EncBinary()
					_ = yym3390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3384[2] {
					yym3392 := z.EncBinary()
					_ = yym3392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3393 := z.EncBinary()
					_ = yym3393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3384[3] {
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3397 := z.DecBinary()
	_ = yym3397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3398 := r.ContainerType()
		if yyct3398 == codecSelferValueTypeMap1234 {
			yyl3398 := r.ReadMapStart()
			if yyl3398 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3398, d)
			}
		} else if yyct3398 == codecSelferValueTypeArray1234 {
			yyl3398 := r.ReadArrayStart()
			if yyl3398 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3398, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3399Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3399Slc
	var yyhl3399 bool = l >= 0
	for yyj3399 := 0; ; yyj3399++ {
		if yyhl3399 {
			if yyj3399 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3399Slc = r.DecodeBytes(yys3399Slc, true, true)
		yys3399 := string(yys3399Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3399 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3399)
		} // end switch yys3399
	} // end for yyj3399
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3404 int
	var yyb3404 bool
	var yyhl3404 bool = l >= 0
	yyj3404++
	if yyhl3404 {
		yyb3404 = yyj3404 > l
	} else {
		yyb3404 = r.CheckBreak()
	}
	if yyb3404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3404++
	if yyhl3404 {
		yyb3404 = yyj3404 > l
	} else {
		yyb3404 = r.CheckBreak()
	}
	if yyb3404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3404++
	if yyhl3404 {
		yyb3404 = yyj3404 > l
	} else {
		yyb3404 = r.CheckBreak()
	}
	if yyb3404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3404++
	if yyhl3404 {
		yyb3404 = yyj3404 > l
	} else {
		yyb3404 = r.CheckBreak()
	}
	if yyb3404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3404++
		if yyhl3404 {
			yyb3404 = yyj3404 > l
		} else {
			yyb3404 = r.CheckBreak()
		}
		if yyb3404 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3404-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3409 := z.EncBinary()
		_ = yym3409
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3410 := !z.EncBinary()
			yy2arr3410 := z.EncBasicHandle().StructToArray
			var yyq3410 [5]bool
			_, _, _ = yysep3410, yyq3410, yy2arr3410
			const yyr3410 bool = false
			yyq3410[0] = x.Kind != ""
			yyq3410[1] = x.APIVersion != ""
			yyq3410[2] = true
			var yynn3410 int
			if yyr3410 || yy2arr3410 {
				r.EncodeArrayStart(5)
			} else {
				yynn3410 = 2
				for _, b := range yyq3410 {
					if b {
						yynn3410++
					}
				}
				r.EncodeMapStart(yynn3410)
				yynn3410 = 0
			}
			if yyr3410 || yy2arr3410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3410[0] {
					yym3412 := z.EncBinary()
					_ = yym3412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3410[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3413 := z.EncBinary()
					_ = yym3413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3410 || yy2arr3410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3410[1] {
					yym3415 := z.EncBinary()
					_ = yym3415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3410[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3416 := z.EncBinary()
					_ = yym3416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3410 || yy2arr3410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3410[2] {
					yy3418 := &x.ObjectMeta
					yy3418.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3410[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3419 := &x.ObjectMeta
					yy3419.CodecEncodeSelf(e)
				}
			}
			if yyr3410 || yy2arr3410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3421 := z.EncBinary()
				_ = yym3421
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3422 := z.EncBinary()
				_ = yym3422
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3410 || yy2arr3410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3424 := z.EncBinary()
					_ = yym3424
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3410 || yy2arr3410 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3426 := z.DecBinary()
	_ = yym3426
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3427 := r.ContainerType()
		if yyct3427 == codecSelferValueTypeMap1234 {
			yyl3427 := r.ReadMapStart()
			if yyl3427 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3427, d)
			}
		} else if yyct3427 == codecSelferValueTypeArray1234 {
			yyl3427 := r.ReadArrayStart()
			if yyl3427 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3427, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3428Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3428Slc
	var yyhl3428 bool = l >= 0
	for yyj3428 := 0; ; yyj3428++ {
		if yyhl3428 {
			if yyj3428 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3428Slc = r.DecodeBytes(yys3428Slc, true, true)
		yys3428 := string(yys3428Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3428 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3431 := &x.ObjectMeta
				yyv3431.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3433 := &x.Data
				yym3434 := z.DecBinary()
				_ = yym3434
				if false {
				} else {
					*yyv3433 = r.DecodeBytes(*(*[]byte)(yyv3433), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3428)
		} // end switch yys3428
	} // end for yyj3428
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3435 int
	var yyb3435 bool
	var yyhl3435 bool = l >= 0
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3438 := &x.ObjectMeta
		yyv3438.CodecDecodeSelf(d)
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3440 := &x.Data
		yym3441 := z.DecBinary()
		_ = yym3441
		if false {
		} else {
			*yyv3440 = r.DecodeBytes(*(*[]byte)(yyv3440), false, false)
		}
	}
	for {
		yyj3435++
		if yyhl3435 {
			yyb3435 = yyj3435 > l
		} else {
			yyb3435 = r.CheckBreak()
		}
		if yyb3435 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3435-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3442 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3442.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3443 := *v
	yyh3443, yyl3443 := z.DecSliceHelperStart()
	var yyc3443 bool
	if yyl3443 == 0 {
		if yyv3443 == nil {
			yyv3443 = []PersistentVolumeAccessMode{}
			yyc3443 = true
		} else if len(yyv3443) != 0 {
			yyv3443 = yyv3443[:0]
			yyc3443 = true
		}
	} else if yyl3443 > 0 {
		var yyrr3443, yyrl3443 int
		var yyrt3443 bool
		if yyl3443 > cap(yyv3443) {

			yyrl3443, yyrt3443 = z.DecInferLen(yyl3443, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3443 {
				if yyrl3443 <= cap(yyv3443) {
					yyv3443 = yyv3443[:yyrl3443]
				} else {
					yyv3443 = make([]PersistentVolumeAccessMode, yyrl3443)
				}
			} else {
				yyv3443 = make([]PersistentVolumeAccessMode, yyrl3443)
			}
			yyc3443 = true
			yyrr3443 = len(yyv3443)
		} else if yyl3443 != len(yyv3443) {
			yyv3443 = yyv3443[:yyl3443]
			yyc3443 = true
		}
		yyj3443 := 0
		for ; yyj3443 < yyrr3443; yyj3443++ {
			yyh3443.ElemContainerState(yyj3443)
			if r.TryDecodeAsNil() {
				yyv3443[yyj3443] = ""
			} else {
				yyv3443[yyj3443] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3443 {
			for ; yyj3443 < yyl3443; yyj3443++ {
				yyv3443 = append(yyv3443, "")
				yyh3443.ElemContainerState(yyj3443)
				if r.TryDecodeAsNil() {
					yyv3443[yyj3443] = ""
				} else {
					yyv3443[yyj3443] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3443 := 0
		for ; !r.CheckBreak(); yyj3443++ {

			if yyj3443 >= len(yyv3443) {
				yyv3443 = append(yyv3443, "") // var yyz3443 PersistentVolumeAccessMode
				yyc3443 = true
			}
			yyh3443.ElemContainerState(yyj3443)
			if yyj3443 < len(yyv3443) {
				if r.TryDecodeAsNil() {
					yyv3443[yyj3443] = ""
				} else {
					yyv3443[yyj3443] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3443 < len(yyv3443) {
			yyv3443 = yyv3443[:yyj3443]
			yyc3443 = true
		} else if yyj3443 == 0 && yyv3443 == nil {
			yyv3443 = []PersistentVolumeAccessMode{}
			yyc3443 = true
		}
	}
	yyh3443.End()
	if yyc3443 {
		*v = yyv3443
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3447 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3448 := &yyv3447
		yy3448.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3449 := *v
	yyh3449, yyl3449 := z.DecSliceHelperStart()
	var yyc3449 bool
	if yyl3449 == 0 {
		if yyv3449 == nil {
			yyv3449 = []PersistentVolume{}
			yyc3449 = true
		} else if len(yyv3449) != 0 {
			yyv3449 = yyv3449[:0]
			yyc3449 = true
		}
	} else if yyl3449 > 0 {
		var yyrr3449, yyrl3449 int
		var yyrt3449 bool
		if yyl3449 > cap(yyv3449) {

			yyrg3449 := len(yyv3449) > 0
			yyv23449 := yyv3449
			yyrl3449, yyrt3449 = z.DecInferLen(yyl3449, z.DecBasicHandle().MaxInitLen, 384)
			if yyrt3449 {
				if yyrl3449 <= cap(yyv3449) {
					yyv3449 = yyv3449[:yyrl3449]
				} else {
					yyv3449 = make([]PersistentVolume, yyrl3449)
				}
			} else {
				yyv3449 = make([]PersistentVolume, yyrl3449)
			}
			yyc3449 = true
			yyrr3449 = len(yyv3449)
			if yyrg3449 {
				copy(yyv3449, yyv23449)
			}
		} else if yyl3449 != len(yyv3449) {
			yyv3449 = yyv3449[:yyl3449]
			yyc3449 = true
		}
		yyj3449 := 0
		for ; yyj3449 < yyrr3449; yyj3449++ {
			yyh3449.ElemContainerState(yyj3449)
			if r.TryDecodeAsNil() {
				yyv3449[yyj3449] = PersistentVolume{}
			} else {
				yyv3450 := &yyv3449[yyj3449]
				yyv3450.CodecDecodeSelf(d)
			}

		}
		if yyrt3449 {
			for ; yyj3449 < yyl3449; yyj3449++ {
				yyv3449 = append(yyv3449, PersistentVolume{})
				yyh3449.ElemContainerState(yyj3449)
				if r.TryDecodeAsNil() {
					yyv3449[yyj3449] = PersistentVolume{}
				} else {
					yyv3451 := &yyv3449[yyj3449]
					yyv3451.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3449 := 0
		for ; !r.CheckBreak(); yyj3449++ {

			if yyj3449 >= len(yyv3449) {
				yyv3449 = append(yyv3449, PersistentVolume{}) // var yyz3449 PersistentVolume
				yyc3449 = true
			}
			yyh3449.ElemContainerState(yyj3449)
			if yyj3449 < len(yyv3449) {
				if r.TryDecodeAsNil() {
					yyv3449[yyj3449] = PersistentVolume{}
				} else {
					yyv3452 := &yyv3449[yyj3449]
					yyv3452.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3449 < len(yyv3449) {
			yyv3449 = yyv3449[:yyj3449]
			yyc3449 = true
		} else if yyj3449 == 0 && yyv3449 == nil {
			yyv3449 = []PersistentVolume{}
			yyc3449 = true
		}
	}
	yyh3449.End()
	if yyc3449 {
		*v = yyv3449
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3453 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3454 := &yyv3453
		yy3454.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3455 := *v
	yyh3455, yyl3455 := z.DecSliceHelperStart()
	var yyc3455 bool
	if yyl3455 == 0 {
		if yyv3455 == nil {
			yyv3455 = []PersistentVolumeClaim{}
			yyc3455 = true
		} else if len(yyv3455) != 0 {
			yyv3455 = yyv3455[:0]
			yyc3455 = true
		}
	} else if yyl3455 > 0 {
		var yyrr3455, yyrl3455 int
		var yyrt3455 bool
		if yyl3455 > cap(yyv3455) {

			yyrg3455 := len(yyv3455) > 0
			yyv23455 := yyv3455
			yyrl3455, yyrt3455 = z.DecInferLen(yyl3455, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt3455 {
				if yyrl3455 <= cap(yyv3455) {
					yyv3455 = yyv3455[:yyrl3455]
				} else {
					yyv3455 = make([]PersistentVolumeClaim, yyrl3455)
				}
			} else {
				yyv3455 = make([]PersistentVolumeClaim, yyrl3455)
			}
			yyc3455 = true
			yyrr3455 = len(yyv3455)
			if yyrg3455 {
				copy(yyv3455, yyv23455)
			}
		} else if yyl3455 != len(yyv3455) {
			yyv3455 = yyv3455[:yyl3455]
			yyc3455 = true
		}
		yyj3455 := 0
		for ; yyj3455 < yyrr3455; yyj3455++ {
			yyh3455.ElemContainerState(yyj3455)
			if r.TryDecodeAsNil() {
				yyv3455[yyj3455] = PersistentVolumeClaim{}
			} else {
				yyv3456 := &yyv3455[yyj3455]
				yyv3456.CodecDecodeSelf(d)
			}

		}
		if yyrt3455 {
			for ; yyj3455 < yyl3455; yyj3455++ {
				yyv3455 = append(yyv3455, PersistentVolumeClaim{})
				yyh3455.ElemContainerState(yyj3455)
				if r.TryDecodeAsNil() {
					yyv3455[yyj3455] = PersistentVolumeClaim{}
				} else {
					yyv3457 := &yyv3455[yyj3455]
					yyv3457.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3455 := 0
		for ; !r.CheckBreak(); yyj3455++ {

			if yyj3455 >= len(yyv3455) {
				yyv3455 = append(yyv3455, PersistentVolumeClaim{}) // var yyz3455 PersistentVolumeClaim
				yyc3455 = true
			}
			yyh3455.ElemContainerState(yyj3455)
			if yyj3455 < len(yyv3455) {
				if r.TryDecodeAsNil() {
					yyv3455[yyj3455] = PersistentVolumeClaim{}
				} else {
					yyv3458 := &yyv3455[yyj3455]
					yyv3458.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3455 < len(yyv3455) {
			yyv3455 = yyv3455[:yyj3455]
			yyc3455 = true
		} else if yyj3455 == 0 && yyv3455 == nil {
			yyv3455 = []PersistentVolumeClaim{}
			yyc3455 = true
		}
	}
	yyh3455.End()
	if yyc3455 {
		*v = yyv3455
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3459 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3460 := &yyv3459
		yy3460.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3461 := *v
	yyh3461, yyl3461 := z.DecSliceHelperStart()
	var yyc3461 bool
	if yyl3461 == 0 {
		if yyv3461 == nil {
			yyv3461 = []DownwardAPIVolumeFile{}
			yyc3461 = true
		} else if len(yyv3461) != 0 {
			yyv3461 = yyv3461[:0]
			yyc3461 = true
		}
	} else if yyl3461 > 0 {
		var yyrr3461, yyrl3461 int
		var yyrt3461 bool
		if yyl3461 > cap(yyv3461) {

			yyrg3461 := len(yyv3461) > 0
			yyv23461 := yyv3461
			yyrl3461, yyrt3461 = z.DecInferLen(yyl3461, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt3461 {
				if yyrl3461 <= cap(yyv3461) {
					yyv3461 = yyv3461[:yyrl3461]
				} else {
					yyv3461 = make([]DownwardAPIVolumeFile, yyrl3461)
				}
			} else {
				yyv3461 = make([]DownwardAPIVolumeFile, yyrl3461)
			}
			yyc3461 = true
			yyrr3461 = len(yyv3461)
			if yyrg3461 {
				copy(yyv3461, yyv23461)
			}
		} else if yyl3461 != len(yyv3461) {
			yyv3461 = yyv3461[:yyl3461]
			yyc3461 = true
		}
		yyj3461 := 0
		for ; yyj3461 < yyrr3461; yyj3461++ {
			yyh3461.ElemContainerState(yyj3461)
			if r.TryDecodeAsNil() {
				yyv3461[yyj3461] = DownwardAPIVolumeFile{}
			} else {
				yyv3462 := &yyv3461[yyj3461]
				yyv3462.CodecDecodeSelf(d)
			}

		}
		if yyrt3461 {
			for ; yyj3461 < yyl3461; yyj3461++ {
				yyv3461 = append(yyv3461, DownwardAPIVolumeFile{})
				yyh3461.ElemContainerState(yyj3461)
				if r.TryDecodeAsNil() {
					yyv3461[yyj3461] = DownwardAPIVolumeFile{}
				} else {
					yyv3463 := &yyv3461[yyj3461]
					yyv3463.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3461 := 0
		for ; !r.CheckBreak(); yyj3461++ {

			if yyj3461 >= len(yyv3461) {
				yyv3461 = append(yyv3461, DownwardAPIVolumeFile{}) // var yyz3461 DownwardAPIVolumeFile
				yyc3461 = true
			}
			yyh3461.ElemContainerState(yyj3461)
			if yyj3461 < len(yyv3461) {
				if r.TryDecodeAsNil() {
					yyv3461[yyj3461] = DownwardAPIVolumeFile{}
				} else {
					yyv3464 := &yyv3461[yyj3461]
					yyv3464.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3461 < len(yyv3461) {
			yyv3461 = yyv3461[:yyj3461]
			yyc3461 = true
		} else if yyj3461 == 0 && yyv3461 == nil {
			yyv3461 = []DownwardAPIVolumeFile{}
			yyc3461 = true
		}
	}
	yyh3461.End()
	if yyc3461 {
		*v = yyv3461
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3465 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3465.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3466 := *v
	yyh3466, yyl3466 := z.DecSliceHelperStart()
	var yyc3466 bool
	if yyl3466 == 0 {
		if yyv3466 == nil {
			yyv3466 = []Capability{}
			yyc3466 = true
		} else if len(yyv3466) != 0 {
			yyv3466 = yyv3466[:0]
			yyc3466 = true
		}
	} else if yyl3466 > 0 {
		var yyrr3466, yyrl3466 int
		var yyrt3466 bool
		if yyl3466 > cap(yyv3466) {

			yyrl3466, yyrt3466 = z.DecInferLen(yyl3466, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3466 {
				if yyrl3466 <= cap(yyv3466) {
					yyv3466 = yyv3466[:yyrl3466]
				} else {
					yyv3466 = make([]Capability, yyrl3466)
				}
			} else {
				yyv3466 = make([]Capability, yyrl3466)
			}
			yyc3466 = true
			yyrr3466 = len(yyv3466)
		} else if yyl3466 != len(yyv3466) {
			yyv3466 = yyv3466[:yyl3466]
			yyc3466 = true
		}
		yyj3466 := 0
		for ; yyj3466 < yyrr3466; yyj3466++ {
			yyh3466.ElemContainerState(yyj3466)
			if r.TryDecodeAsNil() {
				yyv3466[yyj3466] = ""
			} else {
				yyv3466[yyj3466] = Capability(r.DecodeString())
			}

		}
		if yyrt3466 {
			for ; yyj3466 < yyl3466; yyj3466++ {
				yyv3466 = append(yyv3466, "")
				yyh3466.ElemContainerState(yyj3466)
				if r.TryDecodeAsNil() {
					yyv3466[yyj3466] = ""
				} else {
					yyv3466[yyj3466] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj3466 := 0
		for ; !r.CheckBreak(); yyj3466++ {

			if yyj3466 >= len(yyv3466) {
				yyv3466 = append(yyv3466, "") // var yyz3466 Capability
				yyc3466 = true
			}
			yyh3466.ElemContainerState(yyj3466)
			if yyj3466 < len(yyv3466) {
				if r.TryDecodeAsNil() {
					yyv3466[yyj3466] = ""
				} else {
					yyv3466[yyj3466] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3466 < len(yyv3466) {
			yyv3466 = yyv3466[:yyj3466]
			yyc3466 = true
		} else if yyj3466 == 0 && yyv3466 == nil {
			yyv3466 = []Capability{}
			yyc3466 = true
		}
	}
	yyh3466.End()
	if yyc3466 {
		*v = yyv3466
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3470 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3471 := &yyv3470
		yy3471.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3472 := *v
	yyh3472, yyl3472 := z.DecSliceHelperStart()
	var yyc3472 bool
	if yyl3472 == 0 {
		if yyv3472 == nil {
			yyv3472 = []ContainerPort{}
			yyc3472 = true
		} else if len(yyv3472) != 0 {
			yyv3472 = yyv3472[:0]
			yyc3472 = true
		}
	} else if yyl3472 > 0 {
		var yyrr3472, yyrl3472 int
		var yyrt3472 bool
		if yyl3472 > cap(yyv3472) {

			yyrg3472 := len(yyv3472) > 0
			yyv23472 := yyv3472
			yyrl3472, yyrt3472 = z.DecInferLen(yyl3472, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3472 {
				if yyrl3472 <= cap(yyv3472) {
					yyv3472 = yyv3472[:yyrl3472]
				} else {
					yyv3472 = make([]ContainerPort, yyrl3472)
				}
			} else {
				yyv3472 = make([]ContainerPort, yyrl3472)
			}
			yyc3472 = true
			yyrr3472 = len(yyv3472)
			if yyrg3472 {
				copy(yyv3472, yyv23472)
			}
		} else if yyl3472 != len(yyv3472) {
			yyv3472 = yyv3472[:yyl3472]
			yyc3472 = true
		}
		yyj3472 := 0
		for ; yyj3472 < yyrr3472; yyj3472++ {
			yyh3472.ElemContainerState(yyj3472)
			if r.TryDecodeAsNil() {
				yyv3472[yyj3472] = ContainerPort{}
			} else {
				yyv3473 := &yyv3472[yyj3472]
				yyv3473.CodecDecodeSelf(d)
			}

		}
		if yyrt3472 {
			for ; yyj3472 < yyl3472; yyj3472++ {
				yyv3472 = append(yyv3472, ContainerPort{})
				yyh3472.ElemContainerState(yyj3472)
				if r.TryDecodeAsNil() {
					yyv3472[yyj3472] = ContainerPort{}
				} else {
					yyv3474 := &yyv3472[yyj3472]
					yyv3474.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3472 := 0
		for ; !r.CheckBreak(); yyj3472++ {

			if yyj3472 >= len(yyv3472) {
				yyv3472 = append(yyv3472, ContainerPort{}) // var yyz3472 ContainerPort
				yyc3472 = true
			}
			yyh3472.ElemContainerState(yyj3472)
			if yyj3472 < len(yyv3472) {
				if r.TryDecodeAsNil() {
					yyv3472[yyj3472] = ContainerPort{}
				} else {
					yyv3475 := &yyv3472[yyj3472]
					yyv3475.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3472 < len(yyv3472) {
			yyv3472 = yyv3472[:yyj3472]
			yyc3472 = true
		} else if yyj3472 == 0 && yyv3472 == nil {
			yyv3472 = []ContainerPort{}
			yyc3472 = true
		}
	}
	yyh3472.End()
	if yyc3472 {
		*v = yyv3472
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3476 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3477 := &yyv3476
		yy3477.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3478 := *v
	yyh3478, yyl3478 := z.DecSliceHelperStart()
	var yyc3478 bool
	if yyl3478 == 0 {
		if yyv3478 == nil {
			yyv3478 = []EnvVar{}
			yyc3478 = true
		} else if len(yyv3478) != 0 {
			yyv3478 = yyv3478[:0]
			yyc3478 = true
		}
	} else if yyl3478 > 0 {
		var yyrr3478, yyrl3478 int
		var yyrt3478 bool
		if yyl3478 > cap(yyv3478) {

			yyrg3478 := len(yyv3478) > 0
			yyv23478 := yyv3478
			yyrl3478, yyrt3478 = z.DecInferLen(yyl3478, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3478 {
				if yyrl3478 <= cap(yyv3478) {
					yyv3478 = yyv3478[:yyrl3478]
				} else {
					yyv3478 = make([]EnvVar, yyrl3478)
				}
			} else {
				yyv3478 = make([]EnvVar, yyrl3478)
			}
			yyc3478 = true
			yyrr3478 = len(yyv3478)
			if yyrg3478 {
				copy(yyv3478, yyv23478)
			}
		} else if yyl3478 != len(yyv3478) {
			yyv3478 = yyv3478[:yyl3478]
			yyc3478 = true
		}
		yyj3478 := 0
		for ; yyj3478 < yyrr3478; yyj3478++ {
			yyh3478.ElemContainerState(yyj3478)
			if r.TryDecodeAsNil() {
				yyv3478[yyj3478] = EnvVar{}
			} else {
				yyv3479 := &yyv3478[yyj3478]
				yyv3479.CodecDecodeSelf(d)
			}

		}
		if yyrt3478 {
			for ; yyj3478 < yyl3478; yyj3478++ {
				yyv3478 = append(yyv3478, EnvVar{})
				yyh3478.ElemContainerState(yyj3478)
				if r.TryDecodeAsNil() {
					yyv3478[yyj3478] = EnvVar{}
				} else {
					yyv3480 := &yyv3478[yyj3478]
					yyv3480.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3478 := 0
		for ; !r.CheckBreak(); yyj3478++ {

			if yyj3478 >= len(yyv3478) {
				yyv3478 = append(yyv3478, EnvVar{}) // var yyz3478 EnvVar
				yyc3478 = true
			}
			yyh3478.ElemContainerState(yyj3478)
			if yyj3478 < len(yyv3478) {
				if r.TryDecodeAsNil() {
					yyv3478[yyj3478] = EnvVar{}
				} else {
					yyv3481 := &yyv3478[yyj3478]
					yyv3481.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3478 < len(yyv3478) {
			yyv3478 = yyv3478[:yyj3478]
			yyc3478 = true
		} else if yyj3478 == 0 && yyv3478 == nil {
			yyv3478 = []EnvVar{}
			yyc3478 = true
		}
	}
	yyh3478.End()
	if yyc3478 {
		*v = yyv3478
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3482 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3483 := &yyv3482
		yy3483.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3484 := *v
	yyh3484, yyl3484 := z.DecSliceHelperStart()
	var yyc3484 bool
	if yyl3484 == 0 {
		if yyv3484 == nil {
			yyv3484 = []VolumeMount{}
			yyc3484 = true
		} else if len(yyv3484) != 0 {
			yyv3484 = yyv3484[:0]
			yyc3484 = true
		}
	} else if yyl3484 > 0 {
		var yyrr3484, yyrl3484 int
		var yyrt3484 bool
		if yyl3484 > cap(yyv3484) {

			yyrg3484 := len(yyv3484) > 0
			yyv23484 := yyv3484
			yyrl3484, yyrt3484 = z.DecInferLen(yyl3484, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3484 {
				if yyrl3484 <= cap(yyv3484) {
					yyv3484 = yyv3484[:yyrl3484]
				} else {
					yyv3484 = make([]VolumeMount, yyrl3484)
				}
			} else {
				yyv3484 = make([]VolumeMount, yyrl3484)
			}
			yyc3484 = true
			yyrr3484 = len(yyv3484)
			if yyrg3484 {
				copy(yyv3484, yyv23484)
			}
		} else if yyl3484 != len(yyv3484) {
			yyv3484 = yyv3484[:yyl3484]
			yyc3484 = true
		}
		yyj3484 := 0
		for ; yyj3484 < yyrr3484; yyj3484++ {
			yyh3484.ElemContainerState(yyj3484)
			if r.TryDecodeAsNil() {
				yyv3484[yyj3484] = VolumeMount{}
			} else {
				yyv3485 := &yyv3484[yyj3484]
				yyv3485.CodecDecodeSelf(d)
			}

		}
		if yyrt3484 {
			for ; yyj3484 < yyl3484; yyj3484++ {
				yyv3484 = append(yyv3484, VolumeMount{})
				yyh3484.ElemContainerState(yyj3484)
				if r.TryDecodeAsNil() {
					yyv3484[yyj3484] = VolumeMount{}
				} else {
					yyv3486 := &yyv3484[yyj3484]
					yyv3486.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3484 := 0
		for ; !r.CheckBreak(); yyj3484++ {

			if yyj3484 >= len(yyv3484) {
				yyv3484 = append(yyv3484, VolumeMount{}) // var yyz3484 VolumeMount
				yyc3484 = true
			}
			yyh3484.ElemContainerState(yyj3484)
			if yyj3484 < len(yyv3484) {
				if r.TryDecodeAsNil() {
					yyv3484[yyj3484] = VolumeMount{}
				} else {
					yyv3487 := &yyv3484[yyj3484]
					yyv3487.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3484 < len(yyv3484) {
			yyv3484 = yyv3484[:yyj3484]
			yyc3484 = true
		} else if yyj3484 == 0 && yyv3484 == nil {
			yyv3484 = []VolumeMount{}
			yyc3484 = true
		}
	}
	yyh3484.End()
	if yyc3484 {
		*v = yyv3484
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3488 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3489 := &yyv3488
		yy3489.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3490 := *v
	yyh3490, yyl3490 := z.DecSliceHelperStart()
	var yyc3490 bool
	if yyl3490 == 0 {
		if yyv3490 == nil {
			yyv3490 = []Pod{}
			yyc3490 = true
		} else if len(yyv3490) != 0 {
			yyv3490 = yyv3490[:0]
			yyc3490 = true
		}
	} else if yyl3490 > 0 {
		var yyrr3490, yyrl3490 int
		var yyrt3490 bool
		if yyl3490 > cap(yyv3490) {

			yyrg3490 := len(yyv3490) > 0
			yyv23490 := yyv3490
			yyrl3490, yyrt3490 = z.DecInferLen(yyl3490, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt3490 {
				if yyrl3490 <= cap(yyv3490) {
					yyv3490 = yyv3490[:yyrl3490]
				} else {
					yyv3490 = make([]Pod, yyrl3490)
				}
			} else {
				yyv3490 = make([]Pod, yyrl3490)
			}
			yyc3490 = true
			yyrr3490 = len(yyv3490)
			if yyrg3490 {
				copy(yyv3490, yyv23490)
			}
		} else if yyl3490 != len(yyv3490) {
			yyv3490 = yyv3490[:yyl3490]
			yyc3490 = true
		}
		yyj3490 := 0
		for ; yyj3490 < yyrr3490; yyj3490++ {
			yyh3490.ElemContainerState(yyj3490)
			if r.TryDecodeAsNil() {
				yyv3490[yyj3490] = Pod{}
			} else {
				yyv3491 := &yyv3490[yyj3490]
				yyv3491.CodecDecodeSelf(d)
			}

		}
		if yyrt3490 {
			for ; yyj3490 < yyl3490; yyj3490++ {
				yyv3490 = append(yyv3490, Pod{})
				yyh3490.ElemContainerState(yyj3490)
				if r.TryDecodeAsNil() {
					yyv3490[yyj3490] = Pod{}
				} else {
					yyv3492 := &yyv3490[yyj3490]
					yyv3492.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3490 := 0
		for ; !r.CheckBreak(); yyj3490++ {

			if yyj3490 >= len(yyv3490) {
				yyv3490 = append(yyv3490, Pod{}) // var yyz3490 Pod
				yyc3490 = true
			}
			yyh3490.ElemContainerState(yyj3490)
			if yyj3490 < len(yyv3490) {
				if r.TryDecodeAsNil() {
					yyv3490[yyj3490] = Pod{}
				} else {
					yyv3493 := &yyv3490[yyj3490]
					yyv3493.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3490 < len(yyv3490) {
			yyv3490 = yyv3490[:yyj3490]
			yyc3490 = true
		} else if yyj3490 == 0 && yyv3490 == nil {
			yyv3490 = []Pod{}
			yyc3490 = true
		}
	}
	yyh3490.End()
	if yyc3490 {
		*v = yyv3490
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3494 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3495 := &yyv3494
		yy3495.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3496 := *v
	yyh3496, yyl3496 := z.DecSliceHelperStart()
	var yyc3496 bool
	if yyl3496 == 0 {
		if yyv3496 == nil {
			yyv3496 = []Volume{}
			yyc3496 = true
		} else if len(yyv3496) != 0 {
			yyv3496 = yyv3496[:0]
			yyc3496 = true
		}
	} else if yyl3496 > 0 {
		var yyrr3496, yyrl3496 int
		var yyrt3496 bool
		if yyl3496 > cap(yyv3496) {

			yyrg3496 := len(yyv3496) > 0
			yyv23496 := yyv3496
			yyrl3496, yyrt3496 = z.DecInferLen(yyl3496, z.DecBasicHandle().MaxInitLen, 144)
			if yyrt3496 {
				if yyrl3496 <= cap(yyv3496) {
					yyv3496 = yyv3496[:yyrl3496]
				} else {
					yyv3496 = make([]Volume, yyrl3496)
				}
			} else {
				yyv3496 = make([]Volume, yyrl3496)
			}
			yyc3496 = true
			yyrr3496 = len(yyv3496)
			if yyrg3496 {
				copy(yyv3496, yyv23496)
			}
		} else if yyl3496 != len(yyv3496) {
			yyv3496 = yyv3496[:yyl3496]
			yyc3496 = true
		}
		yyj3496 := 0
		for ; yyj3496 < yyrr3496; yyj3496++ {
			yyh3496.ElemContainerState(yyj3496)
			if r.TryDecodeAsNil() {
				yyv3496[yyj3496] = Volume{}
			} else {
				yyv3497 := &yyv3496[yyj3496]
				yyv3497.CodecDecodeSelf(d)
			}

		}
		if yyrt3496 {
			for ; yyj3496 < yyl3496; yyj3496++ {
				yyv3496 = append(yyv3496, Volume{})
				yyh3496.ElemContainerState(yyj3496)
				if r.TryDecodeAsNil() {
					yyv3496[yyj3496] = Volume{}
				} else {
					yyv3498 := &yyv3496[yyj3496]
					yyv3498.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3496 := 0
		for ; !r.CheckBreak(); yyj3496++ {

			if yyj3496 >= len(yyv3496) {
				yyv3496 = append(yyv3496, Volume{}) // var yyz3496 Volume
				yyc3496 = true
			}
			yyh3496.ElemContainerState(yyj3496)
			if yyj3496 < len(yyv3496) {
				if r.TryDecodeAsNil() {
					yyv3496[yyj3496] = Volume{}
				} else {
					yyv3499 := &yyv3496[yyj3496]
					yyv3499.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3496 < len(yyv3496) {
			yyv3496 = yyv3496[:yyj3496]
			yyc3496 = true
		} else if yyj3496 == 0 && yyv3496 == nil {
			yyv3496 = []Volume{}
			yyc3496 = true
		}
	}
	yyh3496.End()
	if yyc3496 {
		*v = yyv3496
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3500 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3501 := &yyv3500
		yy3501.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3502 := *v
	yyh3502, yyl3502 := z.DecSliceHelperStart()
	var yyc3502 bool
	if yyl3502 == 0 {
		if yyv3502 == nil {
			yyv3502 = []Container{}
			yyc3502 = true
		} else if len(yyv3502) != 0 {
			yyv3502 = yyv3502[:0]
			yyc3502 = true
		}
	} else if yyl3502 > 0 {
		var yyrr3502, yyrl3502 int
		var yyrt3502 bool
		if yyl3502 > cap(yyv3502) {

			yyrg3502 := len(yyv3502) > 0
			yyv23502 := yyv3502
			yyrl3502, yyrt3502 = z.DecInferLen(yyl3502, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt3502 {
				if yyrl3502 <= cap(yyv3502) {
					yyv3502 = yyv3502[:yyrl3502]
				} else {
					yyv3502 = make([]Container, yyrl3502)
				}
			} else {
				yyv3502 = make([]Container, yyrl3502)
			}
			yyc3502 = true
			yyrr3502 = len(yyv3502)
			if yyrg3502 {
				copy(yyv3502, yyv23502)
			}
		} else if yyl3502 != len(yyv3502) {
			yyv3502 = yyv3502[:yyl3502]
			yyc3502 = true
		}
		yyj3502 := 0
		for ; yyj3502 < yyrr3502; yyj3502++ {
			yyh3502.ElemContainerState(yyj3502)
			if r.TryDecodeAsNil() {
				yyv3502[yyj3502] = Container{}
			} else {
				yyv3503 := &yyv3502[yyj3502]
				yyv3503.CodecDecodeSelf(d)
			}

		}
		if yyrt3502 {
			for ; yyj3502 < yyl3502; yyj3502++ {
				yyv3502 = append(yyv3502, Container{})
				yyh3502.ElemContainerState(yyj3502)
				if r.TryDecodeAsNil() {
					yyv3502[yyj3502] = Container{}
				} else {
					yyv3504 := &yyv3502[yyj3502]
					yyv3504.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3502 := 0
		for ; !r.CheckBreak(); yyj3502++ {

			if yyj3502 >= len(yyv3502) {
				yyv3502 = append(yyv3502, Container{}) // var yyz3502 Container
				yyc3502 = true
			}
			yyh3502.ElemContainerState(yyj3502)
			if yyj3502 < len(yyv3502) {
				if r.TryDecodeAsNil() {
					yyv3502[yyj3502] = Container{}
				} else {
					yyv3505 := &yyv3502[yyj3502]
					yyv3505.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3502 < len(yyv3502) {
			yyv3502 = yyv3502[:yyj3502]
			yyc3502 = true
		} else if yyj3502 == 0 && yyv3502 == nil {
			yyv3502 = []Container{}
			yyc3502 = true
		}
	}
	yyh3502.End()
	if yyc3502 {
		*v = yyv3502
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3506 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3507 := &yyv3506
		yy3507.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3508 := *v
	yyh3508, yyl3508 := z.DecSliceHelperStart()
	var yyc3508 bool
	if yyl3508 == 0 {
		if yyv3508 == nil {
			yyv3508 = []LocalObjectReference{}
			yyc3508 = true
		} else if len(yyv3508) != 0 {
			yyv3508 = yyv3508[:0]
			yyc3508 = true
		}
	} else if yyl3508 > 0 {
		var yyrr3508, yyrl3508 int
		var yyrt3508 bool
		if yyl3508 > cap(yyv3508) {

			yyrg3508 := len(yyv3508) > 0
			yyv23508 := yyv3508
			yyrl3508, yyrt3508 = z.DecInferLen(yyl3508, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3508 {
				if yyrl3508 <= cap(yyv3508) {
					yyv3508 = yyv3508[:yyrl3508]
				} else {
					yyv3508 = make([]LocalObjectReference, yyrl3508)
				}
			} else {
				yyv3508 = make([]LocalObjectReference, yyrl3508)
			}
			yyc3508 = true
			yyrr3508 = len(yyv3508)
			if yyrg3508 {
				copy(yyv3508, yyv23508)
			}
		} else if yyl3508 != len(yyv3508) {
			yyv3508 = yyv3508[:yyl3508]
			yyc3508 = true
		}
		yyj3508 := 0
		for ; yyj3508 < yyrr3508; yyj3508++ {
			yyh3508.ElemContainerState(yyj3508)
			if r.TryDecodeAsNil() {
				yyv3508[yyj3508] = LocalObjectReference{}
			} else {
				yyv3509 := &yyv3508[yyj3508]
				yyv3509.CodecDecodeSelf(d)
			}

		}
		if yyrt3508 {
			for ; yyj3508 < yyl3508; yyj3508++ {
				yyv3508 = append(yyv3508, LocalObjectReference{})
				yyh3508.ElemContainerState(yyj3508)
				if r.TryDecodeAsNil() {
					yyv3508[yyj3508] = LocalObjectReference{}
				} else {
					yyv3510 := &yyv3508[yyj3508]
					yyv3510.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3508 := 0
		for ; !r.CheckBreak(); yyj3508++ {

			if yyj3508 >= len(yyv3508) {
				yyv3508 = append(yyv3508, LocalObjectReference{}) // var yyz3508 LocalObjectReference
				yyc3508 = true
			}
			yyh3508.ElemContainerState(yyj3508)
			if yyj3508 < len(yyv3508) {
				if r.TryDecodeAsNil() {
					yyv3508[yyj3508] = LocalObjectReference{}
				} else {
					yyv3511 := &yyv3508[yyj3508]
					yyv3511.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3508 < len(yyv3508) {
			yyv3508 = yyv3508[:yyj3508]
			yyc3508 = true
		} else if yyj3508 == 0 && yyv3508 == nil {
			yyv3508 = []LocalObjectReference{}
			yyc3508 = true
		}
	}
	yyh3508.End()
	if yyc3508 {
		*v = yyv3508
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3512 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3513 := &yyv3512
		yy3513.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3514 := *v
	yyh3514, yyl3514 := z.DecSliceHelperStart()
	var yyc3514 bool
	if yyl3514 == 0 {
		if yyv3514 == nil {
			yyv3514 = []PodCondition{}
			yyc3514 = true
		} else if len(yyv3514) != 0 {
			yyv3514 = yyv3514[:0]
			yyc3514 = true
		}
	} else if yyl3514 > 0 {
		var yyrr3514, yyrl3514 int
		var yyrt3514 bool
		if yyl3514 > cap(yyv3514) {

			yyrg3514 := len(yyv3514) > 0
			yyv23514 := yyv3514
			yyrl3514, yyrt3514 = z.DecInferLen(yyl3514, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3514 {
				if yyrl3514 <= cap(yyv3514) {
					yyv3514 = yyv3514[:yyrl3514]
				} else {
					yyv3514 = make([]PodCondition, yyrl3514)
				}
			} else {
				yyv3514 = make([]PodCondition, yyrl3514)
			}
			yyc3514 = true
			yyrr3514 = len(yyv3514)
			if yyrg3514 {
				copy(yyv3514, yyv23514)
			}
		} else if yyl3514 != len(yyv3514) {
			yyv3514 = yyv3514[:yyl3514]
			yyc3514 = true
		}
		yyj3514 := 0
		for ; yyj3514 < yyrr3514; yyj3514++ {
			yyh3514.ElemContainerState(yyj3514)
			if r.TryDecodeAsNil() {
				yyv3514[yyj3514] = PodCondition{}
			} else {
				yyv3515 := &yyv3514[yyj3514]
				yyv3515.CodecDecodeSelf(d)
			}

		}
		if yyrt3514 {
			for ; yyj3514 < yyl3514; yyj3514++ {
				yyv3514 = append(yyv3514, PodCondition{})
				yyh3514.ElemContainerState(yyj3514)
				if r.TryDecodeAsNil() {
					yyv3514[yyj3514] = PodCondition{}
				} else {
					yyv3516 := &yyv3514[yyj3514]
					yyv3516.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3514 := 0
		for ; !r.CheckBreak(); yyj3514++ {

			if yyj3514 >= len(yyv3514) {
				yyv3514 = append(yyv3514, PodCondition{}) // var yyz3514 PodCondition
				yyc3514 = true
			}
			yyh3514.ElemContainerState(yyj3514)
			if yyj3514 < len(yyv3514) {
				if r.TryDecodeAsNil() {
					yyv3514[yyj3514] = PodCondition{}
				} else {
					yyv3517 := &yyv3514[yyj3514]
					yyv3517.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3514 < len(yyv3514) {
			yyv3514 = yyv3514[:yyj3514]
			yyc3514 = true
		} else if yyj3514 == 0 && yyv3514 == nil {
			yyv3514 = []PodCondition{}
			yyc3514 = true
		}
	}
	yyh3514.End()
	if yyc3514 {
		*v = yyv3514
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3518 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3519 := &yyv3518
		yy3519.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3520 := *v
	yyh3520, yyl3520 := z.DecSliceHelperStart()
	var yyc3520 bool
	if yyl3520 == 0 {
		if yyv3520 == nil {
			yyv3520 = []ContainerStatus{}
			yyc3520 = true
		} else if len(yyv3520) != 0 {
			yyv3520 = yyv3520[:0]
			yyc3520 = true
		}
	} else if yyl3520 > 0 {
		var yyrr3520, yyrl3520 int
		var yyrt3520 bool
		if yyl3520 > cap(yyv3520) {

			yyrg3520 := len(yyv3520) > 0
			yyv23520 := yyv3520
			yyrl3520, yyrt3520 = z.DecInferLen(yyl3520, z.DecBasicHandle().MaxInitLen, 128)
			if yyrt3520 {
				if yyrl3520 <= cap(yyv3520) {
					yyv3520 = yyv3520[:yyrl3520]
				} else {
					yyv3520 = make([]ContainerStatus, yyrl3520)
				}
			} else {
				yyv3520 = make([]ContainerStatus, yyrl3520)
			}
			yyc3520 = true
			yyrr3520 = len(yyv3520)
			if yyrg3520 {
				copy(yyv3520, yyv23520)
			}
		} else if yyl3520 != len(yyv3520) {
			yyv3520 = yyv3520[:yyl3520]
			yyc3520 = true
		}
		yyj3520 := 0
		for ; yyj3520 < yyrr3520; yyj3520++ {
			yyh3520.ElemContainerState(yyj3520)
			if r.TryDecodeAsNil() {
				yyv3520[yyj3520] = ContainerStatus{}
			} else {
				yyv3521 := &yyv3520[yyj3520]
				yyv3521.CodecDecodeSelf(d)
			}

		}
		if yyrt3520 {
			for ; yyj3520 < yyl3520; yyj3520++ {
				yyv3520 = append(yyv3520, ContainerStatus{})
				yyh3520.ElemContainerState(yyj3520)
				if r.TryDecodeAsNil() {
					yyv3520[yyj3520] = ContainerStatus{}
				} else {
					yyv3522 := &yyv3520[yyj3520]
					yyv3522.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3520 := 0
		for ; !r.CheckBreak(); yyj3520++ {

			if yyj3520 >= len(yyv3520) {
				yyv3520 = append(yyv3520, ContainerStatus{}) // var yyz3520 ContainerStatus
				yyc3520 = true
			}
			yyh3520.ElemContainerState(yyj3520)
			if yyj3520 < len(yyv3520) {
				if r.TryDecodeAsNil() {
					yyv3520[yyj3520] = ContainerStatus{}
				} else {
					yyv3523 := &yyv3520[yyj3520]
					yyv3523.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3520 < len(yyv3520) {
			yyv3520 = yyv3520[:yyj3520]
			yyc3520 = true
		} else if yyj3520 == 0 && yyv3520 == nil {
			yyv3520 = []ContainerStatus{}
			yyc3520 = true
		}
	}
	yyh3520.End()
	if yyc3520 {
		*v = yyv3520
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3524 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3525 := &yyv3524
		yy3525.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3526 := *v
	yyh3526, yyl3526 := z.DecSliceHelperStart()
	var yyc3526 bool
	if yyl3526 == 0 {
		if yyv3526 == nil {
			yyv3526 = []PodTemplate{}
			yyc3526 = true
		} else if len(yyv3526) != 0 {
			yyv3526 = yyv3526[:0]
			yyc3526 = true
		}
	} else if yyl3526 > 0 {
		var yyrr3526, yyrl3526 int
		var yyrt3526 bool
		if yyl3526 > cap(yyv3526) {

			yyrg3526 := len(yyv3526) > 0
			yyv23526 := yyv3526
			yyrl3526, yyrt3526 = z.DecInferLen(yyl3526, z.DecBasicHandle().MaxInitLen, 520)
			if yyrt3526 {
				if yyrl3526 <= cap(yyv3526) {
					yyv3526 = yyv3526[:yyrl3526]
				} else {
					yyv3526 = make([]PodTemplate, yyrl3526)
				}
			} else {
				yyv3526 = make([]PodTemplate, yyrl3526)
			}
			yyc3526 = true
			yyrr3526 = len(yyv3526)
			if yyrg3526 {
				copy(yyv3526, yyv23526)
			}
		} else if yyl3526 != len(yyv3526) {
			yyv3526 = yyv3526[:yyl3526]
			yyc3526 = true
		}
		yyj3526 := 0
		for ; yyj3526 < yyrr3526; yyj3526++ {
			yyh3526.ElemContainerState(yyj3526)
			if r.TryDecodeAsNil() {
				yyv3526[yyj3526] = PodTemplate{}
			} else {
				yyv3527 := &yyv3526[yyj3526]
				yyv3527.CodecDecodeSelf(d)
			}

		}
		if yyrt3526 {
			for ; yyj3526 < yyl3526; yyj3526++ {
				yyv3526 = append(yyv3526, PodTemplate{})
				yyh3526.ElemContainerState(yyj3526)
				if r.TryDecodeAsNil() {
					yyv3526[yyj3526] = PodTemplate{}
				} else {
					yyv3528 := &yyv3526[yyj3526]
					yyv3528.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3526 := 0
		for ; !r.CheckBreak(); yyj3526++ {

			if yyj3526 >= len(yyv3526) {
				yyv3526 = append(yyv3526, PodTemplate{}) // var yyz3526 PodTemplate
				yyc3526 = true
			}
			yyh3526.ElemContainerState(yyj3526)
			if yyj3526 < len(yyv3526) {
				if r.TryDecodeAsNil() {
					yyv3526[yyj3526] = PodTemplate{}
				} else {
					yyv3529 := &yyv3526[yyj3526]
					yyv3529.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3526 < len(yyv3526) {
			yyv3526 = yyv3526[:yyj3526]
			yyc3526 = true
		} else if yyj3526 == 0 && yyv3526 == nil {
			yyv3526 = []PodTemplate{}
			yyc3526 = true
		}
	}
	yyh3526.End()
	if yyc3526 {
		*v = yyv3526
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3530 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3531 := &yyv3530
		yy3531.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3532 := *v
	yyh3532, yyl3532 := z.DecSliceHelperStart()
	var yyc3532 bool
	if yyl3532 == 0 {
		if yyv3532 == nil {
			yyv3532 = []ReplicationController{}
			yyc3532 = true
		} else if len(yyv3532) != 0 {
			yyv3532 = yyv3532[:0]
			yyc3532 = true
		}
	} else if yyl3532 > 0 {
		var yyrr3532, yyrl3532 int
		var yyrt3532 bool
		if yyl3532 > cap(yyv3532) {

			yyrg3532 := len(yyv3532) > 0
			yyv23532 := yyv3532
			yyrl3532, yyrt3532 = z.DecInferLen(yyl3532, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3532 {
				if yyrl3532 <= cap(yyv3532) {
					yyv3532 = yyv3532[:yyrl3532]
				} else {
					yyv3532 = make([]ReplicationController, yyrl3532)
				}
			} else {
				yyv3532 = make([]ReplicationController, yyrl3532)
			}
			yyc3532 = true
			yyrr3532 = len(yyv3532)
			if yyrg3532 {
				copy(yyv3532, yyv23532)
			}
		} else if yyl3532 != len(yyv3532) {
			yyv3532 = yyv3532[:yyl3532]
			yyc3532 = true
		}
		yyj3532 := 0
		for ; yyj3532 < yyrr3532; yyj3532++ {
			yyh3532.ElemContainerState(yyj3532)
			if r.TryDecodeAsNil() {
				yyv3532[yyj3532] = ReplicationController{}
			} else {
				yyv3533 := &yyv3532[yyj3532]
				yyv3533.CodecDecodeSelf(d)
			}

		}
		if yyrt3532 {
			for ; yyj3532 < yyl3532; yyj3532++ {
				yyv3532 = append(yyv3532, ReplicationController{})
				yyh3532.ElemContainerState(yyj3532)
				if r.TryDecodeAsNil() {
					yyv3532[yyj3532] = ReplicationController{}
				} else {
					yyv3534 := &yyv3532[yyj3532]
					yyv3534.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3532 := 0
		for ; !r.CheckBreak(); yyj3532++ {

			if yyj3532 >= len(yyv3532) {
				yyv3532 = append(yyv3532, ReplicationController{}) // var yyz3532 ReplicationController
				yyc3532 = true
			}
			yyh3532.ElemContainerState(yyj3532)
			if yyj3532 < len(yyv3532) {
				if r.TryDecodeAsNil() {
					yyv3532[yyj3532] = ReplicationController{}
				} else {
					yyv3535 := &yyv3532[yyj3532]
					yyv3535.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3532 < len(yyv3532) {
			yyv3532 = yyv3532[:yyj3532]
			yyc3532 = true
		} else if yyj3532 == 0 && yyv3532 == nil {
			yyv3532 = []ReplicationController{}
			yyc3532 = true
		}
	}
	yyh3532.End()
	if yyc3532 {
		*v = yyv3532
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3536 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3537 := &yyv3536
		yy3537.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3538 := *v
	yyh3538, yyl3538 := z.DecSliceHelperStart()
	var yyc3538 bool
	if yyl3538 == 0 {
		if yyv3538 == nil {
			yyv3538 = []Service{}
			yyc3538 = true
		} else if len(yyv3538) != 0 {
			yyv3538 = yyv3538[:0]
			yyc3538 = true
		}
	} else if yyl3538 > 0 {
		var yyrr3538, yyrl3538 int
		var yyrt3538 bool
		if yyl3538 > cap(yyv3538) {

			yyrg3538 := len(yyv3538) > 0
			yyv23538 := yyv3538
			yyrl3538, yyrt3538 = z.DecInferLen(yyl3538, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt3538 {
				if yyrl3538 <= cap(yyv3538) {
					yyv3538 = yyv3538[:yyrl3538]
				} else {
					yyv3538 = make([]Service, yyrl3538)
				}
			} else {
				yyv3538 = make([]Service, yyrl3538)
			}
			yyc3538 = true
			yyrr3538 = len(yyv3538)
			if yyrg3538 {
				copy(yyv3538, yyv23538)
			}
		} else if yyl3538 != len(yyv3538) {
			yyv3538 = yyv3538[:yyl3538]
			yyc3538 = true
		}
		yyj3538 := 0
		for ; yyj3538 < yyrr3538; yyj3538++ {
			yyh3538.ElemContainerState(yyj3538)
			if r.TryDecodeAsNil() {
				yyv3538[yyj3538] = Service{}
			} else {
				yyv3539 := &yyv3538[yyj3538]
				yyv3539.CodecDecodeSelf(d)
			}

		}
		if yyrt3538 {
			for ; yyj3538 < yyl3538; yyj3538++ {
				yyv3538 = append(yyv3538, Service{})
				yyh3538.ElemContainerState(yyj3538)
				if r.TryDecodeAsNil() {
					yyv3538[yyj3538] = Service{}
				} else {
					yyv3540 := &yyv3538[yyj3538]
					yyv3540.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3538 := 0
		for ; !r.CheckBreak(); yyj3538++ {

			if yyj3538 >= len(yyv3538) {
				yyv3538 = append(yyv3538, Service{}) // var yyz3538 Service
				yyc3538 = true
			}
			yyh3538.ElemContainerState(yyj3538)
			if yyj3538 < len(yyv3538) {
				if r.TryDecodeAsNil() {
					yyv3538[yyj3538] = Service{}
				} else {
					yyv3541 := &yyv3538[yyj3538]
					yyv3541.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3538 < len(yyv3538) {
			yyv3538 = yyv3538[:yyj3538]
			yyc3538 = true
		} else if yyj3538 == 0 && yyv3538 == nil {
			yyv3538 = []Service{}
			yyc3538 = true
		}
	}
	yyh3538.End()
	if yyc3538 {
		*v = yyv3538
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3542 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3543 := &yyv3542
		yy3543.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3544 := *v
	yyh3544, yyl3544 := z.DecSliceHelperStart()
	var yyc3544 bool
	if yyl3544 == 0 {
		if yyv3544 == nil {
			yyv3544 = []LoadBalancerIngress{}
			yyc3544 = true
		} else if len(yyv3544) != 0 {
			yyv3544 = yyv3544[:0]
			yyc3544 = true
		}
	} else if yyl3544 > 0 {
		var yyrr3544, yyrl3544 int
		var yyrt3544 bool
		if yyl3544 > cap(yyv3544) {

			yyrg3544 := len(yyv3544) > 0
			yyv23544 := yyv3544
			yyrl3544, yyrt3544 = z.DecInferLen(yyl3544, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3544 {
				if yyrl3544 <= cap(yyv3544) {
					yyv3544 = yyv3544[:yyrl3544]
				} else {
					yyv3544 = make([]LoadBalancerIngress, yyrl3544)
				}
			} else {
				yyv3544 = make([]LoadBalancerIngress, yyrl3544)
			}
			yyc3544 = true
			yyrr3544 = len(yyv3544)
			if yyrg3544 {
				copy(yyv3544, yyv23544)
			}
		} else if yyl3544 != len(yyv3544) {
			yyv3544 = yyv3544[:yyl3544]
			yyc3544 = true
		}
		yyj3544 := 0
		for ; yyj3544 < yyrr3544; yyj3544++ {
			yyh3544.ElemContainerState(yyj3544)
			if r.TryDecodeAsNil() {
				yyv3544[yyj3544] = LoadBalancerIngress{}
			} else {
				yyv3545 := &yyv3544[yyj3544]
				yyv3545.CodecDecodeSelf(d)
			}

		}
		if yyrt3544 {
			for ; yyj3544 < yyl3544; yyj3544++ {
				yyv3544 = append(yyv3544, LoadBalancerIngress{})
				yyh3544.ElemContainerState(yyj3544)
				if r.TryDecodeAsNil() {
					yyv3544[yyj3544] = LoadBalancerIngress{}
				} else {
					yyv3546 := &yyv3544[yyj3544]
					yyv3546.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3544 := 0
		for ; !r.CheckBreak(); yyj3544++ {

			if yyj3544 >= len(yyv3544) {
				yyv3544 = append(yyv3544, LoadBalancerIngress{}) // var yyz3544 LoadBalancerIngress
				yyc3544 = true
			}
			yyh3544.ElemContainerState(yyj3544)
			if yyj3544 < len(yyv3544) {
				if r.TryDecodeAsNil() {
					yyv3544[yyj3544] = LoadBalancerIngress{}
				} else {
					yyv3547 := &yyv3544[yyj3544]
					yyv3547.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3544 < len(yyv3544) {
			yyv3544 = yyv3544[:yyj3544]
			yyc3544 = true
		} else if yyj3544 == 0 && yyv3544 == nil {
			yyv3544 = []LoadBalancerIngress{}
			yyc3544 = true
		}
	}
	yyh3544.End()
	if yyc3544 {
		*v = yyv3544
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3548 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3549 := &yyv3548
		yy3549.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3550 := *v
	yyh3550, yyl3550 := z.DecSliceHelperStart()
	var yyc3550 bool
	if yyl3550 == 0 {
		if yyv3550 == nil {
			yyv3550 = []ServicePort{}
			yyc3550 = true
		} else if len(yyv3550) != 0 {
			yyv3550 = yyv3550[:0]
			yyc3550 = true
		}
	} else if yyl3550 > 0 {
		var yyrr3550, yyrl3550 int
		var yyrt3550 bool
		if yyl3550 > cap(yyv3550) {

			yyrg3550 := len(yyv3550) > 0
			yyv23550 := yyv3550
			yyrl3550, yyrt3550 = z.DecInferLen(yyl3550, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt3550 {
				if yyrl3550 <= cap(yyv3550) {
					yyv3550 = yyv3550[:yyrl3550]
				} else {
					yyv3550 = make([]ServicePort, yyrl3550)
				}
			} else {
				yyv3550 = make([]ServicePort, yyrl3550)
			}
			yyc3550 = true
			yyrr3550 = len(yyv3550)
			if yyrg3550 {
				copy(yyv3550, yyv23550)
			}
		} else if yyl3550 != len(yyv3550) {
			yyv3550 = yyv3550[:yyl3550]
			yyc3550 = true
		}
		yyj3550 := 0
		for ; yyj3550 < yyrr3550; yyj3550++ {
			yyh3550.ElemContainerState(yyj3550)
			if r.TryDecodeAsNil() {
				yyv3550[yyj3550] = ServicePort{}
			} else {
				yyv3551 := &yyv3550[yyj3550]
				yyv3551.CodecDecodeSelf(d)
			}

		}
		if yyrt3550 {
			for ; yyj3550 < yyl3550; yyj3550++ {
				yyv3550 = append(yyv3550, ServicePort{})
				yyh3550.ElemContainerState(yyj3550)
				if r.TryDecodeAsNil() {
					yyv3550[yyj3550] = ServicePort{}
				} else {
					yyv3552 := &yyv3550[yyj3550]
					yyv3552.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3550 := 0
		for ; !r.CheckBreak(); yyj3550++ {

			if yyj3550 >= len(yyv3550) {
				yyv3550 = append(yyv3550, ServicePort{}) // var yyz3550 ServicePort
				yyc3550 = true
			}
			yyh3550.ElemContainerState(yyj3550)
			if yyj3550 < len(yyv3550) {
				if r.TryDecodeAsNil() {
					yyv3550[yyj3550] = ServicePort{}
				} else {
					yyv3553 := &yyv3550[yyj3550]
					yyv3553.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3550 < len(yyv3550) {
			yyv3550 = yyv3550[:yyj3550]
			yyc3550 = true
		} else if yyj3550 == 0 && yyv3550 == nil {
			yyv3550 = []ServicePort{}
			yyc3550 = true
		}
	}
	yyh3550.End()
	if yyc3550 {
		*v = yyv3550
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3554 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3555 := &yyv3554
		yy3555.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3556 := *v
	yyh3556, yyl3556 := z.DecSliceHelperStart()
	var yyc3556 bool
	if yyl3556 == 0 {
		if yyv3556 == nil {
			yyv3556 = []ObjectReference{}
			yyc3556 = true
		} else if len(yyv3556) != 0 {
			yyv3556 = yyv3556[:0]
			yyc3556 = true
		}
	} else if yyl3556 > 0 {
		var yyrr3556, yyrl3556 int
		var yyrt3556 bool
		if yyl3556 > cap(yyv3556) {

			yyrg3556 := len(yyv3556) > 0
			yyv23556 := yyv3556
			yyrl3556, yyrt3556 = z.DecInferLen(yyl3556, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3556 {
				if yyrl3556 <= cap(yyv3556) {
					yyv3556 = yyv3556[:yyrl3556]
				} else {
					yyv3556 = make([]ObjectReference, yyrl3556)
				}
			} else {
				yyv3556 = make([]ObjectReference, yyrl3556)
			}
			yyc3556 = true
			yyrr3556 = len(yyv3556)
			if yyrg3556 {
				copy(yyv3556, yyv23556)
			}
		} else if yyl3556 != len(yyv3556) {
			yyv3556 = yyv3556[:yyl3556]
			yyc3556 = true
		}
		yyj3556 := 0
		for ; yyj3556 < yyrr3556; yyj3556++ {
			yyh3556.ElemContainerState(yyj3556)
			if r.TryDecodeAsNil() {
				yyv3556[yyj3556] = ObjectReference{}
			} else {
				yyv3557 := &yyv3556[yyj3556]
				yyv3557.CodecDecodeSelf(d)
			}

		}
		if yyrt3556 {
			for ; yyj3556 < yyl3556; yyj3556++ {
				yyv3556 = append(yyv3556, ObjectReference{})
				yyh3556.ElemContainerState(yyj3556)
				if r.TryDecodeAsNil() {
					yyv3556[yyj3556] = ObjectReference{}
				} else {
					yyv3558 := &yyv3556[yyj3556]
					yyv3558.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3556 := 0
		for ; !r.CheckBreak(); yyj3556++ {

			if yyj3556 >= len(yyv3556) {
				yyv3556 = append(yyv3556, ObjectReference{}) // var yyz3556 ObjectReference
				yyc3556 = true
			}
			yyh3556.ElemContainerState(yyj3556)
			if yyj3556 < len(yyv3556) {
				if r.TryDecodeAsNil() {
					yyv3556[yyj3556] = ObjectReference{}
				} else {
					yyv3559 := &yyv3556[yyj3556]
					yyv3559.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3556 < len(yyv3556) {
			yyv3556 = yyv3556[:yyj3556]
			yyc3556 = true
		} else if yyj3556 == 0 && yyv3556 == nil {
			yyv3556 = []ObjectReference{}
			yyc3556 = true
		}
	}
	yyh3556.End()
	if yyc3556 {
		*v = yyv3556
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3560 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3561 := &yyv3560
		yy3561.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3562 := *v
	yyh3562, yyl3562 := z.DecSliceHelperStart()
	var yyc3562 bool
	if yyl3562 == 0 {
		if yyv3562 == nil {
			yyv3562 = []ServiceAccount{}
			yyc3562 = true
		} else if len(yyv3562) != 0 {
			yyv3562 = yyv3562[:0]
			yyc3562 = true
		}
	} else if yyl3562 > 0 {
		var yyrr3562, yyrl3562 int
		var yyrt3562 bool
		if yyl3562 > cap(yyv3562) {

			yyrg3562 := len(yyv3562) > 0
			yyv23562 := yyv3562
			yyrl3562, yyrt3562 = z.DecInferLen(yyl3562, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt3562 {
				if yyrl3562 <= cap(yyv3562) {
					yyv3562 = yyv3562[:yyrl3562]
				} else {
					yyv3562 = make([]ServiceAccount, yyrl3562)
				}
			} else {
				yyv3562 = make([]ServiceAccount, yyrl3562)
			}
			yyc3562 = true
			yyrr3562 = len(yyv3562)
			if yyrg3562 {
				copy(yyv3562, yyv23562)
			}
		} else if yyl3562 != len(yyv3562) {
			yyv3562 = yyv3562[:yyl3562]
			yyc3562 = true
		}
		yyj3562 := 0
		for ; yyj3562 < yyrr3562; yyj3562++ {
			yyh3562.ElemContainerState(yyj3562)
			if r.TryDecodeAsNil() {
				yyv3562[yyj3562] = ServiceAccount{}
			} else {
				yyv3563 := &yyv3562[yyj3562]
				yyv3563.CodecDecodeSelf(d)
			}

		}
		if yyrt3562 {
			for ; yyj3562 < yyl3562; yyj3562++ {
				yyv3562 = append(yyv3562, ServiceAccount{})
				yyh3562.ElemContainerState(yyj3562)
				if r.TryDecodeAsNil() {
					yyv3562[yyj3562] = ServiceAccount{}
				} else {
					yyv3564 := &yyv3562[yyj3562]
					yyv3564.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3562 := 0
		for ; !r.CheckBreak(); yyj3562++ {

			if yyj3562 >= len(yyv3562) {
				yyv3562 = append(yyv3562, ServiceAccount{}) // var yyz3562 ServiceAccount
				yyc3562 = true
			}
			yyh3562.ElemContainerState(yyj3562)
			if yyj3562 < len(yyv3562) {
				if r.TryDecodeAsNil() {
					yyv3562[yyj3562] = ServiceAccount{}
				} else {
					yyv3565 := &yyv3562[yyj3562]
					yyv3565.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3562 < len(yyv3562) {
			yyv3562 = yyv3562[:yyj3562]
			yyc3562 = true
		} else if yyj3562 == 0 && yyv3562 == nil {
			yyv3562 = []ServiceAccount{}
			yyc3562 = true
		}
	}
	yyh3562.End()
	if yyc3562 {
		*v = yyv3562
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3566 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3567 := &yyv3566
		yy3567.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3568 := *v
	yyh3568, yyl3568 := z.DecSliceHelperStart()
	var yyc3568 bool
	if yyl3568 == 0 {
		if yyv3568 == nil {
			yyv3568 = []EndpointSubset{}
			yyc3568 = true
		} else if len(yyv3568) != 0 {
			yyv3568 = yyv3568[:0]
			yyc3568 = true
		}
	} else if yyl3568 > 0 {
		var yyrr3568, yyrl3568 int
		var yyrt3568 bool
		if yyl3568 > cap(yyv3568) {

			yyrg3568 := len(yyv3568) > 0
			yyv23568 := yyv3568
			yyrl3568, yyrt3568 = z.DecInferLen(yyl3568, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt3568 {
				if yyrl3568 <= cap(yyv3568) {
					yyv3568 = yyv3568[:yyrl3568]
				} else {
					yyv3568 = make([]EndpointSubset, yyrl3568)
				}
			} else {
				yyv3568 = make([]EndpointSubset, yyrl3568)
			}
			yyc3568 = true
			yyrr3568 = len(yyv3568)
			if yyrg3568 {
				copy(yyv3568, yyv23568)
			}
		} else if yyl3568 != len(yyv3568) {
			yyv3568 = yyv3568[:yyl3568]
			yyc3568 = true
		}
		yyj3568 := 0
		for ; yyj3568 < yyrr3568; yyj3568++ {
			yyh3568.ElemContainerState(yyj3568)
			if r.TryDecodeAsNil() {
				yyv3568[yyj3568] = EndpointSubset{}
			} else {
				yyv3569 := &yyv3568[yyj3568]
				yyv3569.CodecDecodeSelf(d)
			}

		}
		if yyrt3568 {
			for ; yyj3568 < yyl3568; yyj3568++ {
				yyv3568 = append(yyv3568, EndpointSubset{})
				yyh3568.ElemContainerState(yyj3568)
				if r.TryDecodeAsNil() {
					yyv3568[yyj3568] = EndpointSubset{}
				} else {
					yyv3570 := &yyv3568[yyj3568]
					yyv3570.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3568 := 0
		for ; !r.CheckBreak(); yyj3568++ {

			if yyj3568 >= len(yyv3568) {
				yyv3568 = append(yyv3568, EndpointSubset{}) // var yyz3568 EndpointSubset
				yyc3568 = true
			}
			yyh3568.ElemContainerState(yyj3568)
			if yyj3568 < len(yyv3568) {
				if r.TryDecodeAsNil() {
					yyv3568[yyj3568] = EndpointSubset{}
				} else {
					yyv3571 := &yyv3568[yyj3568]
					yyv3571.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3568 < len(yyv3568) {
			yyv3568 = yyv3568[:yyj3568]
			yyc3568 = true
		} else if yyj3568 == 0 && yyv3568 == nil {
			yyv3568 = []EndpointSubset{}
			yyc3568 = true
		}
	}
	yyh3568.End()
	if yyc3568 {
		*v = yyv3568
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3572 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3573 := &yyv3572
		yy3573.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3574 := *v
	yyh3574, yyl3574 := z.DecSliceHelperStart()
	var yyc3574 bool
	if yyl3574 == 0 {
		if yyv3574 == nil {
			yyv3574 = []EndpointAddress{}
			yyc3574 = true
		} else if len(yyv3574) != 0 {
			yyv3574 = yyv3574[:0]
			yyc3574 = true
		}
	} else if yyl3574 > 0 {
		var yyrr3574, yyrl3574 int
		var yyrt3574 bool
		if yyl3574 > cap(yyv3574) {

			yyrg3574 := len(yyv3574) > 0
			yyv23574 := yyv3574
			yyrl3574, yyrt3574 = z.DecInferLen(yyl3574, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3574 {
				if yyrl3574 <= cap(yyv3574) {
					yyv3574 = yyv3574[:yyrl3574]
				} else {
					yyv3574 = make([]EndpointAddress, yyrl3574)
				}
			} else {
				yyv3574 = make([]EndpointAddress, yyrl3574)
			}
			yyc3574 = true
			yyrr3574 = len(yyv3574)
			if yyrg3574 {
				copy(yyv3574, yyv23574)
			}
		} else if yyl3574 != len(yyv3574) {
			yyv3574 = yyv3574[:yyl3574]
			yyc3574 = true
		}
		yyj3574 := 0
		for ; yyj3574 < yyrr3574; yyj3574++ {
			yyh3574.ElemContainerState(yyj3574)
			if r.TryDecodeAsNil() {
				yyv3574[yyj3574] = EndpointAddress{}
			} else {
				yyv3575 := &yyv3574[yyj3574]
				yyv3575.CodecDecodeSelf(d)
			}

		}
		if yyrt3574 {
			for ; yyj3574 < yyl3574; yyj3574++ {
				yyv3574 = append(yyv3574, EndpointAddress{})
				yyh3574.ElemContainerState(yyj3574)
				if r.TryDecodeAsNil() {
					yyv3574[yyj3574] = EndpointAddress{}
				} else {
					yyv3576 := &yyv3574[yyj3574]
					yyv3576.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3574 := 0
		for ; !r.CheckBreak(); yyj3574++ {

			if yyj3574 >= len(yyv3574) {
				yyv3574 = append(yyv3574, EndpointAddress{}) // var yyz3574 EndpointAddress
				yyc3574 = true
			}
			yyh3574.ElemContainerState(yyj3574)
			if yyj3574 < len(yyv3574) {
				if r.TryDecodeAsNil() {
					yyv3574[yyj3574] = EndpointAddress{}
				} else {
					yyv3577 := &yyv3574[yyj3574]
					yyv3577.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3574 < len(yyv3574) {
			yyv3574 = yyv3574[:yyj3574]
			yyc3574 = true
		} else if yyj3574 == 0 && yyv3574 == nil {
			yyv3574 = []EndpointAddress{}
			yyc3574 = true
		}
	}
	yyh3574.End()
	if yyc3574 {
		*v = yyv3574
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3578 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3579 := &yyv3578
		yy3579.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3580 := *v
	yyh3580, yyl3580 := z.DecSliceHelperStart()
	var yyc3580 bool
	if yyl3580 == 0 {
		if yyv3580 == nil {
			yyv3580 = []EndpointPort{}
			yyc3580 = true
		} else if len(yyv3580) != 0 {
			yyv3580 = yyv3580[:0]
			yyc3580 = true
		}
	} else if yyl3580 > 0 {
		var yyrr3580, yyrl3580 int
		var yyrt3580 bool
		if yyl3580 > cap(yyv3580) {

			yyrg3580 := len(yyv3580) > 0
			yyv23580 := yyv3580
			yyrl3580, yyrt3580 = z.DecInferLen(yyl3580, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3580 {
				if yyrl3580 <= cap(yyv3580) {
					yyv3580 = yyv3580[:yyrl3580]
				} else {
					yyv3580 = make([]EndpointPort, yyrl3580)
				}
			} else {
				yyv3580 = make([]EndpointPort, yyrl3580)
			}
			yyc3580 = true
			yyrr3580 = len(yyv3580)
			if yyrg3580 {
				copy(yyv3580, yyv23580)
			}
		} else if yyl3580 != len(yyv3580) {
			yyv3580 = yyv3580[:yyl3580]
			yyc3580 = true
		}
		yyj3580 := 0
		for ; yyj3580 < yyrr3580; yyj3580++ {
			yyh3580.ElemContainerState(yyj3580)
			if r.TryDecodeAsNil() {
				yyv3580[yyj3580] = EndpointPort{}
			} else {
				yyv3581 := &yyv3580[yyj3580]
				yyv3581.CodecDecodeSelf(d)
			}

		}
		if yyrt3580 {
			for ; yyj3580 < yyl3580; yyj3580++ {
				yyv3580 = append(yyv3580, EndpointPort{})
				yyh3580.ElemContainerState(yyj3580)
				if r.TryDecodeAsNil() {
					yyv3580[yyj3580] = EndpointPort{}
				} else {
					yyv3582 := &yyv3580[yyj3580]
					yyv3582.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3580 := 0
		for ; !r.CheckBreak(); yyj3580++ {

			if yyj3580 >= len(yyv3580) {
				yyv3580 = append(yyv3580, EndpointPort{}) // var yyz3580 EndpointPort
				yyc3580 = true
			}
			yyh3580.ElemContainerState(yyj3580)
			if yyj3580 < len(yyv3580) {
				if r.TryDecodeAsNil() {
					yyv3580[yyj3580] = EndpointPort{}
				} else {
					yyv3583 := &yyv3580[yyj3580]
					yyv3583.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3580 < len(yyv3580) {
			yyv3580 = yyv3580[:yyj3580]
			yyc3580 = true
		} else if yyj3580 == 0 && yyv3580 == nil {
			yyv3580 = []EndpointPort{}
			yyc3580 = true
		}
	}
	yyh3580.End()
	if yyc3580 {
		*v = yyv3580
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3584 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3585 := &yyv3584
		yy3585.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3586 := *v
	yyh3586, yyl3586 := z.DecSliceHelperStart()
	var yyc3586 bool
	if yyl3586 == 0 {
		if yyv3586 == nil {
			yyv3586 = []Endpoints{}
			yyc3586 = true
		} else if len(yyv3586) != 0 {
			yyv3586 = yyv3586[:0]
			yyc3586 = true
		}
	} else if yyl3586 > 0 {
		var yyrr3586, yyrl3586 int
		var yyrt3586 bool
		if yyl3586 > cap(yyv3586) {

			yyrg3586 := len(yyv3586) > 0
			yyv23586 := yyv3586
			yyrl3586, yyrt3586 = z.DecInferLen(yyl3586, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3586 {
				if yyrl3586 <= cap(yyv3586) {
					yyv3586 = yyv3586[:yyrl3586]
				} else {
					yyv3586 = make([]Endpoints, yyrl3586)
				}
			} else {
				yyv3586 = make([]Endpoints, yyrl3586)
			}
			yyc3586 = true
			yyrr3586 = len(yyv3586)
			if yyrg3586 {
				copy(yyv3586, yyv23586)
			}
		} else if yyl3586 != len(yyv3586) {
			yyv3586 = yyv3586[:yyl3586]
			yyc3586 = true
		}
		yyj3586 := 0
		for ; yyj3586 < yyrr3586; yyj3586++ {
			yyh3586.ElemContainerState(yyj3586)
			if r.TryDecodeAsNil() {
				yyv3586[yyj3586] = Endpoints{}
			} else {
				yyv3587 := &yyv3586[yyj3586]
				yyv3587.CodecDecodeSelf(d)
			}

		}
		if yyrt3586 {
			for ; yyj3586 < yyl3586; yyj3586++ {
				yyv3586 = append(yyv3586, Endpoints{})
				yyh3586.ElemContainerState(yyj3586)
				if r.TryDecodeAsNil() {
					yyv3586[yyj3586] = Endpoints{}
				} else {
					yyv3588 := &yyv3586[yyj3586]
					yyv3588.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3586 := 0
		for ; !r.CheckBreak(); yyj3586++ {

			if yyj3586 >= len(yyv3586) {
				yyv3586 = append(yyv3586, Endpoints{}) // var yyz3586 Endpoints
				yyc3586 = true
			}
			yyh3586.ElemContainerState(yyj3586)
			if yyj3586 < len(yyv3586) {
				if r.TryDecodeAsNil() {
					yyv3586[yyj3586] = Endpoints{}
				} else {
					yyv3589 := &yyv3586[yyj3586]
					yyv3589.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3586 < len(yyv3586) {
			yyv3586 = yyv3586[:yyj3586]
			yyc3586 = true
		} else if yyj3586 == 0 && yyv3586 == nil {
			yyv3586 = []Endpoints{}
			yyc3586 = true
		}
	}
	yyh3586.End()
	if yyc3586 {
		*v = yyv3586
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3590 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3591 := &yyv3590
		yy3591.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3592 := *v
	yyh3592, yyl3592 := z.DecSliceHelperStart()
	var yyc3592 bool
	if yyl3592 == 0 {
		if yyv3592 == nil {
			yyv3592 = []NodeCondition{}
			yyc3592 = true
		} else if len(yyv3592) != 0 {
			yyv3592 = yyv3592[:0]
			yyc3592 = true
		}
	} else if yyl3592 > 0 {
		var yyrr3592, yyrl3592 int
		var yyrt3592 bool
		if yyl3592 > cap(yyv3592) {

			yyrg3592 := len(yyv3592) > 0
			yyv23592 := yyv3592
			yyrl3592, yyrt3592 = z.DecInferLen(yyl3592, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3592 {
				if yyrl3592 <= cap(yyv3592) {
					yyv3592 = yyv3592[:yyrl3592]
				} else {
					yyv3592 = make([]NodeCondition, yyrl3592)
				}
			} else {
				yyv3592 = make([]NodeCondition, yyrl3592)
			}
			yyc3592 = true
			yyrr3592 = len(yyv3592)
			if yyrg3592 {
				copy(yyv3592, yyv23592)
			}
		} else if yyl3592 != len(yyv3592) {
			yyv3592 = yyv3592[:yyl3592]
			yyc3592 = true
		}
		yyj3592 := 0
		for ; yyj3592 < yyrr3592; yyj3592++ {
			yyh3592.ElemContainerState(yyj3592)
			if r.TryDecodeAsNil() {
				yyv3592[yyj3592] = NodeCondition{}
			} else {
				yyv3593 := &yyv3592[yyj3592]
				yyv3593.CodecDecodeSelf(d)
			}

		}
		if yyrt3592 {
			for ; yyj3592 < yyl3592; yyj3592++ {
				yyv3592 = append(yyv3592, NodeCondition{})
				yyh3592.ElemContainerState(yyj3592)
				if r.TryDecodeAsNil() {
					yyv3592[yyj3592] = NodeCondition{}
				} else {
					yyv3594 := &yyv3592[yyj3592]
					yyv3594.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3592 := 0
		for ; !r.CheckBreak(); yyj3592++ {

			if yyj3592 >= len(yyv3592) {
				yyv3592 = append(yyv3592, NodeCondition{}) // var yyz3592 NodeCondition
				yyc3592 = true
			}
			yyh3592.ElemContainerState(yyj3592)
			if yyj3592 < len(yyv3592) {
				if r.TryDecodeAsNil() {
					yyv3592[yyj3592] = NodeCondition{}
				} else {
					yyv3595 := &yyv3592[yyj3592]
					yyv3595.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3592 < len(yyv3592) {
			yyv3592 = yyv3592[:yyj3592]
			yyc3592 = true
		} else if yyj3592 == 0 && yyv3592 == nil {
			yyv3592 = []NodeCondition{}
			yyc3592 = true
		}
	}
	yyh3592.End()
	if yyc3592 {
		*v = yyv3592
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3596 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3597 := &yyv3596
		yy3597.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3598 := *v
	yyh3598, yyl3598 := z.DecSliceHelperStart()
	var yyc3598 bool
	if yyl3598 == 0 {
		if yyv3598 == nil {
			yyv3598 = []NodeAddress{}
			yyc3598 = true
		} else if len(yyv3598) != 0 {
			yyv3598 = yyv3598[:0]
			yyc3598 = true
		}
	} else if yyl3598 > 0 {
		var yyrr3598, yyrl3598 int
		var yyrt3598 bool
		if yyl3598 > cap(yyv3598) {

			yyrg3598 := len(yyv3598) > 0
			yyv23598 := yyv3598
			yyrl3598, yyrt3598 = z.DecInferLen(yyl3598, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3598 {
				if yyrl3598 <= cap(yyv3598) {
					yyv3598 = yyv3598[:yyrl3598]
				} else {
					yyv3598 = make([]NodeAddress, yyrl3598)
				}
			} else {
				yyv3598 = make([]NodeAddress, yyrl3598)
			}
			yyc3598 = true
			yyrr3598 = len(yyv3598)
			if yyrg3598 {
				copy(yyv3598, yyv23598)
			}
		} else if yyl3598 != len(yyv3598) {
			yyv3598 = yyv3598[:yyl3598]
			yyc3598 = true
		}
		yyj3598 := 0
		for ; yyj3598 < yyrr3598; yyj3598++ {
			yyh3598.ElemContainerState(yyj3598)
			if r.TryDecodeAsNil() {
				yyv3598[yyj3598] = NodeAddress{}
			} else {
				yyv3599 := &yyv3598[yyj3598]
				yyv3599.CodecDecodeSelf(d)
			}

		}
		if yyrt3598 {
			for ; yyj3598 < yyl3598; yyj3598++ {
				yyv3598 = append(yyv3598, NodeAddress{})
				yyh3598.ElemContainerState(yyj3598)
				if r.TryDecodeAsNil() {
					yyv3598[yyj3598] = NodeAddress{}
				} else {
					yyv3600 := &yyv3598[yyj3598]
					yyv3600.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3598 := 0
		for ; !r.CheckBreak(); yyj3598++ {

			if yyj3598 >= len(yyv3598) {
				yyv3598 = append(yyv3598, NodeAddress{}) // var yyz3598 NodeAddress
				yyc3598 = true
			}
			yyh3598.ElemContainerState(yyj3598)
			if yyj3598 < len(yyv3598) {
				if r.TryDecodeAsNil() {
					yyv3598[yyj3598] = NodeAddress{}
				} else {
					yyv3601 := &yyv3598[yyj3598]
					yyv3601.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3598 < len(yyv3598) {
			yyv3598 = yyv3598[:yyj3598]
			yyc3598 = true
		} else if yyj3598 == 0 && yyv3598 == nil {
			yyv3598 = []NodeAddress{}
			yyc3598 = true
		}
	}
	yyh3598.End()
	if yyc3598 {
		*v = yyv3598
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3602, yyv3602 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk3602.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy3603 := &yyv3602
		yym3604 := z.EncBinary()
		_ = yym3604
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3603) {
		} else if !yym3604 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3603)
		} else {
			z.EncFallback(yy3603)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3605 := *v
	yyl3605 := r.ReadMapStart()
	yybh3605 := z.DecBasicHandle()
	if yyv3605 == nil {
		yyrl3605, _ := z.DecInferLen(yyl3605, yybh3605.MaxInitLen, 40)
		yyv3605 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3605)
		*v = yyv3605
	}
	var yymk3605 ResourceName
	var yymv3605 pkg3_resource.Quantity
	var yymg3605 bool
	if yybh3605.MapValueReset {
		yymg3605 = true
	}
	if yyl3605 > 0 {
		for yyj3605 := 0; yyj3605 < yyl3605; yyj3605++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3605 = ""
			} else {
				yymk3605 = ResourceName(r.DecodeString())
			}

			if yymg3605 {
				yymv3605 = yyv3605[yymk3605]
			} else {
				yymv3605 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3605 = pkg3_resource.Quantity{}
			} else {
				yyv3607 := &yymv3605
				yym3608 := z.DecBinary()
				_ = yym3608
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3607) {
				} else if !yym3608 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3607)
				} else {
					z.DecFallback(yyv3607, false)
				}
			}

			if yyv3605 != nil {
				yyv3605[yymk3605] = yymv3605
			}
		}
	} else if yyl3605 < 0 {
		for yyj3605 := 0; !r.CheckBreak(); yyj3605++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3605 = ""
			} else {
				yymk3605 = ResourceName(r.DecodeString())
			}

			if yymg3605 {
				yymv3605 = yyv3605[yymk3605]
			} else {
				yymv3605 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3605 = pkg3_resource.Quantity{}
			} else {
				yyv3610 := &yymv3605
				yym3611 := z.DecBinary()
				_ = yym3611
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3610) {
				} else if !yym3611 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3610)
				} else {
					z.DecFallback(yyv3610, false)
				}
			}

			if yyv3605 != nil {
				yyv3605[yymk3605] = yymv3605
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3612 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3613 := &yyv3612
		yy3613.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3614 := *v
	yyh3614, yyl3614 := z.DecSliceHelperStart()
	var yyc3614 bool
	if yyl3614 == 0 {
		if yyv3614 == nil {
			yyv3614 = []Node{}
			yyc3614 = true
		} else if len(yyv3614) != 0 {
			yyv3614 = yyv3614[:0]
			yyc3614 = true
		}
	} else if yyl3614 > 0 {
		var yyrr3614, yyrl3614 int
		var yyrt3614 bool
		if yyl3614 > cap(yyv3614) {

			yyrg3614 := len(yyv3614) > 0
			yyv23614 := yyv3614
			yyrl3614, yyrt3614 = z.DecInferLen(yyl3614, z.DecBasicHandle().MaxInitLen, 456)
			if yyrt3614 {
				if yyrl3614 <= cap(yyv3614) {
					yyv3614 = yyv3614[:yyrl3614]
				} else {
					yyv3614 = make([]Node, yyrl3614)
				}
			} else {
				yyv3614 = make([]Node, yyrl3614)
			}
			yyc3614 = true
			yyrr3614 = len(yyv3614)
			if yyrg3614 {
				copy(yyv3614, yyv23614)
			}
		} else if yyl3614 != len(yyv3614) {
			yyv3614 = yyv3614[:yyl3614]
			yyc3614 = true
		}
		yyj3614 := 0
		for ; yyj3614 < yyrr3614; yyj3614++ {
			yyh3614.ElemContainerState(yyj3614)
			if r.TryDecodeAsNil() {
				yyv3614[yyj3614] = Node{}
			} else {
				yyv3615 := &yyv3614[yyj3614]
				yyv3615.CodecDecodeSelf(d)
			}

		}
		if yyrt3614 {
			for ; yyj3614 < yyl3614; yyj3614++ {
				yyv3614 = append(yyv3614, Node{})
				yyh3614.ElemContainerState(yyj3614)
				if r.TryDecodeAsNil() {
					yyv3614[yyj3614] = Node{}
				} else {
					yyv3616 := &yyv3614[yyj3614]
					yyv3616.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3614 := 0
		for ; !r.CheckBreak(); yyj3614++ {

			if yyj3614 >= len(yyv3614) {
				yyv3614 = append(yyv3614, Node{}) // var yyz3614 Node
				yyc3614 = true
			}
			yyh3614.ElemContainerState(yyj3614)
			if yyj3614 < len(yyv3614) {
				if r.TryDecodeAsNil() {
					yyv3614[yyj3614] = Node{}
				} else {
					yyv3617 := &yyv3614[yyj3614]
					yyv3617.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3614 < len(yyv3614) {
			yyv3614 = yyv3614[:yyj3614]
			yyc3614 = true
		} else if yyj3614 == 0 && yyv3614 == nil {
			yyv3614 = []Node{}
			yyc3614 = true
		}
	}
	yyh3614.End()
	if yyc3614 {
		*v = yyv3614
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3618 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3618.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3619 := *v
	yyh3619, yyl3619 := z.DecSliceHelperStart()
	var yyc3619 bool
	if yyl3619 == 0 {
		if yyv3619 == nil {
			yyv3619 = []FinalizerName{}
			yyc3619 = true
		} else if len(yyv3619) != 0 {
			yyv3619 = yyv3619[:0]
			yyc3619 = true
		}
	} else if yyl3619 > 0 {
		var yyrr3619, yyrl3619 int
		var yyrt3619 bool
		if yyl3619 > cap(yyv3619) {

			yyrl3619, yyrt3619 = z.DecInferLen(yyl3619, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3619 {
				if yyrl3619 <= cap(yyv3619) {
					yyv3619 = yyv3619[:yyrl3619]
				} else {
					yyv3619 = make([]FinalizerName, yyrl3619)
				}
			} else {
				yyv3619 = make([]FinalizerName, yyrl3619)
			}
			yyc3619 = true
			yyrr3619 = len(yyv3619)
		} else if yyl3619 != len(yyv3619) {
			yyv3619 = yyv3619[:yyl3619]
			yyc3619 = true
		}
		yyj3619 := 0
		for ; yyj3619 < yyrr3619; yyj3619++ {
			yyh3619.ElemContainerState(yyj3619)
			if r.TryDecodeAsNil() {
				yyv3619[yyj3619] = ""
			} else {
				yyv3619[yyj3619] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3619 {
			for ; yyj3619 < yyl3619; yyj3619++ {
				yyv3619 = append(yyv3619, "")
				yyh3619.ElemContainerState(yyj3619)
				if r.TryDecodeAsNil() {
					yyv3619[yyj3619] = ""
				} else {
					yyv3619[yyj3619] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj3619 := 0
		for ; !r.CheckBreak(); yyj3619++ {

			if yyj3619 >= len(yyv3619) {
				yyv3619 = append(yyv3619, "") // var yyz3619 FinalizerName
				yyc3619 = true
			}
			yyh3619.ElemContainerState(yyj3619)
			if yyj3619 < len(yyv3619) {
				if r.TryDecodeAsNil() {
					yyv3619[yyj3619] = ""
				} else {
					yyv3619[yyj3619] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3619 < len(yyv3619) {
			yyv3619 = yyv3619[:yyj3619]
			yyc3619 = true
		} else if yyj3619 == 0 && yyv3619 == nil {
			yyv3619 = []FinalizerName{}
			yyc3619 = true
		}
	}
	yyh3619.End()
	if yyc3619 {
		*v = yyv3619
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3623 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3624 := &yyv3623
		yy3624.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3625 := *v
	yyh3625, yyl3625 := z.DecSliceHelperStart()
	var yyc3625 bool
	if yyl3625 == 0 {
		if yyv3625 == nil {
			yyv3625 = []Namespace{}
			yyc3625 = true
		} else if len(yyv3625) != 0 {
			yyv3625 = yyv3625[:0]
			yyc3625 = true
		}
	} else if yyl3625 > 0 {
		var yyrr3625, yyrl3625 int
		var yyrt3625 bool
		if yyl3625 > cap(yyv3625) {

			yyrg3625 := len(yyv3625) > 0
			yyv23625 := yyv3625
			yyrl3625, yyrt3625 = z.DecInferLen(yyl3625, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3625 {
				if yyrl3625 <= cap(yyv3625) {
					yyv3625 = yyv3625[:yyrl3625]
				} else {
					yyv3625 = make([]Namespace, yyrl3625)
				}
			} else {
				yyv3625 = make([]Namespace, yyrl3625)
			}
			yyc3625 = true
			yyrr3625 = len(yyv3625)
			if yyrg3625 {
				copy(yyv3625, yyv23625)
			}
		} else if yyl3625 != len(yyv3625) {
			yyv3625 = yyv3625[:yyl3625]
			yyc3625 = true
		}
		yyj3625 := 0
		for ; yyj3625 < yyrr3625; yyj3625++ {
			yyh3625.ElemContainerState(yyj3625)
			if r.TryDecodeAsNil() {
				yyv3625[yyj3625] = Namespace{}
			} else {
				yyv3626 := &yyv3625[yyj3625]
				yyv3626.CodecDecodeSelf(d)
			}

		}
		if yyrt3625 {
			for ; yyj3625 < yyl3625; yyj3625++ {
				yyv3625 = append(yyv3625, Namespace{})
				yyh3625.ElemContainerState(yyj3625)
				if r.TryDecodeAsNil() {
					yyv3625[yyj3625] = Namespace{}
				} else {
					yyv3627 := &yyv3625[yyj3625]
					yyv3627.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3625 := 0
		for ; !r.CheckBreak(); yyj3625++ {

			if yyj3625 >= len(yyv3625) {
				yyv3625 = append(yyv3625, Namespace{}) // var yyz3625 Namespace
				yyc3625 = true
			}
			yyh3625.ElemContainerState(yyj3625)
			if yyj3625 < len(yyv3625) {
				if r.TryDecodeAsNil() {
					yyv3625[yyj3625] = Namespace{}
				} else {
					yyv3628 := &yyv3625[yyj3625]
					yyv3628.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3625 < len(yyv3625) {
			yyv3625 = yyv3625[:yyj3625]
			yyc3625 = true
		} else if yyj3625 == 0 && yyv3625 == nil {
			yyv3625 = []Namespace{}
			yyc3625 = true
		}
	}
	yyh3625.End()
	if yyc3625 {
		*v = yyv3625
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3629 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3630 := &yyv3629
		yy3630.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3631 := *v
	yyh3631, yyl3631 := z.DecSliceHelperStart()
	var yyc3631 bool
	if yyl3631 == 0 {
		if yyv3631 == nil {
			yyv3631 = []Event{}
			yyc3631 = true
		} else if len(yyv3631) != 0 {
			yyv3631 = yyv3631[:0]
			yyc3631 = true
		}
	} else if yyl3631 > 0 {
		var yyrr3631, yyrl3631 int
		var yyrt3631 bool
		if yyl3631 > cap(yyv3631) {

			yyrg3631 := len(yyv3631) > 0
			yyv23631 := yyv3631
			yyrl3631, yyrt3631 = z.DecInferLen(yyl3631, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt3631 {
				if yyrl3631 <= cap(yyv3631) {
					yyv3631 = yyv3631[:yyrl3631]
				} else {
					yyv3631 = make([]Event, yyrl3631)
				}
			} else {
				yyv3631 = make([]Event, yyrl3631)
			}
			yyc3631 = true
			yyrr3631 = len(yyv3631)
			if yyrg3631 {
				copy(yyv3631, yyv23631)
			}
		} else if yyl3631 != len(yyv3631) {
			yyv3631 = yyv3631[:yyl3631]
			yyc3631 = true
		}
		yyj3631 := 0
		for ; yyj3631 < yyrr3631; yyj3631++ {
			yyh3631.ElemContainerState(yyj3631)
			if r.TryDecodeAsNil() {
				yyv3631[yyj3631] = Event{}
			} else {
				yyv3632 := &yyv3631[yyj3631]
				yyv3632.CodecDecodeSelf(d)
			}

		}
		if yyrt3631 {
			for ; yyj3631 < yyl3631; yyj3631++ {
				yyv3631 = append(yyv3631, Event{})
				yyh3631.ElemContainerState(yyj3631)
				if r.TryDecodeAsNil() {
					yyv3631[yyj3631] = Event{}
				} else {
					yyv3633 := &yyv3631[yyj3631]
					yyv3633.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3631 := 0
		for ; !r.CheckBreak(); yyj3631++ {

			if yyj3631 >= len(yyv3631) {
				yyv3631 = append(yyv3631, Event{}) // var yyz3631 Event
				yyc3631 = true
			}
			yyh3631.ElemContainerState(yyj3631)
			if yyj3631 < len(yyv3631) {
				if r.TryDecodeAsNil() {
					yyv3631[yyj3631] = Event{}
				} else {
					yyv3634 := &yyv3631[yyj3631]
					yyv3634.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3631 < len(yyv3631) {
			yyv3631 = yyv3631[:yyj3631]
			yyc3631 = true
		} else if yyj3631 == 0 && yyv3631 == nil {
			yyv3631 = []Event{}
			yyc3631 = true
		}
	}
	yyh3631.End()
	if yyc3631 {
		*v = yyv3631
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg6_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3635 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv3635 == nil {
			r.EncodeNil()
		} else {
			yym3636 := z.EncBinary()
			_ = yym3636
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3635) {
			} else {
				z.EncFallback(yyv3635)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg6_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3637 := *v
	yyh3637, yyl3637 := z.DecSliceHelperStart()
	var yyc3637 bool
	if yyl3637 == 0 {
		if yyv3637 == nil {
			yyv3637 = []pkg6_runtime.Object{}
			yyc3637 = true
		} else if len(yyv3637) != 0 {
			yyv3637 = yyv3637[:0]
			yyc3637 = true
		}
	} else if yyl3637 > 0 {
		var yyrr3637, yyrl3637 int
		var yyrt3637 bool
		if yyl3637 > cap(yyv3637) {

			yyrg3637 := len(yyv3637) > 0
			yyv23637 := yyv3637
			yyrl3637, yyrt3637 = z.DecInferLen(yyl3637, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3637 {
				if yyrl3637 <= cap(yyv3637) {
					yyv3637 = yyv3637[:yyrl3637]
				} else {
					yyv3637 = make([]pkg6_runtime.Object, yyrl3637)
				}
			} else {
				yyv3637 = make([]pkg6_runtime.Object, yyrl3637)
			}
			yyc3637 = true
			yyrr3637 = len(yyv3637)
			if yyrg3637 {
				copy(yyv3637, yyv23637)
			}
		} else if yyl3637 != len(yyv3637) {
			yyv3637 = yyv3637[:yyl3637]
			yyc3637 = true
		}
		yyj3637 := 0
		for ; yyj3637 < yyrr3637; yyj3637++ {
			yyh3637.ElemContainerState(yyj3637)
			if r.TryDecodeAsNil() {
				yyv3637[yyj3637] = nil
			} else {
				yyv3638 := &yyv3637[yyj3637]
				yym3639 := z.DecBinary()
				_ = yym3639
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3638) {
				} else {
					z.DecFallback(yyv3638, true)
				}
			}

		}
		if yyrt3637 {
			for ; yyj3637 < yyl3637; yyj3637++ {
				yyv3637 = append(yyv3637, nil)
				yyh3637.ElemContainerState(yyj3637)
				if r.TryDecodeAsNil() {
					yyv3637[yyj3637] = nil
				} else {
					yyv3640 := &yyv3637[yyj3637]
					yym3641 := z.DecBinary()
					_ = yym3641
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3640) {
					} else {
						z.DecFallback(yyv3640, true)
					}
				}

			}
		}

	} else {
		yyj3637 := 0
		for ; !r.CheckBreak(); yyj3637++ {

			if yyj3637 >= len(yyv3637) {
				yyv3637 = append(yyv3637, nil) // var yyz3637 pkg6_runtime.Object
				yyc3637 = true
			}
			yyh3637.ElemContainerState(yyj3637)
			if yyj3637 < len(yyv3637) {
				if r.TryDecodeAsNil() {
					yyv3637[yyj3637] = nil
				} else {
					yyv3642 := &yyv3637[yyj3637]
					yym3643 := z.DecBinary()
					_ = yym3643
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3642) {
					} else {
						z.DecFallback(yyv3642, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3637 < len(yyv3637) {
			yyv3637 = yyv3637[:yyj3637]
			yyc3637 = true
		} else if yyj3637 == 0 && yyv3637 == nil {
			yyv3637 = []pkg6_runtime.Object{}
			yyc3637 = true
		}
	}
	yyh3637.End()
	if yyc3637 {
		*v = yyv3637
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3644 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3645 := &yyv3644
		yy3645.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3646 := *v
	yyh3646, yyl3646 := z.DecSliceHelperStart()
	var yyc3646 bool
	if yyl3646 == 0 {
		if yyv3646 == nil {
			yyv3646 = []LimitRangeItem{}
			yyc3646 = true
		} else if len(yyv3646) != 0 {
			yyv3646 = yyv3646[:0]
			yyc3646 = true
		}
	} else if yyl3646 > 0 {
		var yyrr3646, yyrl3646 int
		var yyrt3646 bool
		if yyl3646 > cap(yyv3646) {

			yyrg3646 := len(yyv3646) > 0
			yyv23646 := yyv3646
			yyrl3646, yyrt3646 = z.DecInferLen(yyl3646, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3646 {
				if yyrl3646 <= cap(yyv3646) {
					yyv3646 = yyv3646[:yyrl3646]
				} else {
					yyv3646 = make([]LimitRangeItem, yyrl3646)
				}
			} else {
				yyv3646 = make([]LimitRangeItem, yyrl3646)
			}
			yyc3646 = true
			yyrr3646 = len(yyv3646)
			if yyrg3646 {
				copy(yyv3646, yyv23646)
			}
		} else if yyl3646 != len(yyv3646) {
			yyv3646 = yyv3646[:yyl3646]
			yyc3646 = true
		}
		yyj3646 := 0
		for ; yyj3646 < yyrr3646; yyj3646++ {
			yyh3646.ElemContainerState(yyj3646)
			if r.TryDecodeAsNil() {
				yyv3646[yyj3646] = LimitRangeItem{}
			} else {
				yyv3647 := &yyv3646[yyj3646]
				yyv3647.CodecDecodeSelf(d)
			}

		}
		if yyrt3646 {
			for ; yyj3646 < yyl3646; yyj3646++ {
				yyv3646 = append(yyv3646, LimitRangeItem{})
				yyh3646.ElemContainerState(yyj3646)
				if r.TryDecodeAsNil() {
					yyv3646[yyj3646] = LimitRangeItem{}
				} else {
					yyv3648 := &yyv3646[yyj3646]
					yyv3648.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3646 := 0
		for ; !r.CheckBreak(); yyj3646++ {

			if yyj3646 >= len(yyv3646) {
				yyv3646 = append(yyv3646, LimitRangeItem{}) // var yyz3646 LimitRangeItem
				yyc3646 = true
			}
			yyh3646.ElemContainerState(yyj3646)
			if yyj3646 < len(yyv3646) {
				if r.TryDecodeAsNil() {
					yyv3646[yyj3646] = LimitRangeItem{}
				} else {
					yyv3649 := &yyv3646[yyj3646]
					yyv3649.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3646 < len(yyv3646) {
			yyv3646 = yyv3646[:yyj3646]
			yyc3646 = true
		} else if yyj3646 == 0 && yyv3646 == nil {
			yyv3646 = []LimitRangeItem{}
			yyc3646 = true
		}
	}
	yyh3646.End()
	if yyc3646 {
		*v = yyv3646
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3650 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3651 := &yyv3650
		yy3651.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3652 := *v
	yyh3652, yyl3652 := z.DecSliceHelperStart()
	var yyc3652 bool
	if yyl3652 == 0 {
		if yyv3652 == nil {
			yyv3652 = []LimitRange{}
			yyc3652 = true
		} else if len(yyv3652) != 0 {
			yyv3652 = yyv3652[:0]
			yyc3652 = true
		}
	} else if yyl3652 > 0 {
		var yyrr3652, yyrl3652 int
		var yyrt3652 bool
		if yyl3652 > cap(yyv3652) {

			yyrg3652 := len(yyv3652) > 0
			yyv23652 := yyv3652
			yyrl3652, yyrt3652 = z.DecInferLen(yyl3652, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3652 {
				if yyrl3652 <= cap(yyv3652) {
					yyv3652 = yyv3652[:yyrl3652]
				} else {
					yyv3652 = make([]LimitRange, yyrl3652)
				}
			} else {
				yyv3652 = make([]LimitRange, yyrl3652)
			}
			yyc3652 = true
			yyrr3652 = len(yyv3652)
			if yyrg3652 {
				copy(yyv3652, yyv23652)
			}
		} else if yyl3652 != len(yyv3652) {
			yyv3652 = yyv3652[:yyl3652]
			yyc3652 = true
		}
		yyj3652 := 0
		for ; yyj3652 < yyrr3652; yyj3652++ {
			yyh3652.ElemContainerState(yyj3652)
			if r.TryDecodeAsNil() {
				yyv3652[yyj3652] = LimitRange{}
			} else {
				yyv3653 := &yyv3652[yyj3652]
				yyv3653.CodecDecodeSelf(d)
			}

		}
		if yyrt3652 {
			for ; yyj3652 < yyl3652; yyj3652++ {
				yyv3652 = append(yyv3652, LimitRange{})
				yyh3652.ElemContainerState(yyj3652)
				if r.TryDecodeAsNil() {
					yyv3652[yyj3652] = LimitRange{}
				} else {
					yyv3654 := &yyv3652[yyj3652]
					yyv3654.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3652 := 0
		for ; !r.CheckBreak(); yyj3652++ {

			if yyj3652 >= len(yyv3652) {
				yyv3652 = append(yyv3652, LimitRange{}) // var yyz3652 LimitRange
				yyc3652 = true
			}
			yyh3652.ElemContainerState(yyj3652)
			if yyj3652 < len(yyv3652) {
				if r.TryDecodeAsNil() {
					yyv3652[yyj3652] = LimitRange{}
				} else {
					yyv3655 := &yyv3652[yyj3652]
					yyv3655.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3652 < len(yyv3652) {
			yyv3652 = yyv3652[:yyj3652]
			yyc3652 = true
		} else if yyj3652 == 0 && yyv3652 == nil {
			yyv3652 = []LimitRange{}
			yyc3652 = true
		}
	}
	yyh3652.End()
	if yyc3652 {
		*v = yyv3652
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3656 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3657 := &yyv3656
		yy3657.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3658 := *v
	yyh3658, yyl3658 := z.DecSliceHelperStart()
	var yyc3658 bool
	if yyl3658 == 0 {
		if yyv3658 == nil {
			yyv3658 = []ResourceQuota{}
			yyc3658 = true
		} else if len(yyv3658) != 0 {
			yyv3658 = yyv3658[:0]
			yyc3658 = true
		}
	} else if yyl3658 > 0 {
		var yyrr3658, yyrl3658 int
		var yyrt3658 bool
		if yyl3658 > cap(yyv3658) {

			yyrg3658 := len(yyv3658) > 0
			yyv23658 := yyv3658
			yyrl3658, yyrt3658 = z.DecInferLen(yyl3658, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3658 {
				if yyrl3658 <= cap(yyv3658) {
					yyv3658 = yyv3658[:yyrl3658]
				} else {
					yyv3658 = make([]ResourceQuota, yyrl3658)
				}
			} else {
				yyv3658 = make([]ResourceQuota, yyrl3658)
			}
			yyc3658 = true
			yyrr3658 = len(yyv3658)
			if yyrg3658 {
				copy(yyv3658, yyv23658)
			}
		} else if yyl3658 != len(yyv3658) {
			yyv3658 = yyv3658[:yyl3658]
			yyc3658 = true
		}
		yyj3658 := 0
		for ; yyj3658 < yyrr3658; yyj3658++ {
			yyh3658.ElemContainerState(yyj3658)
			if r.TryDecodeAsNil() {
				yyv3658[yyj3658] = ResourceQuota{}
			} else {
				yyv3659 := &yyv3658[yyj3658]
				yyv3659.CodecDecodeSelf(d)
			}

		}
		if yyrt3658 {
			for ; yyj3658 < yyl3658; yyj3658++ {
				yyv3658 = append(yyv3658, ResourceQuota{})
				yyh3658.ElemContainerState(yyj3658)
				if r.TryDecodeAsNil() {
					yyv3658[yyj3658] = ResourceQuota{}
				} else {
					yyv3660 := &yyv3658[yyj3658]
					yyv3660.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3658 := 0
		for ; !r.CheckBreak(); yyj3658++ {

			if yyj3658 >= len(yyv3658) {
				yyv3658 = append(yyv3658, ResourceQuota{}) // var yyz3658 ResourceQuota
				yyc3658 = true
			}
			yyh3658.ElemContainerState(yyj3658)
			if yyj3658 < len(yyv3658) {
				if r.TryDecodeAsNil() {
					yyv3658[yyj3658] = ResourceQuota{}
				} else {
					yyv3661 := &yyv3658[yyj3658]
					yyv3661.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3658 < len(yyv3658) {
			yyv3658 = yyv3658[:yyj3658]
			yyc3658 = true
		} else if yyj3658 == 0 && yyv3658 == nil {
			yyv3658 = []ResourceQuota{}
			yyc3658 = true
		}
	}
	yyh3658.End()
	if yyc3658 {
		*v = yyv3658
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3662, yyv3662 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym3663 := z.EncBinary()
		_ = yym3663
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3662))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv3662 == nil {
			r.EncodeNil()
		} else {
			yym3664 := z.EncBinary()
			_ = yym3664
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3662))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3665 := *v
	yyl3665 := r.ReadMapStart()
	yybh3665 := z.DecBasicHandle()
	if yyv3665 == nil {
		yyrl3665, _ := z.DecInferLen(yyl3665, yybh3665.MaxInitLen, 40)
		yyv3665 = make(map[string][]uint8, yyrl3665)
		*v = yyv3665
	}
	var yymk3665 string
	var yymv3665 []uint8
	var yymg3665 bool
	if yybh3665.MapValueReset {
		yymg3665 = true
	}
	if yyl3665 > 0 {
		for yyj3665 := 0; yyj3665 < yyl3665; yyj3665++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3665 = ""
			} else {
				yymk3665 = string(r.DecodeString())
			}

			if yymg3665 {
				yymv3665 = yyv3665[yymk3665]
			} else {
				yymv3665 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3665 = nil
			} else {
				yyv3667 := &yymv3665
				yym3668 := z.DecBinary()
				_ = yym3668
				if false {
				} else {
					*yyv3667 = r.DecodeBytes(*(*[]byte)(yyv3667), false, false)
				}
			}

			if yyv3665 != nil {
				yyv3665[yymk3665] = yymv3665
			}
		}
	} else if yyl3665 < 0 {
		for yyj3665 := 0; !r.CheckBreak(); yyj3665++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3665 = ""
			} else {
				yymk3665 = string(r.DecodeString())
			}

			if yymg3665 {
				yymv3665 = yyv3665[yymk3665]
			} else {
				yymv3665 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3665 = nil
			} else {
				yyv3670 := &yymv3665
				yym3671 := z.DecBinary()
				_ = yym3671
				if false {
				} else {
					*yyv3670 = r.DecodeBytes(*(*[]byte)(yyv3670), false, false)
				}
			}

			if yyv3665 != nil {
				yyv3665[yymk3665] = yymv3665
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3672 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3673 := &yyv3672
		yy3673.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3674 := *v
	yyh3674, yyl3674 := z.DecSliceHelperStart()
	var yyc3674 bool
	if yyl3674 == 0 {
		if yyv3674 == nil {
			yyv3674 = []Secret{}
			yyc3674 = true
		} else if len(yyv3674) != 0 {
			yyv3674 = yyv3674[:0]
			yyc3674 = true
		}
	} else if yyl3674 > 0 {
		var yyrr3674, yyrl3674 int
		var yyrt3674 bool
		if yyl3674 > cap(yyv3674) {

			yyrg3674 := len(yyv3674) > 0
			yyv23674 := yyv3674
			yyrl3674, yyrt3674 = z.DecInferLen(yyl3674, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3674 {
				if yyrl3674 <= cap(yyv3674) {
					yyv3674 = yyv3674[:yyrl3674]
				} else {
					yyv3674 = make([]Secret, yyrl3674)
				}
			} else {
				yyv3674 = make([]Secret, yyrl3674)
			}
			yyc3674 = true
			yyrr3674 = len(yyv3674)
			if yyrg3674 {
				copy(yyv3674, yyv23674)
			}
		} else if yyl3674 != len(yyv3674) {
			yyv3674 = yyv3674[:yyl3674]
			yyc3674 = true
		}
		yyj3674 := 0
		for ; yyj3674 < yyrr3674; yyj3674++ {
			yyh3674.ElemContainerState(yyj3674)
			if r.TryDecodeAsNil() {
				yyv3674[yyj3674] = Secret{}
			} else {
				yyv3675 := &yyv3674[yyj3674]
				yyv3675.CodecDecodeSelf(d)
			}

		}
		if yyrt3674 {
			for ; yyj3674 < yyl3674; yyj3674++ {
				yyv3674 = append(yyv3674, Secret{})
				yyh3674.ElemContainerState(yyj3674)
				if r.TryDecodeAsNil() {
					yyv3674[yyj3674] = Secret{}
				} else {
					yyv3676 := &yyv3674[yyj3674]
					yyv3676.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3674 := 0
		for ; !r.CheckBreak(); yyj3674++ {

			if yyj3674 >= len(yyv3674) {
				yyv3674 = append(yyv3674, Secret{}) // var yyz3674 Secret
				yyc3674 = true
			}
			yyh3674.ElemContainerState(yyj3674)
			if yyj3674 < len(yyv3674) {
				if r.TryDecodeAsNil() {
					yyv3674[yyj3674] = Secret{}
				} else {
					yyv3677 := &yyv3674[yyj3674]
					yyv3677.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3674 < len(yyv3674) {
			yyv3674 = yyv3674[:yyj3674]
			yyc3674 = true
		} else if yyj3674 == 0 && yyv3674 == nil {
			yyv3674 = []Secret{}
			yyc3674 = true
		}
	}
	yyh3674.End()
	if yyc3674 {
		*v = yyv3674
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3678 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3679 := &yyv3678
		yy3679.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3680 := *v
	yyh3680, yyl3680 := z.DecSliceHelperStart()
	var yyc3680 bool
	if yyl3680 == 0 {
		if yyv3680 == nil {
			yyv3680 = []ComponentCondition{}
			yyc3680 = true
		} else if len(yyv3680) != 0 {
			yyv3680 = yyv3680[:0]
			yyc3680 = true
		}
	} else if yyl3680 > 0 {
		var yyrr3680, yyrl3680 int
		var yyrt3680 bool
		if yyl3680 > cap(yyv3680) {

			yyrg3680 := len(yyv3680) > 0
			yyv23680 := yyv3680
			yyrl3680, yyrt3680 = z.DecInferLen(yyl3680, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3680 {
				if yyrl3680 <= cap(yyv3680) {
					yyv3680 = yyv3680[:yyrl3680]
				} else {
					yyv3680 = make([]ComponentCondition, yyrl3680)
				}
			} else {
				yyv3680 = make([]ComponentCondition, yyrl3680)
			}
			yyc3680 = true
			yyrr3680 = len(yyv3680)
			if yyrg3680 {
				copy(yyv3680, yyv23680)
			}
		} else if yyl3680 != len(yyv3680) {
			yyv3680 = yyv3680[:yyl3680]
			yyc3680 = true
		}
		yyj3680 := 0
		for ; yyj3680 < yyrr3680; yyj3680++ {
			yyh3680.ElemContainerState(yyj3680)
			if r.TryDecodeAsNil() {
				yyv3680[yyj3680] = ComponentCondition{}
			} else {
				yyv3681 := &yyv3680[yyj3680]
				yyv3681.CodecDecodeSelf(d)
			}

		}
		if yyrt3680 {
			for ; yyj3680 < yyl3680; yyj3680++ {
				yyv3680 = append(yyv3680, ComponentCondition{})
				yyh3680.ElemContainerState(yyj3680)
				if r.TryDecodeAsNil() {
					yyv3680[yyj3680] = ComponentCondition{}
				} else {
					yyv3682 := &yyv3680[yyj3680]
					yyv3682.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3680 := 0
		for ; !r.CheckBreak(); yyj3680++ {

			if yyj3680 >= len(yyv3680) {
				yyv3680 = append(yyv3680, ComponentCondition{}) // var yyz3680 ComponentCondition
				yyc3680 = true
			}
			yyh3680.ElemContainerState(yyj3680)
			if yyj3680 < len(yyv3680) {
				if r.TryDecodeAsNil() {
					yyv3680[yyj3680] = ComponentCondition{}
				} else {
					yyv3683 := &yyv3680[yyj3680]
					yyv3683.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3680 < len(yyv3680) {
			yyv3680 = yyv3680[:yyj3680]
			yyc3680 = true
		} else if yyj3680 == 0 && yyv3680 == nil {
			yyv3680 = []ComponentCondition{}
			yyc3680 = true
		}
	}
	yyh3680.End()
	if yyc3680 {
		*v = yyv3680
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3684 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3685 := &yyv3684
		yy3685.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3686 := *v
	yyh3686, yyl3686 := z.DecSliceHelperStart()
	var yyc3686 bool
	if yyl3686 == 0 {
		if yyv3686 == nil {
			yyv3686 = []ComponentStatus{}
			yyc3686 = true
		} else if len(yyv3686) != 0 {
			yyv3686 = yyv3686[:0]
			yyc3686 = true
		}
	} else if yyl3686 > 0 {
		var yyrr3686, yyrl3686 int
		var yyrt3686 bool
		if yyl3686 > cap(yyv3686) {

			yyrg3686 := len(yyv3686) > 0
			yyv23686 := yyv3686
			yyrl3686, yyrt3686 = z.DecInferLen(yyl3686, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3686 {
				if yyrl3686 <= cap(yyv3686) {
					yyv3686 = yyv3686[:yyrl3686]
				} else {
					yyv3686 = make([]ComponentStatus, yyrl3686)
				}
			} else {
				yyv3686 = make([]ComponentStatus, yyrl3686)
			}
			yyc3686 = true
			yyrr3686 = len(yyv3686)
			if yyrg3686 {
				copy(yyv3686, yyv23686)
			}
		} else if yyl3686 != len(yyv3686) {
			yyv3686 = yyv3686[:yyl3686]
			yyc3686 = true
		}
		yyj3686 := 0
		for ; yyj3686 < yyrr3686; yyj3686++ {
			yyh3686.ElemContainerState(yyj3686)
			if r.TryDecodeAsNil() {
				yyv3686[yyj3686] = ComponentStatus{}
			} else {
				yyv3687 := &yyv3686[yyj3686]
				yyv3687.CodecDecodeSelf(d)
			}

		}
		if yyrt3686 {
			for ; yyj3686 < yyl3686; yyj3686++ {
				yyv3686 = append(yyv3686, ComponentStatus{})
				yyh3686.ElemContainerState(yyj3686)
				if r.TryDecodeAsNil() {
					yyv3686[yyj3686] = ComponentStatus{}
				} else {
					yyv3688 := &yyv3686[yyj3686]
					yyv3688.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3686 := 0
		for ; !r.CheckBreak(); yyj3686++ {

			if yyj3686 >= len(yyv3686) {
				yyv3686 = append(yyv3686, ComponentStatus{}) // var yyz3686 ComponentStatus
				yyc3686 = true
			}
			yyh3686.ElemContainerState(yyj3686)
			if yyj3686 < len(yyv3686) {
				if r.TryDecodeAsNil() {
					yyv3686[yyj3686] = ComponentStatus{}
				} else {
					yyv3689 := &yyv3686[yyj3686]
					yyv3689.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3686 < len(yyv3686) {
			yyv3686 = yyv3686[:yyj3686]
			yyc3686 = true
		} else if yyj3686 == 0 && yyv3686 == nil {
			yyv3686 = []ComponentStatus{}
			yyc3686 = true
		}
	}
	yyh3686.End()
	if yyc3686 {
		*v = yyv3686
	}
}
